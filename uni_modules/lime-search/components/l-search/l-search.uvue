<template>
	<view class="l-search" :style="[lStyle]">
		<slot name="left"></slot>
		<view class="l-search__content" :style="[contextStyle]" :class="contentClass">
			<!-- #ifndef APP || WEB -->
			<view class="l-search__icon">
			<!-- #endif -->
				<slot name="left-icon">
					<l-icon class="l-search__icon" size="42rpx" :color="iconColor" :name="leftIcon" v-if="leftIcon.length > 0" />
				</slot>
			<!-- #ifndef APP || WEB -->
			</view>
			<!-- #endif -->
			<input  
				name="input"
				class="l-search__keyword"
				:style="[inputStyle, center ? 'text-align:center':'']"
				:type="type"
				:maxlength="maxlength"
				:disabled="disabled"
				:focus="focus"
				:value="searchValue"
				:confirm-type="confirmType"
				:confirm-hold="confirmHold"
				:cursor="cursor"
				:cursor-color="cursorColor"
				:adjust-position="adjustPosition"
				:always-embed="alwaysEmbed"
				:selection-start="selectionStart"
				:selection-end="selectionEnd"
				:hold-keyboard="holdKeyboard"
				:cursor-spacing="cursorSpacing"
				:placeholder="placeholder"
				:placeholder-style="(placeholderStyle ?? ' ') +  (center ? 'text-align:center':'')"
				placeholder-class="l-search__placeholder"
				@input="handleInput"
				@focus="handleFocus"
				@blur="handleBlur"
				@confirm="handleConfirm"/>
			<view
				class="l-search__clear"
				:class="{
					'l-search__clear--right': $slots['right-icon'] != null
				}"
				v-if="clearable"
				v-show="searchValue.length>0"
				@click="handleClear"
				aria-role="button"
				aria-label="清除">
				<!-- #ifndef APP || WEB -->
				<view class="l-search__icon l-search__clear-icon">
				<!-- #endif -->
				<l-icon class="l-search__icon l-search__clear-icon" name="close-circle-filled" size="48rpx" :color="clearIconColor"  />
				<!-- #ifndef APP || WEB -->
				</view>
				<!-- #endif -->
			</view>	
			<slot name="right-icon"/>
		</view>
		<slot name="action">
			<text class="l-search__action" :class="{'l-search__action--focused': focused}" @click="handleActionClick" v-if="action != null"> {{action}}</text>
		</slot>
	</view>
</template>
<script lang="uts" setup>
	import { SearchProps } from './type';
	import { characterLimit } from '@/uni_modules/lime-shared/characterLimit';
	
	const emit = defineEmits(['change', 'blur', 'clear', 'focus', 'submit', 'action-click'])
	const props = withDefaults(defineProps<SearchProps>(), {
		adjustPosition: true,
		alwaysEmbed: false,
		center: false,
		clearable: true,
		confirmHold: false,
		confirmType: 'search',
		// cursor: 0,
		cursorSpacing: 0,
		disabled: false,
		focus: false,
		holdKeyboard: false,
		leftIcon: 'search',
		maxlength: -1,
		selectionEnd: -1,
		selectionStart: -1,
		shape: 'square',
		type: 'text',
	})
	
	const focused = ref(props.focus)
	const modelValue = defineModel({type: String, default: ''})
	const searchValue = computed({
		set(value: string) {
			modelValue.value = value;
			emit('change', value)
		},
		get():string {
			return props.value ?? modelValue.value
		}
	} as WritableComputedOptions<string>)
	
	const contentClass = computed(():Map<string, any>=>{
		const cls = new Map<string, any>()
		// cls.set(focused.value ? 'is-focused': 'not-focused', true)
		cls.set('l-search__content--focused', focused.value)
		cls.set('l-search__content--center', props.center)
		cls.set('l-search__content--' + props.shape, true)
		return cls
	})
	
	const contextStyle = computed(():Map<string, any>=>{
		const style = new Map<string, any>()
		if(props.padding != null) {
			style.set('padding', props.padding!)
		}
		if(props.radius != null) {
			style.set('border-radius', props.radius!)
		}
		if(props.height != null) {
			style.set('height', props.height!)
		}
		if(props.bgColor != null) {
			style.set('background', props.bgColor!)
		}
		return style
	})
	
	const inputStyle = computed(():Map<string, any>=>{
		const style = new Map<string, any>()
		if(props.fontSize != null) {
			style.set('font-size', props.fontSize!)
		}
		if(props.textColor != null) {
			style.set('color', props.textColor!)
		}
		return style
	})
	
	const handleInput = (e: UniInputEvent) => {
		let { value } = e.detail;
		const { maxlength, maxcharacter } = props;
		if(maxcharacter != null && maxcharacter > 0) {
			const { characters } = characterLimit('maxcharacter', value, maxcharacter)
			value = characters;
		} 
		// else if(maxlength > 0) {
		// 	const { characters } = characterLimit('maxlength', value, maxlength)
		// 	value = characters;
		// }
		searchValue.value = value
	}
	const handleClear = (_e: UniPointerEvent) => {
		searchValue.value = '';
		focused.value = true
		emit('clear')
	}
	const handleFocus = (e: UniInputFocusEvent) => {
		const { value } = e.detail;
		focused.value = true
		emit('focus', value)
	}
	const handleBlur = (e: UniInputBlurEvent) => {
		const { value } = e.detail;
		focused.value = false
		emit('blur', value)
	}
	const handleConfirm = (e: UniInputConfirmEvent) => {
		const { value } = e.detail;
		emit('submit', value)
	}
	const handleActionClick = (_e: UniPointerEvent) => {
		emit('action-click')
	}
</script>
<style lang="scss">
	@import './index';
</style>
