{"version":3,"sources":["../../../../../../../../../Applications/HBuilderX.app/Contents/HBuilderX/plugins/uniapp-cli-vite/node_modules/@dcloudio/uni-console/src/runtime/app/socket.ts","App.uvue","uni_modules/lime-daily-punch/components/l-daily-punch/calender.uts","uni_modules/lime-shared/unitConvert/index.uts","uni_modules/lime-shared/unitConvert/index.ts","../../../../../../../../../Applications/HBuilderX.app/Contents/HBuilderX/plugins/uniapp-cli-vite/node_modules/@dcloudio/uni-console/src/runtime/app/index.ts","main.uts","uni_modules/lime-daily-punch/index.uts","uni_modules/lime-daily-punch/index.ts","uni_modules/lime-shared/isString/index.uts","uni_modules/lime-shared/isString/index.ts","uni_modules/lime-shared/isNumber/index.uts","uni_modules/lime-shared/isNumber/index.ts","uni_modules/lime-shared/isNumeric/index.uts","uni_modules/lime-shared/isNumeric/index.ts","uni_modules/lime-dayuts/common/constant.uts","uni_modules/lime-dayuts/common/constant.ts","uni_modules/lime-dayuts/utssdk/interface.uts","uni_modules/lime-dayuts/common/locale/en/index.uts","uni_modules/lime-dayuts/common/locale/en/index.ts","uni_modules/lime-dayuts/common/locale/zh-cn/index.uts","uni_modules/lime-dayuts/common/locale/zh-cn/index.ts","uni_modules/lime-dayuts/common/use.uts","uni_modules/lime-dayuts/common/use.ts","uni_modules/lime-dayuts/common/index.uts","uni_modules/lime-dayuts/common/index.ts","uni_modules/lime-dayuts/common/utils.uts","uni_modules/lime-dayuts/common/utils.ts"],"sourcesContent":["/// <reference types=\"@dcloudio/uni-app-x/types/uni/global\" />\n// 之所以又写了一份，是因为外层的socket，connectSocket的时候必须传入multiple:true\n// 但是android又不能传入，目前代码里又不能写条件编译之类的。\nexport function initRuntimeSocket(\n  hosts: string,\n  port: string,\n  id: string\n): Promise<SocketTask | null> {\n  if (hosts == '' || port == '' || id == '') return Promise.resolve(null)\n  return hosts\n    .split(',')\n    .reduce<Promise<SocketTask | null>>(\n      (\n        promise: Promise<SocketTask | null>,\n        host: string\n      ): Promise<SocketTask | null> => {\n        return promise.then((socket): Promise<SocketTask | null> => {\n          if (socket != null) return Promise.resolve(socket)\n          return tryConnectSocket(host, port, id)\n        })\n      },\n      Promise.resolve(null)\n    )\n}\n\nconst SOCKET_TIMEOUT = 500\nfunction tryConnectSocket(\n  host: string,\n  port: string,\n  id: string\n): Promise<SocketTask | null> {\n  return new Promise((resolve, reject) => {\n    const socket = uni.connectSocket({\n      url: `ws://${host}:${port}/${id}`,\n      fail() {\n        resolve(null)\n      },\n    })\n    const timer = setTimeout(() => {\n      // @ts-expect-error\n      socket.close({\n        code: 1006,\n        reason: 'connect timeout',\n      } as CloseSocketOptions)\n      resolve(null)\n    }, SOCKET_TIMEOUT)\n\n    socket.onOpen((e) => {\n      clearTimeout(timer)\n      resolve(socket)\n    })\n    socket.onClose((e) => {\n      clearTimeout(timer)\n      resolve(null)\n    })\n    socket.onError((e) => {\n      clearTimeout(timer)\n      resolve(null)\n    })\n  })\n}\n","<script lang=\"uts\">\r\n\tlet firstBackTime = 0\r\n\texport default {\r\n\t\tonLaunch: function () {\r\n\t\t\tconsole.log('App Launch')\r\n\t\t},\r\n\t\tonShow: function () {\r\n\t\t\tconsole.log('App Show')\r\n\t\t},\r\n\t\tonHide: function () {\r\n\t\t\tconsole.log('App Hide')\r\n\t\t},\r\n\r\n\t\tonLastPageBackPress: function () {\r\n\t\t\tconsole.log('App LastPageBackPress')\r\n\t\t\tif (firstBackTime == 0) {\r\n\t\t\t\tuni.showToast({\r\n\t\t\t\t\ttitle: '再按一次退出应用',\r\n\t\t\t\t\tposition: 'bottom',\r\n\t\t\t\t})\r\n\t\t\t\tfirstBackTime = Date.now()\r\n\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\tfirstBackTime = 0\r\n\t\t\t\t}, 2000)\r\n\t\t\t} else if (Date.now() - firstBackTime < 2000) {\r\n\t\t\t\tfirstBackTime = Date.now()\r\n\t\t\t\tuni.exit()\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tonExit: function () {\r\n\t\t\tconsole.log('App Exit')\r\n\t\t},\r\n\t}\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n\t/*每个页面公共css */\r\n\t.uni-row {\r\n\t\tflex-direction: row;\r\n\t}\r\n\r\n\t.uni-column {\r\n\t\tflex-direction: column;\r\n\t}\r\n</style>","import { LDay, LYearMonth, LGridSize, LMonthData, LOptions } from '../../index'\r\n// import { LDay } from '../../utssdk/interface';\r\n\r\n\r\nexport class ArrowIcon {\r\n\tx : number = 0\r\n\ty : number = 0\r\n\tsize : number = 0\r\n\ttype : string = ''\r\n\tcolor : string = ''\r\n\tconstructor(x : number, y : number, size : number, type : string, color : string) {\r\n\t\tthis.x = x\r\n\t\tthis.y = y\r\n\t\tthis.size = size\r\n\t\tthis.type = type\r\n\t\tthis.color = color\r\n\t}\r\n\tdraw(ctx : CanvasRenderingContext2D) {\r\n\t\tconst { x, y, size, color, type } = this\r\n\t\t// 设置绘图的填充颜色\r\n\t\tctx.strokeStyle = color;\r\n\t\tctx.beginPath();\r\n\t\tctx.lineJoin = 'round'\r\n\t\tctx.lineWidth = 2\r\n\t\t// 根据箭头类型绘制不同的形状\r\n\t\tif (type === 'left') {\r\n\t\t\tctx.moveTo(x + size * 0.6042, y + size * 0.25);\r\n\t\t\tctx.lineTo(x + size * 0.3542, y + size * 0.5);\r\n\t\t\tctx.lineTo(x + size * 0.6042, y + size * 0.75);\r\n\r\n\t\t} else if (type === 'right') {\r\n\t\t\tctx.moveTo(x + size * (1 - 0.6042), y + size * 0.25);\r\n\t\t\tctx.lineTo(x + size * (1 - 0.3542), y + size * 0.5);\r\n\t\t\tctx.lineTo(x + size * (1 - 0.6042), y + size * 0.75);\r\n\t\t}\r\n\r\n\t\tctx.stroke()\r\n\t}\r\n\tisCoordinateInside(x : number, y : number) : boolean {\r\n\t\treturn x >= this.x && x <= this.x + this.size && y >= this.y && y <= this.y + this.size;\r\n\t}\r\n}\r\n\r\nexport class Day implements LDay {\r\n\tday : number = 0;\r\n\tmonth : number = 0;\r\n\tyear : number = 0;\r\n\tfullDay : string = '00';\r\n\tfullMonth : string = '00';\r\n\tfullDate : string = '';\r\n\tisBeforeToday : boolean = false;\r\n\tisToday : boolean = false\r\n\t// isCheckedIn: boolean = false;\r\n\tisCurrentMonth : boolean = false;\r\n\tprivate x : number = 0;\r\n\tprivate y : number = 0;\r\n\tprivate calendar : Calendar\r\n\twidth : number = 0;\r\n\theight : number = 0;\r\n\toriginalMonth : number = 0;\r\n\ttype : string = 'current'\r\n\tfontSize : number = 20\r\n\ttimestamp : number = 0\r\n\tconstructor(day : number, month : number, year : number, isCurrentMonth : boolean, isToday : boolean, isBeforeToday : boolean, calendar : Calendar) {\r\n\t\tthis.day = day;\r\n\t\tthis.month = month\r\n\t\tthis.year = year;\r\n\t\tthis.originalMonth = month - 1;\r\n\t\tthis.fullMonth = this.formatMonth(month)\r\n\t\tthis.fullDay = this.formatDay(day)\r\n\t\tthis.fullDate = `${year}-${this.fullMonth}-${this.fullDay}`;\r\n\t\tthis.isCurrentMonth = isCurrentMonth;\r\n\t\tthis.isBeforeToday = isBeforeToday;\r\n\t\tthis.isToday = isToday\r\n\t\tthis.calendar = calendar\r\n\t\tthis.timestamp = new Date(year, month - 1, day).getTime()\r\n\t}\r\n\r\n\tprivate formatDay(day : number) : string {\r\n\t\treturn `${day}`.padStart(2, '0');\r\n\t}\r\n\r\n\tprivate formatMonth(month : number) : string {\r\n\t\treturn `${month}`.padStart(2, '0');\r\n\t}\r\n\t\r\n\tisCoordinateInside(x : number, y : number) : boolean {\r\n\t\treturn x >= this.x && x <= this.x + this.width && y >= this.y && y <= this.y + this.height;\r\n\t}\r\n\r\n\tsetPosition(x : number, y : number) : void {\r\n\t\tthis.x = x;\r\n\t\tthis.y = y;\r\n\t}\r\n\r\n\tsetDimensions(width : number, height : number) : void {\r\n\t\tthis.width = width;\r\n\t\tthis.height = height;\r\n\t}\r\n\tprivate get opt(): LOptions{\r\n\t\treturn this.calendar.opt\r\n\t}\r\n\tget selectDate() : LDay | null {\r\n\t\treturn this.calendar.selectDate\r\n\t}\r\n\tset selectDate(_val: LDay| null) {\r\n\t\t\r\n\t}\r\n\tget canSupplement() : boolean {\r\n\t\t// 在今日之前 并且 未签到 并且 支持补签\r\n\t\treturn this.opt.canSupplement! && this.isBeforeToday && !this.isCheckedIn\r\n\t}\r\n\tset canSupplement(_v: boolean) {\r\n\t\t\r\n\t}\r\n\tget isCheckedIn() : boolean {\r\n\t\treturn this.calendar.signedDates.includes(this.timestamp)\r\n\t\t// return true\r\n\t\t// if (this.calendar.opt.signedDates == null) return false\r\n\t\t// return this.calendar.opt.signedDates.some((dateString : string) : boolean => {\r\n\t\t// \tconst [year, month, day] = dateString.split('-').map((v : string) : number => parseInt(v));\r\n\t\t// \treturn year == this.year && month == this.month && day == this.day\r\n\t\t// })\r\n\t}\r\n\tset isCheckedIn(_v:boolean) {\r\n\t\t\r\n\t}\r\n\tprivate drawCircle(ctx : CanvasRenderingContext2D, x : number, y : number, radius : number, color : string, border : boolean = false) {\r\n\t\tctx.beginPath();\r\n\t\tif (border) {\r\n\t\t\tctx.lineWidth = 1\r\n\t\t\tctx.strokeStyle = 'white'\r\n\t\t}\r\n\t\tctx.fillStyle = color;\r\n\t\tctx.arc(x, y, radius, 0, Math.PI * 2);\r\n\t\tctx.fill();\r\n\t\tif (border) {\r\n\t\t\tctx.stroke()\r\n\t\t}\r\n\t}\r\n\tdraw(ctx : CanvasRenderingContext2D) {\r\n\t\tconst size = Math.min(this.width, this.height) * 0.9\r\n\t\tconst centerX = this.x + this.width / 2\r\n\t\tconst centerY = this.y + this.height / 2\r\n\t\tconst color = this.opt.color!\r\n\t\tconst unsignedColor = this.opt.unsignedColor!\r\n\t\tconst selectedDayBgColor = this.opt.selectedDayBgColor!\r\n\t\tconst textColor = this.opt.textColor!\r\n\t\tconst disabledColor = this.opt.disabledColor!\r\n\t\tconst dayFontSize = this.opt.dayFontSize!\r\n\t\t\r\n\t\t\r\n\t\tctx.textAlign = 'center';\r\n\t\tctx.font = this.isToday ? `${dayFontSize - 2}px Arial` : `${dayFontSize}px Arial`;\r\n\t\tctx.textBaseline = 'middle';\r\n\r\n\t\t// 判断是否是当前选中日期\r\n\t\tconst isSelectedDate = this.selectDate == null || this.selectDate == this;\r\n\r\n\t\t// 设置字体颜色\r\n\t\tlet txtColor = this.type == 'current' ? textColor : disabledColor;\r\n\t\tif (this.isToday && !isSelectedDate) {\r\n\t\t\ttxtColor = color;\r\n\t\t}\r\n\r\n\t\t// 绘制选中效果\r\n\t\tif (this.selectDate != null && this.selectDate == this) {\r\n\t\t\tctx.beginPath();\r\n\t\t\tctx.fillStyle = selectedDayBgColor;\r\n\t\t\tctx.arc(centerX, centerY, size / 2, 0, Math.PI * 2);\r\n\t\t\tctx.fill();\r\n\t\t}\r\n\t\t\r\n\t\t// 绘制今日效果\r\n\t\tif (this.isToday && isSelectedDate) {\r\n\t\t\tthis.drawCircle(ctx, centerX, centerY, size / 2, color);\r\n\t\t\ttxtColor = 'white';\r\n\t\t\t\r\n\t\t}\r\n\t\t// 绘制已签到或可补签效果 小点\r\n\t\tif (this.type == 'current' && (this.isCheckedIn || this.canSupplement)) {\r\n\t\t\tthis.drawCircle(ctx, centerX, centerY + this.fontSize * 0.9, 4, this.isCheckedIn ? (this.isToday && isSelectedDate ? 'white' : color) : unsignedColor);\r\n\t\t}\r\n\r\n\t\t// 绘制文字\r\n\t\tctx.fillStyle = txtColor;\r\n\t\tctx.fillText(this.isToday ? '今天' : this.fullDay, centerX, centerY);\r\n\r\n\t}\r\n}\r\n\r\n\r\nexport class Calendar {\r\n\tprivate year : number = 0\r\n\tprivate month : number = 0\r\n\tprivate el : UniCanvasElement | null = null\r\n\tprivate ctx : CanvasRenderingContext2D | null = null\r\n\tprivate init : boolean = false\r\n\tprivate today : number = 0\r\n\tprivate currentMonth : number = 0\r\n\tprivate currentYear : number = 0\r\n\t// private headerHeight : number = 50\r\n\t// private weekHeight : number = 30\r\n\tprivate monthDateCache : Map<string, LMonthData>\r\n\tprivate week : string[] = []\r\n\tselectDate : LDay | null = null\r\n\tprivate containerHeight : number = 0\r\n\tprivate containerWidth : number = 0\r\n\tprivate arrowIcons : ArrowIcon[] = []\r\n\topt : LOptions = {\r\n\t\tcanSupplement: false,\r\n\t\tisFullCalendar: true,\r\n\t\tyearMonth: '',\r\n\t\tsignedDates: [],\r\n\t\tweek: ['周日', '周一', '周二', '周三', '周四', '周五', '周六'],\r\n\t\tweekStartsOn: 0,\r\n\t\tweekColor: '#BDC0C3',\r\n\t\tweekFontSize: 12,\r\n\t\tweekHeight: 40,\r\n\t\tselectedDayBgColor: 'rgba(0,0,0,0.06)',\r\n\t\tdayFontSize: 12,\r\n\t\ttextColor: '#1A1F24',\r\n\t\tdisabledColor: '#BDC0C3',\r\n\t\tmonthTitleHeight: 50,\r\n\t\tmonthTitleFontSize: 20,\r\n\t\tcolor: '#3B87F6',\r\n\t\tunsignedColor: '#F1A33A',\r\n\t}\r\n\r\n\tconstructor() {\r\n\t\tconst date = new Date()\r\n\t\tthis.currentYear = date.getFullYear()\r\n\t\tthis.currentMonth = date.getMonth() + 1\r\n\t\tthis.today = date.getDate()\r\n\t\tthis.monthDateCache = new Map<string, LMonthData>()\r\n\t\tthis.week = this.opt.week ?? []\r\n\t}\r\n\tget signedDates() : number[] {\r\n\t\tif (this.opt.signedDates == null) return []\r\n\t\tconst values : number[] = []\r\n\t\tthis.opt.signedDates!.forEach(item => {\r\n\t\t\tconst [year, month, day] = item.split('-').map((v : string) : number => parseInt(v));\r\n\t\t\tconst time = new Date(year, month - 1, day).getTime()\r\n\t\t\tif (!values.includes(time)) {\r\n\t\t\t\tvalues.push(time)\r\n\t\t\t}\r\n\t\t})\r\n\t\treturn values\r\n\t}\r\n\tget checkinDays() : number {\r\n\t\tif (this.signedDates.length == 0) return 0\r\n\t\tconst sortedDates = this.signedDates.sort((a, b):number => {\r\n\r\n\t\t\t// 这里的判断不能省略\r\n\t\t\tif (a.compareTo(b) == 0) {\r\n\t\t\t\treturn 0\r\n\t\t\t}\r\n\r\n\t\t\treturn b - a\r\n\t\t})\r\n\t\treturn this.calculateContinuousCheckinDays(sortedDates);\r\n\t}\r\n\tprivate calculateContinuousCheckinDays(sortedDates : number[]) : number {\r\n\t\tconst dayInMillis = 24 * 60 * 60 * 1000;\r\n\t\tconst todayTime = new Date(this.currentYear, this.currentMonth - 1, this.today).getTime();\r\n\t\tlet count = 0;\r\n\t\tlet streak = 0;\r\n\r\n\t\tfor (let i = 0; i < sortedDates.length; i++) {\r\n\t\t\tif (i == 0) {\r\n\t\t\t\t// 大于1天，即隔了一天就已经中断签到 不再计算\r\n\t\t\t\tif (todayTime - sortedDates[i] > dayInMillis) {\r\n\t\t\t\t\tbreak\r\n\t\t\t\t}\r\n\t\t\t\tif (sortedDates[i] == todayTime || todayTime - sortedDates[i] == dayInMillis) {\r\n\t\t\t\t\tstreak = 1;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tif (sortedDates[i - 1] - sortedDates[i] == dayInMillis) {\r\n\t\t\t\t\tstreak++;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn streak;\r\n\t}\r\n\tsetCanvas(el : UniCanvasElement | null) {\r\n\t\tif (el == null) return\r\n\t\tthis.el = el\r\n\t\tthis.containerHeight = 6 * (this.opt.dayHeight ?? 0) + this.opt.weekHeight! + this.opt.monthTitleHeight! //6\r\n\t\tthis.containerWidth = this.el!.offsetWidth\r\n\t\tthis.el!.style.setProperty('height', this.containerHeight + 'px')\r\n\t\tthis.ctx = el.getContext('2d')!\r\n\t\tconst dpr = uni.getDeviceInfo().devicePixelRatio ?? 1;\r\n\t\t\r\n\t\tthis.el!.width = this.containerWidth * dpr;\r\n\t\tthis.el!.height = this.containerHeight * dpr;\r\n\t\tthis.ctx!.scale(dpr, dpr)\r\n\t\t// this.ctx = el.getDrawableContext()\r\n\t\t\r\n\t\t// this.ctx.fillStyle = 'red'\r\n\t\t// this.ctx.fillRect(0,0,100,100)\r\n\t}\r\n\tsetOptions(opt : LOptions) {\r\n\t\tlet datechange = false\r\n\t\tlet weekStartsOn = -1\r\n\t\tfor (let key in opt) {\r\n\t\t\tconst value = opt[key]\r\n\t\t\tif (key == 'yearMonth' && value != null && value != this.opt.yearMonth) {\r\n\t\t\t\tdatechange = true\r\n\t\t\t}\r\n\t\t\tif (key == 'weekStartsOn' && value != null && value != this.opt.weekStartsOn) {\r\n\t\t\t\tweekStartsOn = value as number\r\n\t\t\t}\r\n\t\t\tif (value != null) {\r\n\t\t\t\tthis.opt[key] = value\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (weekStartsOn != -1) {\r\n\t\t\tconst normalWeek = [...this.opt.week!]\r\n\t\t\tconst sIndex = weekStartsOn < 0 ? 0 : weekStartsOn >= normalWeek.length ? normalWeek.length - 1 : weekStartsOn\r\n\t\t\tnormalWeek.unshift(...normalWeek.slice(-sIndex))\r\n\t\t\tnormalWeek.length = 6\r\n\t\t\tthis.week = normalWeek\r\n\t\t}\r\n\r\n\t\tif (this.opt.yearMonth != '' && !this.init || datechange) {\r\n\t\t\tconst arr = this.opt.yearMonth!.split('-')\r\n\t\t\tthis.year = parseInt(arr[0])\r\n\t\t\tthis.month = parseInt(arr[1])\r\n\t\t\tthis.init = true\r\n\t\t}\r\n\t}\r\n\r\n\t/** 获取当月共多少天，也就是获取月的最后一天 */\r\n\tgetMonthDayLength(year : number, month : number) : number {\r\n\t\treturn new Date(year, month, 0).getDate()\r\n\t}\r\n\t// 获取当月第一天星期几\r\n\tgetFirstDayOfWeek(year : number, month : number, day : number = 1) : number {\r\n\t\treturn new Date(year, month - 1, day).getDay();\r\n\t}\r\n\t// 获取加/减一个月的日期\r\n\tgetOperateMonthDate(nowYear : number, nowMonth:number, num : number) : LYearMonth {\r\n\t\tlet month = nowMonth + num\r\n\t\tlet year = nowYear;\r\n\t\tif (month > 12) {\r\n\t\t\tmonth = 1;\r\n\t\t\tyear++;\r\n\t\t} else if (month < 1) {\r\n\t\t\tmonth = 12;\r\n\t\t\tyear--;\r\n\t\t}\r\n\t\treturn {\r\n\t\t\tmonth,\r\n\t\t\tyear,\r\n\t\t} as LYearMonth\r\n\t}\r\n\r\n\tgenerateMonthDateCache(year : number = this.year, month : number = this.month) : LMonthData {\r\n\t\t// 检查是否可以切换到下个月\r\n\t\t// const canSwitchToNextMonth = this.currentYear > year || (this.currentYear == year && this.currentMonth > month + 1);\r\n\t\tconst key = `${year}-${month}`\r\n\t\tif (this.monthDateCache.has(key)) {\r\n\t\t\treturn this.monthDateCache.get(key)!\r\n\t\t}\r\n\t\tconst arr : LDay[] = []\r\n\t\tconst days = this.getMonthDayLength(year, month);\r\n\t\tconst firstday = this.getFirstDayOfWeek(year, month);\r\n\t\tconst beforeEmptyLength = (firstday + this.opt.weekStartsOn!) % 7 //this.getFirstDayOfWeek(year, month);\r\n\t\t// Math.ceil((days + beforeEmptyLength) / 7)\r\n\t\tconst afterEmptyLength = 5 * 7 - beforeEmptyLength - days //6 - this.getFirstDayOfWeek(year, month, days); //6\r\n\r\n\t\tconst last = this.getOperateMonthDate(year, month, -1);\r\n\t\tconst lastMonthEndDay = this.getMonthDayLength(last.year, last.month);\r\n\t\tconst next = this.getOperateMonthDate(year, month, 1);\r\n\t\tconst today = new Date(this.currentYear, this.currentMonth - 1, this.today).getTime();\r\n\t\tlet index = 0\r\n\t\tconst getGridSize = (i : number) : LGridSize => {\r\n\t\t\t// 确保this.el存在并且可以获取到边界矩形\r\n\t\t\tconst rect = this.el?.getBoundingClientRect();\r\n\r\n\r\n\t\t\tconst height = this.opt.dayHeight ?? 0;\r\n\r\n\t\t\tconst width = rect == null ? 0 : rect.width / 7;\r\n\r\n\t\t\t// 计算行和列\r\n\t\t\tconst row = Math.floor(i / 7);\r\n\t\t\tconst col = i % 7;\r\n\r\n\t\t\t// 计算网格单元的位置\r\n\t\t\tconst x = col * width;\r\n\t\t\tconst y = row * height + this.opt.monthTitleHeight! + this.opt.weekHeight!;\r\n\r\n\t\t\treturn {\r\n\t\t\t\tx, // 使用计算得到的x值\r\n\t\t\t\ty, // 使用计算得到的y值\r\n\t\t\t\twidth, // 使用计算得到的width值\r\n\t\t\t\theight // 使用正确的变量名height\r\n\t\t\t} as LGridSize;\r\n\t\t};\r\n\t\tfor (var i = 0; i < beforeEmptyLength; i++) {\r\n\t\t\tconst { x, y, width, height } = getGridSize(index);\r\n\t\t\tconst date = lastMonthEndDay - beforeEmptyLength + i + 1;\r\n\t\t\tconst time = new Date(last.year, last.month - 1, date).getTime()\r\n\t\t\tconst day = new Day(\r\n\t\t\t\tdate,\r\n\t\t\t\tlast.month,\r\n\t\t\t\tlast.year,\r\n\t\t\t\tlast.year == this.currentYear && last.month == this.currentMonth,\r\n\t\t\t\ttime == today,\r\n\t\t\t\ttime < today,\r\n\t\t\t\tthis\r\n\t\t\t)\r\n\t\t\tday.type = 'last'\r\n\t\t\tday.setPosition(x, y)\r\n\t\t\tday.setDimensions(width, height)\r\n\t\t\tarr.push(day)\r\n\t\t\tindex++\r\n\t\t}\r\n\t\tfor (var i = 0; i < days; i++) {\r\n\t\t\tconst { x, y, width, height } = getGridSize(index)\r\n\t\t\tconst date = i + 1;\r\n\t\t\tconst time = new Date(year, month - 1, date).getTime()\r\n\t\t\tconst day = new Day(\r\n\t\t\t\tdate,\r\n\t\t\t\tmonth,\r\n\t\t\t\tyear,\r\n\t\t\t\tyear == this.currentYear && month == this.currentMonth,\r\n\t\t\t\ttime == today,\r\n\t\t\t\ttime < today,\r\n\t\t\t\tthis)\r\n\t\t\tday.setPosition(x, y)\r\n\t\t\tday.setDimensions(width, height)\r\n\t\t\tarr.push(day)\r\n\t\t\tindex++\r\n\t\t}\r\n\t\tfor (var i = 0; i < afterEmptyLength; i++) {\r\n\t\t\tconst { x, y, width, height } = getGridSize(index)\r\n\t\t\tconst date = i + 1;\r\n\t\t\tconst time = new Date(next.year, next.month - 1, date).getTime()\r\n\t\t\tconst day = new Day(date,\r\n\t\t\t\tnext.month,\r\n\t\t\t\tnext.year,\r\n\t\t\t\tnext.year == this.currentYear && next.month == this.currentMonth,\r\n\t\t\t\ttime == today,\r\n\t\t\t\ttime < today,\r\n\t\t\t\tthis)\r\n\t\t\tday.type = 'next'\r\n\t\t\tday.setPosition(x, y)\r\n\t\t\tday.setDimensions(width, height)\r\n\t\t\tarr.push(day)\r\n\t\t\tindex++\r\n\t\t}\r\n\r\n\t\tconst monthData : LMonthData = {\r\n\t\t\tyear,\r\n\t\t\tmonth,\r\n\t\t\tdays: arr,\r\n\t\t}\r\n\t\tthis.monthDateCache.set(key, monthData)\r\n\t\treturn monthData\r\n\t}\r\n\tnext() {\r\n\t\tconst { year, month } = this.getOperateMonthDate(this.year, this.month, 1)\r\n\t\t// 检查是否可以切换到下个月\r\n\t\tconst canSwitchToNextMonth = this.currentYear > year || (this.currentYear == year && month - this.currentMonth <= 1);\r\n\t\tif (canSwitchToNextMonth) {\r\n\t\t\tthis.year = year\r\n\t\t\tthis.month = month\r\n\t\t\tthis.render(year, month)\r\n\t\t} else {\r\n\t\t\tuni.showToast({\r\n\t\t\t\ticon: 'error',\r\n\t\t\t\ttitle: '往后最多查看一个月'\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\tlast() {\r\n\t\tconst { year, month } = this.getOperateMonthDate(this.year, this.month, -1)\r\n\t\tthis.year = year\r\n\t\tthis.month = month\r\n\t\tthis.render(year, month)\r\n\t}\r\n\t/**\r\n\t* 前往某一天 \r\n\t* @param {string} date 格式 YYYY-MM-DD\r\n\t*/ \r\n\tgoToDate(date : string | null = null) {\r\n\t\tif (date == null) {\r\n\t\t\tthis.render(this.currentYear, this.currentMonth, this.today)\r\n\t\t} else {\r\n\t\t\ttry {\r\n\t\t\t\tconst [year, month, day] = date.split('-').map((item) : number => parseInt(item))\r\n\t\t\t\tthis.render(year, month, day)\r\n\t\t\t} catch (e) {\r\n\t\t\t\tthrow new Error('参数有误')\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tprivate drawIcon(ctx : CanvasRenderingContext2D, size : number, x : number, y : number, arrow : string, color : string) {\r\n\t\t// 设置绘图的填充颜色\r\n\t\tctx.strokeStyle = color;\r\n\t\tctx.beginPath();\r\n\t\tctx.lineJoin = 'round'\r\n\t\tctx.lineWidth = 2\r\n\t\t// 根据箭头类型绘制不同的形状\r\n\t\tif (arrow === 'left') {\r\n\t\t\tctx.moveTo(x + size * 0.6042, y + size * 0.25);\r\n\t\t\tctx.lineTo(x + size * 0.3542, y + size * 0.5);\r\n\t\t\tctx.lineTo(x + size * 0.6042, y + size * 0.75);\r\n\r\n\t\t} else if (arrow === 'right') {\r\n\t\t\tctx.moveTo(x + size * (1 - 0.6042), y + size * 0.25);\r\n\t\t\tctx.lineTo(x + size * (1 - 0.3542), y + size * 0.5);\r\n\t\t\tctx.lineTo(x + size * (1 - 0.6042), y + size * 0.75);\r\n\t\t}\r\n\r\n\t\tctx.stroke()\r\n\t}\r\n\tprivate drawHead(monthData : LMonthData) {\r\n\t\tconst width = this.containerWidth\r\n\t\tif (this.ctx == null) return\r\n\t\tconst ctx = this.ctx!\r\n\t\tconst height = this.opt.monthTitleHeight!\r\n\t\t// ctx.fillStyle = 'rgba(0,0,0,0.1)'\r\n\t\t// ctx.rect(0,0,width, this.opt.monthTitleHeight!)\r\n\t\t// ctx.fill()\r\n\t\tctx.textAlign = 'center'\r\n\t\tctx.fillStyle = this.opt.textColor!\r\n\t\tctx.font = ` ${this.opt.monthTitleFontSize!}px sans-serif`\r\n\t\tctx.textBaseline = 'middle'\r\n\t\tctx.fillText(`${monthData.year}年` + `${monthData.month}`.padStart(2, '0') + '月', width * 0.5, height * 0.55)\r\n\t\tif (this.arrowIcons.length == 0) {\r\n\t\t\tconst offsetTop = (height - 30) / 2\r\n\t\t\tthis.arrowIcons.push(new ArrowIcon(0, offsetTop, 30, 'left', `#A0A5AA`))\r\n\t\t\tthis.arrowIcons.push(new ArrowIcon(width - 30, offsetTop, 30, 'right', `#A0A5AA`))\r\n\t\t}\r\n\t\tthis.arrowIcons.forEach(icon => {\r\n\t\t\ticon.draw(ctx)\r\n\t\t})\r\n\t}\r\n\tprivate drawWeek() {\r\n\t\tif (this.ctx == null) return\r\n\t\tconst ctx = this.ctx!\r\n\t\tctx.textAlign = 'center'\r\n\t\tctx.font = `${this.opt.weekFontSize}px Arial`\r\n\t\tctx.textBaseline = 'middle'\r\n\t\tctx.fillStyle = this.opt.weekColor!\r\n\t\tthis.week.forEach((week, index) => {\r\n\t\t\tctx.fillText(`${week}`, this.containerWidth / 7 * (index + 0.5), this.opt.monthTitleHeight! + this.opt.weekHeight! * 0.5)\r\n\t\t})\r\n\t}\r\n\trender(year : number = this.year, month : number = this.month, day : number | null = null) {\r\n\t\tconst monthData = this.generateMonthDateCache(year, month);\r\n\t\tif (day != null) {\r\n\t\t\tthis.selectDate = monthData.days.find((item) : boolean => item.day == day)\r\n\t\t}\r\n\t\tif (this.el != null && this.ctx != null) {\r\n\t\t\tthis.ctx!.clearRect(0, 0, this.containerWidth, this.containerHeight)\r\n\t\t\tthis.drawHead(monthData)\r\n\t\t\tthis.drawWeek()\r\n\r\n\t\t\tmonthData.days.forEach(day => {\r\n\t\t\t\tday.draw(this.ctx!)\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\treturn\r\n\t}\r\n\ttouch(e : UniPointerEvent) {\r\n\t\tif (this.el == null) return\r\n\t\tconst rect = this.el!.getBoundingClientRect()\r\n\t\tconst x = e.clientX - rect.left\r\n\t\tconst y = e.clientY - rect.top\r\n\r\n\t\t// 判断 是点了左右\r\n\t\tconst icon = this.arrowIcons.find((icon) : boolean => icon.isCoordinateInside(x, y))\r\n\r\n\t\tif (icon != null) {\r\n\t\t\tif (icon.type == 'left') {\r\n\t\t\t\tthis.last()\r\n\t\t\t} else {\r\n\t\t\t\tthis.next()\r\n\t\t\t}\r\n\t\t\tthis.opt.panelChange?.({\r\n\t\t\t\tyear: this.year,\r\n\t\t\t\tmonth: this.month\r\n\t\t\t} as LYearMonth)\r\n\t\t\treturn\r\n\t\t}\r\n\t\t// 判断是点了日历\r\n\t\tconst month = this.monthDateCache.get(`${this.year}-${this.month}`)\r\n\t\tif (month == null) return\r\n\t\tconst day = month.days.find((day) : boolean => day.isCoordinateInside(x, y))\r\n\t\t// 只有点击当前月的\r\n\t\tif (day != null && day.type == 'current') {\r\n\t\t\t// if(this.selectDate != day) {\r\n\t\t\t\tthis.selectDate = day\r\n\t\t\t\tthis.render()\r\n\t\t\t// }\r\n\t\t\tthis.opt.select?.(day)\r\n\t\t}\r\n\t}\r\n}","// @ts-nocheck\nimport { isString } from '../isString';\nimport { isNumeric } from '../isNumeric';\n/**\n * 单位转换函数，将字符串数字或带有单位的字符串转换为数字\n * @param value 要转换的值，可以是字符串数字或带有单位的字符串\n * @returns 转换后的数字，如果无法转换则返回0\n */\nimport { isNumber } from '../isNumber';\nexport function unitConvert(value: any | null, base: number = 0): number {\n    if (isNumber(value)) {\n        return value as number;\n    }\n    // 如果是字符串数字\n    if (isNumeric(value)) {\n        return parseFloat(value as string);\n    }\n    // 如果有单位\n    if (isString(value)) {\n        const reg = /^-?([0-9]+)?([.]{1}[0-9]+){0,1}(em|rpx|px|%)$/g;\n        const results = reg.exec(value as string);\n        if (results == null) {\n            return 0;\n        }\n        const unit = results[3];\n        const _value = parseFloat(value);\n        if (unit == 'rpx') {\n            // const { windowWidth } = uni.getWindowInfo()\n            // return windowWidth / 750 * _value;\n            return uni.rpx2px(_value);\n        }\n        if (unit == 'px') {\n            return _value;\n        }\n        if (unit == '%') {\n            return _value / 100 * base;\n        }\n        // 如果是其他单位，可以继续添加对应的转换逻辑\n    }\n    return 0;\n}\n// 示例\n// __f__('log','at uni_modules/lime-shared/unitConvert/index.ts:77',unitConvert(\"123\")); // 输出: 123 (字符串数字转换为数字)\n// __f__('log','at uni_modules/lime-shared/unitConvert/index.ts:78',unitConvert(\"3.14em\")); // 输出: 0 (无法识别的单位)\n// __f__('log','at uni_modules/lime-shared/unitConvert/index.ts:79',unitConvert(\"20rpx\")); // 输出: 根据具体情况而定 (根据单位进行转换)\n// __f__('log','at uni_modules/lime-shared/unitConvert/index.ts:80',unitConvert(10)); // 输出: 10 (数字不需要转换)\n//# sourceMappingURL=index.uts.map","// @ts-nocheck\r\nimport { isString } from '../isString'\r\nimport { isNumeric } from '../isNumeric'\r\n\r\n/**\r\n * 单位转换函数，将字符串数字或带有单位的字符串转换为数字\r\n * @param value 要转换的值，可以是字符串数字或带有单位的字符串\r\n * @returns 转换后的数字，如果无法转换则返回0\r\n */\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nimport { isNumber } from '../isNumber'\r\nexport function unitConvert(value : any | null, base: number = 0) : number {\r\n\tif (isNumber(value)) {\r\n\t\treturn value as number\r\n\t}\r\n\t// 如果是字符串数字\r\n\tif (isNumeric(value)) {\r\n\t\treturn parseFloat(value as string);\r\n\t}\r\n\t// 如果有单位\r\n\tif (isString(value)) {\r\n\t\tconst reg = /^-?([0-9]+)?([.]{1}[0-9]+){0,1}(em|rpx|px|%)$/g;\r\n\t\tconst results = reg.exec(value as string);\r\n\t\tif (results == null) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\tconst unit = results[3];\r\n\t\tconst _value = parseFloat(value);\r\n\t\tif (unit == 'rpx') {\r\n\t\t\t// const { windowWidth } = uni.getWindowInfo()\r\n\t\t\t// return windowWidth / 750 * _value;\r\n\t\t\treturn uni.rpx2px(_value)\r\n\t\t}\r\n\t\tif (unit == 'px') {\r\n\t\t\treturn _value;\r\n\t\t}\r\n\t\tif(unit == '%') {\r\n\t\t\treturn _value / 100 * base\r\n\t\t}\r\n\t\t// 如果是其他单位，可以继续添加对应的转换逻辑\r\n\t}\r\n\treturn 0;\r\n}\r\n\r\n// 示例\r\n// __f__('log','at uni_modules/lime-shared/unitConvert/index.ts:77',unitConvert(\"123\")); // 输出: 123 (字符串数字转换为数字)\r\n// __f__('log','at uni_modules/lime-shared/unitConvert/index.ts:78',unitConvert(\"3.14em\")); // 输出: 0 (无法识别的单位)\r\n// __f__('log','at uni_modules/lime-shared/unitConvert/index.ts:79',unitConvert(\"20rpx\")); // 输出: 根据具体情况而定 (根据单位进行转换)\r\n// __f__('log','at uni_modules/lime-shared/unitConvert/index.ts:80',unitConvert(10)); // 输出: 10 (数字不需要转换)","import { initRuntimeSocket } from './socket'\n\nexport function initRuntimeSocketService(): Promise<boolean> {\n  const hosts: string = process.env.UNI_SOCKET_HOSTS\n  const port: string = process.env.UNI_SOCKET_PORT\n  const id: string = process.env.UNI_SOCKET_ID\n  if (hosts == '' || port == '' || id == '') return Promise.resolve(false)\n  let socketTask: SocketTask | null = null\n  __registerWebViewUniConsole(\n    (): string => {\n      return process.env.UNI_CONSOLE_WEBVIEW_EVAL_JS_CODE\n    },\n    (data: string) => {\n      socketTask?.send({\n        data,\n      } as SendSocketMessageOptions)\n    }\n  )\n  return Promise.resolve()\n    .then((): Promise<boolean> => {\n      return initRuntimeSocket(hosts, port, id).then((socket): boolean => {\n        if (socket == null) {\n          return false\n        }\n        socketTask = socket\n        return true\n      })\n    })\n    .catch((): boolean => {\n      return false\n    })\n}\n\ninitRuntimeSocketService()\n","import '/Applications/HBuilderX.app/Contents/HBuilderX/plugins/uniapp-cli-vite/node_modules/@dcloudio/uni-console/src/runtime/app/index.ts';import App from './App.uvue'\r\nimport { createSSRApp } from 'vue'\r\nexport function createApp() {\r\n\tconst app = createSSRApp(App)\r\n\treturn {\r\n\t\tapp\r\n\t}\r\n}\nexport function main(app: IApp) {\n    definePageRoutes();\n    defineAppConfig();\n    (createApp()['app'] as VueApp).mount(app, GenUniApp());\n}\n\nexport class UniAppConfig extends io.dcloud.uniapp.appframe.AppConfig {\n    override name: string = \"veepai\"\n    override appid: string = \"__UNI__1F0985E\"\n    override versionName: string = \"1.0.0\"\n    override versionCode: string = \"100\"\n    override uniCompilerVersion: string = \"4.66\"\n    \n    constructor() { super() }\n}\n\nimport GenPagesIndexIndexClass from './pages/index/index.uvue?type=page'\nimport GenPagesMessageMessageClass from './pages/message/message.uvue?type=page'\nimport GenPagesMineMineClass from './pages/mine/mine.uvue?type=page'\nfunction definePageRoutes() {\n__uniRoutes.push({ path: \"pages/index/index\", component: GenPagesIndexIndexClass, meta: { isQuit: true } as UniPageMeta, style: utsMapOf() } as UniPageRoute)\n__uniRoutes.push({ path: \"pages/message/message\", component: GenPagesMessageMessageClass, meta: { isQuit: false } as UniPageMeta, style: utsMapOf() } as UniPageRoute)\n__uniRoutes.push({ path: \"pages/mine/mine\", component: GenPagesMineMineClass, meta: { isQuit: false } as UniPageMeta, style: utsMapOf() } as UniPageRoute)\n}\nconst __uniTabBar: Map<string, any | null> | null = utsMapOf([[\"list\",[utsMapOf([[\"pagePath\",\"pages/index/index\"],[\"iconPath\",\"./static/tabbar/home.png\"],[\"selectedIconPath\",\"./static/tabbar/home1.png\"],[\"text\",\"首页\"]]),utsMapOf([[\"pagePath\",\"pages/message/message\"],[\"iconPath\",\"./static/tabbar/message.png\"],[\"selectedIconPath\",\"./static/tabbar/message1.png\"],[\"text\",\"消息\"]]),utsMapOf([[\"pagePath\",\"pages/mine/mine\"],[\"iconPath\",\"./static/tabbar/userCenter.png\"],[\"selectedIconPath\",\"./static/tabbar/userCenter1.png\"],[\"text\",\"我的\"]])]]])\nconst __uniLaunchPage: Map<string, any | null> = utsMapOf([[\"url\",\"pages/index/index\"],[\"style\",utsMapOf<string, any | null>()]])\nfunction defineAppConfig(){\n  __uniConfig.entryPagePath = '/pages/index/index'\n  __uniConfig.globalStyle = utsMapOf([[\"navigationBarTextStyle\",\"black\"],[\"navigationBarTitleText\",\"uniappX\"],[\"navigationBarBackgroundColor\",\"#F8F8F8\"],[\"backgroundColor\",\"#F8F8F8\"]])\n  __uniConfig.getTabBarConfig = ():Map<string, any> | null =>  utsMapOf([[\"list\",[utsMapOf([[\"pagePath\",\"pages/index/index\"],[\"iconPath\",\"./static/tabbar/home.png\"],[\"selectedIconPath\",\"./static/tabbar/home1.png\"],[\"text\",\"首页\"]]),utsMapOf([[\"pagePath\",\"pages/message/message\"],[\"iconPath\",\"./static/tabbar/message.png\"],[\"selectedIconPath\",\"./static/tabbar/message1.png\"],[\"text\",\"消息\"]]),utsMapOf([[\"pagePath\",\"pages/mine/mine\"],[\"iconPath\",\"./static/tabbar/userCenter.png\"],[\"selectedIconPath\",\"./static/tabbar/userCenter1.png\"],[\"text\",\"我的\"]])]]])\n  __uniConfig.tabBar = __uniConfig.getTabBarConfig()\n  __uniConfig.conditionUrl = ''\n  __uniConfig.uniIdRouter = utsMapOf()\n  \n  __uniConfig.ready = true\n}\n","export interface LDay {\n    day: number;\n    month: number;\n    year: number;\n    fullDate: string;\n    isBeforeToday: boolean;\n    isToday: boolean;\n    isCurrentMonth: boolean;\n    width: number;\n    height: number;\n    originalMonth: number;\n    type: string;\n    fontSize: number;\n    timestamp: number;\n    // formatDay(day: number): string;\n    // formatMonth(month: number): string;\n    isCoordinateInside(x: number, y: number): boolean;\n    setPosition(x: number, y: number): void;\n    setDimensions(width: number, height: number): void;\n    selectDate: LDay | null;\n    canSupplement: boolean;\n    isCheckedIn: boolean;\n    draw(ctx: CanvasRenderingContext2D): void;\n}\nexport type LYearMonth = {\n    year: number;\n    month: number;\n};\nexport type LGridSize = {\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n};\nexport type LMonthData = {\n    year: number;\n    month: number;\n    days: LDay[];\n};\nexport type LOptions = {\n    canSupplement?: boolean;\n    isFullCalendar?: boolean;\n    yearMonth?: string;\n    signedDates?: string[];\n    week?: string[];\n    dayHeight?: number;\n    weekStartsOn?: number;\n    weekColor?: string;\n    weekFontSize?: number;\n    weekHeight?: number;\n    selectedDayBgColor?: string;\n    dayFontSize?: number;\n    textColor?: string;\n    disabledColor?: string;\n    monthTitleHeight?: number;\n    monthTitleFontSize?: number;\n    color?: string;\n    unsignedColor?: string;\n    select?: (day: LDay) => void;\n    panelChange?: (res: LYearMonth) => void;\n};\n//# sourceMappingURL=index.uts.map","export interface LDay {\n  day: number;\n  month: number;\n  year: number;\n  fullDate: string;\n  isBeforeToday: boolean;\n  isToday: boolean;\n  isCurrentMonth: boolean;\n  width: number;\n  height: number;\n  originalMonth: number;\n  type: string;\n  fontSize: number;\n  timestamp: number;\n\n  // formatDay(day: number): string;\n  // formatMonth(month: number): string;\n  isCoordinateInside(x: number, y: number): boolean;\n  setPosition(x: number, y: number): void;\n  setDimensions(width: number, height: number): void;\n  selectDate: LDay | null;\n  canSupplement: boolean;\n  isCheckedIn: boolean;\n  draw(ctx: CanvasRenderingContext2D): void;\n}\r\n\r\n\r\nexport type LYearMonth = {\r\n\tyear : number,\r\n\tmonth : number\r\n}\r\n\r\nexport type LGridSize = {\r\n\tx : number,\r\n\ty : number,\r\n\twidth : number,\r\n\theight : number\r\n}\r\n\r\nexport type LMonthData = {\r\n\tyear : number\r\n\tmonth : number\r\n\tdays : LDay[]\r\n}\r\n\r\n\r\nexport type LOptions = {\r\n\tcanSupplement ?: boolean\r\n\tisFullCalendar ?: boolean\r\n\tyearMonth ?: string,\r\n\tsignedDates ?: string[],\r\n\tweek ?: string[],\r\n\tdayHeight ?: number,\r\n\tweekStartsOn ?: number,\r\n\tweekColor?: string,\r\n\tweekFontSize?: number,\r\n\tweekHeight?: number,\r\n\tselectedDayBgColor?: string,\r\n\tdayFontSize?: number,\r\n\ttextColor?: string,\r\n\tdisabledColor?: string,\r\n\tmonthTitleHeight?: number,\r\n\tmonthTitleFontSize?: number,\r\n\tcolor?: string,\r\n\tunsignedColor?: string,\r\n\tselect ?: (day : LDay) => void,\r\n\tpanelChange ?: (res : LYearMonth) => void\r\n\t// weekStartsOn : string\r\n}","// @ts-nocheck\n/**\n * 检查一个值是否为字符串类型\n * @param str 要检查的值\n * @returns 如果值的类型是字符串类型，则返回 true；否则返回 false\n */\nexport function isString(str: any | null): boolean {\n    return typeof str == 'string';\n}\n//# sourceMappingURL=index.uts.map","// @ts-nocheck\r\n/**\r\n * 检查一个值是否为字符串类型\r\n * @param str 要检查的值\r\n * @returns 如果值的类型是字符串类型，则返回 true；否则返回 false\r\n */\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport function isString (str: any|null): boolean {\r\n\treturn typeof str == 'string'\r\n}\r\n\r\n","// @ts-nocheck\n/**\n * 检查一个值是否为数字类型\n * @param value 要检查的值，可以是 number 类型或 string 类型的数字\n * @returns 如果值是数字类型且不是 NaN，则返回 true；否则返回 false\n */\nexport function isNumber(value: any | null): boolean {\n    return ['Byte', 'UByte', 'Short', 'UShort', 'Int', 'UInt', 'Long', 'ULong', 'Float', 'Double', 'number'].includes(typeof value);\n}\n//# sourceMappingURL=index.uts.map","// @ts-nocheck\r\n/**\r\n * 检查一个值是否为数字类型\r\n * @param value 要检查的值，可以是 number 类型或 string 类型的数字\r\n * @returns 如果值是数字类型且不是 NaN，则返回 true；否则返回 false\r\n */\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport function isNumber(value: any|null): boolean {\r\n\r\n\treturn ['Byte', 'UByte','Short','UShort','Int','UInt','Long','ULong','Float','Double','number'].includes(typeof value)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n}\r\n","// @ts-nocheck\n/**\n * 检查一个值是否为数字类型或表示数字的字符串\n * @param value 要检查的值，可以是 string 类型或 number 类型\n * @returns 如果值是数字类型或表示数字的字符串，则返回 true；否则返回 false\n */\nimport { isNumber } from '../isNumber';\nimport { isString } from '../isString';\nexport function isNumeric(value: any | null): boolean {\n    if (value == null) {\n        return false;\n    }\n    if (isNumber(value)) {\n        return true;\n    }\n    else if (isString(value)) {\n        // const regex = \"-?\\\\d+(\\\\.\\\\d+)?\".toRegex()\n        const regex = new RegExp(\"^(-)?\\\\d+(\\\\.\\\\d+)?$\");\n        return regex.test(value as string); //regex.matches(value as string) \n    }\n    return false;\n    // return /^(-)?\\d+(\\.\\d+)?$/.test(value);\n}\n//# sourceMappingURL=index.uts.map","// @ts-nocheck\r\n\r\n/**\r\n * 检查一个值是否为数字类型或表示数字的字符串\r\n * @param value 要检查的值，可以是 string 类型或 number 类型\r\n * @returns 如果值是数字类型或表示数字的字符串，则返回 true；否则返回 false\r\n */\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nimport {isNumber} from '../isNumber';\r\nimport {isString} from '../isString';\r\nexport function isNumeric(value : any|null) : boolean {\r\n\tif(value == null) {\r\n\t\treturn false\r\n\t}\r\n\tif(isNumber(value)) {\r\n\t\treturn true\r\n\t} else if(isString(value)) {\r\n\t\t// const regex = \"-?\\\\d+(\\\\.\\\\d+)?\".toRegex()\r\n\t\tconst regex = new RegExp(\"^(-)?\\\\d+(\\\\.\\\\d+)?$\")\r\n\t\treturn  regex.test(value as string) //regex.matches(value as string) \r\n\t}\r\n\treturn false\r\n\t// return /^(-)?\\d+(\\.\\d+)?$/.test(value);\r\n}\r\n\r\n","// @ts-nocheck\nexport const SECONDS_A_MINUTE = 60;\nexport const SECONDS_A_HOUR = SECONDS_A_MINUTE * 60;\nexport const SECONDS_A_DAY = SECONDS_A_HOUR * 24;\nexport const SECONDS_A_WEEK = SECONDS_A_DAY * 7;\nexport const MILLISECONDS_A_SECOND = 1e3;\nexport const MILLISECONDS_A_MINUTE = SECONDS_A_MINUTE * MILLISECONDS_A_SECOND;\nexport const MILLISECONDS_A_HOUR = SECONDS_A_HOUR * MILLISECONDS_A_SECOND;\nexport const MILLISECONDS_A_DAY = SECONDS_A_DAY * MILLISECONDS_A_SECOND;\nexport const MILLISECONDS_A_WEEK = SECONDS_A_WEEK * MILLISECONDS_A_SECOND;\n// English locales\nexport const MS = 'millisecond';\nexport const S = 'second';\nexport const MIN = 'minute';\nexport const H = 'hour';\nexport const D = 'day';\nexport const W = 'week';\nexport const M = 'month';\nexport const Q = 'quarter';\nexport const Y = 'year';\nexport const DATE = 'date';\nexport const FORMAT_DEFAULT = 'YYYY-MM-DDTHH:mm:ssZ';\nexport const INVALID_DATE_STRING = 'Invalid Date';\n// regex\nexport const REGEX_PARSE = /^(\\d{4})[-/]?(\\d{1,2})?[-/]?(\\d{0,2})[Tt\\s]*(\\d{1,2})?:?(\\d{1,2})?:?(\\d{1,2})?[.:]?(\\d+)?$/;\nexport const REGEX_FORMAT = /\\[([^\\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g;\n// export const REGEX_FORMAT = /(?:[^\\]]+)|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g;\n//# sourceMappingURL=constant.uts.map","// @ts-nocheck\r\nexport const SECONDS_A_MINUTE = 60\nexport const SECONDS_A_HOUR = SECONDS_A_MINUTE * 60\nexport const SECONDS_A_DAY = SECONDS_A_HOUR * 24\nexport const SECONDS_A_WEEK = SECONDS_A_DAY * 7\n\nexport const MILLISECONDS_A_SECOND = 1e3\nexport const MILLISECONDS_A_MINUTE = SECONDS_A_MINUTE * MILLISECONDS_A_SECOND\nexport const MILLISECONDS_A_HOUR = SECONDS_A_HOUR * MILLISECONDS_A_SECOND\nexport const MILLISECONDS_A_DAY = SECONDS_A_DAY * MILLISECONDS_A_SECOND\nexport const MILLISECONDS_A_WEEK = SECONDS_A_WEEK * MILLISECONDS_A_SECOND\n\n// English locales\nexport const MS = 'millisecond'\nexport const S = 'second'\nexport const MIN = 'minute'\nexport const H = 'hour'\nexport const D = 'day'\nexport const W = 'week'\nexport const M = 'month'\nexport const Q = 'quarter'\nexport const Y = 'year'\nexport const DATE = 'date'\n\nexport const FORMAT_DEFAULT = 'YYYY-MM-DDTHH:mm:ssZ'\n\nexport const INVALID_DATE_STRING = 'Invalid Date'\n\n// regex\nexport const REGEX_PARSE = /^(\\d{4})[-/]?(\\d{1,2})?[-/]?(\\d{0,2})[Tt\\s]*(\\d{1,2})?:?(\\d{1,2})?:?(\\d{1,2})?[.:]?(\\d+)?$/\nexport const REGEX_FORMAT = /\\[([^\\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g\r\n// export const REGEX_FORMAT = /(?:[^\\]]+)|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g;\n","// @ts-nocheck\r\nexport type DayutsConfig = {\r\n\tdate: any|null\r\n\tformat : string|null\r\n\tlocale : string|null\r\n}\r\n\r\nexport type DayutsUnit = 'year' | 'month' | 'day' | 'week' | 'date' | 'hour' | 'minute' | 'second' | 'millisecond' | 'quarter'\r\n\r\nexport type DayutsFormats = {\r\n\t/**\r\n\t * 小时和分钟的格式化字符串。\r\n\t */\r\n\tLT : string;\r\n\r\n\t/**\r\n\t * 小时、分钟和秒的格式化字符串。\r\n\t */\r\n\tLTS : string;\r\n\r\n\t/**\r\n\t * 年份、月份和日期的格式化字符串。\r\n\t */\r\n\tL : string;\r\n\r\n\t/**\r\n\t * 年份、月份、日期和星期的格式化字符串。\r\n\t */\r\n\tLL : string;\r\n\r\n\t/**\r\n\t * 年份、月份、日期、星期和小时的格式化字符串。\r\n\t */\r\n\tLLL : string;\r\n\r\n\t/**\r\n\t * 年份、月份、日期、星期、小时和分钟的格式化字符串。\r\n\t */\r\n\tLLLL : string;\r\n\r\n\t/**\r\n\t * 缩小的年份、月份和日期的格式化字符串。\r\n\t */\r\n\tl : string;\r\n\r\n\t/**\r\n\t * 缩小的年份、月份、日期和星期的格式化字符串。\r\n\t */\r\n\tll : string;\r\n\r\n\t/**\r\n\t * 缩小的年份、月份、日期、星期和小时的格式化字符串。\r\n\t */\r\n\tlll : string;\r\n\r\n\t/**\r\n\t * 缩小的年份、月份、日期、星期、小时和分钟的格式化字符串。\r\n\t */\r\n\tllll : string;\r\n}\r\nexport type DayutsRelativeTime = {\r\n\t/**\r\n\t * 时间单位之后的格式化字符串。\r\n\t */\r\n\tfuture : string;\r\n\r\n\t/**\r\n\t * 时间单位之前的格式化字符串。\r\n\t */\r\n\tpast : string;\r\n\r\n\t/**\r\n\t * 秒的格式化字符串。\r\n\t */\r\n\ts : string;\r\n\r\n\t/**\r\n\t * 分钟的格式化字符串。\r\n\t */\r\n\tm : string;\r\n\r\n\t/**\r\n\t * 分钟（带前缀）的格式化字符串。\r\n\t */\r\n\tmm : string;\r\n\r\n\t/**\r\n\t * 小时的格式化字符串。\r\n\t */\r\n\th : string;\r\n\r\n\t/**\r\n\t * 小时（带前缀）的格式化字符串。\r\n\t */\r\n\thh : string;\r\n\r\n\t/**\r\n\t * 天的格式化字符串。\r\n\t */\r\n\td : string;\r\n\r\n\t/**\r\n\t * 天（带前缀）的格式化字符串。\r\n\t */\r\n\tdd : string;\r\n\r\n\t/**\r\n\t * 月的格式化字符串。\r\n\t */\r\n\tM : string;\r\n\r\n\t/**\r\n\t * 月（带前缀）的格式化字符串。\r\n\t */\r\n\tMM : string;\r\n\r\n\t/**\r\n\t * 年的格式化字符串。\r\n\t */\r\n\ty : string;\r\n\r\n\t/**\r\n\t * 年（带前缀）的格式化字符串。\r\n\t */\r\n\tyy : string;\r\n}\r\n\r\n/**\r\n * 本地化对象接口。\r\n */\r\nexport type DayutsLocale = {\r\n\t/**\r\n\t * 区域设置名称。\r\n\t */\r\n\tname : string;\r\n\r\n\t/**\r\n\t * 一周中每天的完整名称。\r\n\t */\r\n\tweekdays : string[];\r\n\r\n\t/**\r\n\t * 一周中每天的缩写名称。\r\n\t */\r\n\tweekdaysShort ?: string[];\r\n\r\n\t/**\r\n\t * 一周中每天的最小缩写名称。\r\n\t */\r\n\tweekdaysMin ?: string[];\r\n\r\n\t/**\r\n\t * 一年中的每个月份的名称。\r\n\t */\r\n\tmonths : string[];\r\n\r\n\t/**\r\n\t * 一年中的每个月份的缩写名称。\r\n\t */\r\n\tmonthsShort ?: string[];\r\n\r\n\t/**\r\n\t * 返回序数词的函数。\r\n\t *\r\n\t * @param number - 要格式化的数字。\r\n\t * @param period - 周期类型（如 \"W\" 表示周）。\r\n\t * @returns 返回格式化后的序数词字符串。\r\n\t */\r\n\t// ordinal : (number : number) => string;\r\n\tordinal : (number : number, period : string) => string;\r\n\r\n\t/**\r\n\t * 一周的开始日期（星期几）。\r\n\t */\r\n\tweekStart ?: number;\r\n\r\n\t/**\r\n\t * 年的开始月份。\r\n\t */\r\n\tyearStart ?: number;\r\n\r\n\t/**\r\n\t * 日期和时间格式化选项。\r\n\t */\r\n\tformats ?: DayutsFormats;\r\n\r\n\t/**\r\n\t * 相对时间格式化选项。\r\n\t */\r\n\trelativeTime ?: DayutsRelativeTime;\r\n\r\n\t/**\r\n\t * 根据小时和分钟返回上午或下午的函数。\r\n\t *\r\n\t * @param hour - 小时数（0-23）。\r\n\t * @param minute - 分钟数（0-59）。\r\n\t * @returns 返回上午或下午的字符串。\r\n\t */\r\n\tmeridiem ?: (hour : number, minute : number, isLowercase : boolean) => string;\r\n}\r\n\r\n\r\nexport type DayutsObject = {\r\n\tyears : number;\r\n\tmonths : number;\r\n\tdate : number;\r\n\thours : number;\r\n\tminutes : number;\r\n\tseconds : number;\r\n\tmilliseconds : number;\r\n}\r\n\r\n\r\n// 主 Dayuts 类类型定义\n// export interface Dayuts {\n//     // 公共属性\n//     $L: string;\n\n//     // 私有属性\n//     $d: Date;\n//     $y: number;\n//     $M: number;\n//     $D: number;\n//     $W: number;\n//     $H: number;\n//     $m: number;\n//     $s: number;\n//     $ms: number;\n//     $u: boolean;\n\n//     // 构造函数\n//     // constructor(cfg: DayutsConfig);\n\n//     // 解析配置并初始化日期\n//     // private parse(cfg: DayutsConfig): void;\n\n//     // 初始化日期的各个部分\n//     // private init(): void;\n\n//     // 检查日期是否有效\n//     isValid(): boolean;\n\n//     // 判断当前日期是否与给定日期在指定时间单位内相同\n//     // isSame(input: string, units?: DayutsUnit): boolean;\n//     // isSame(input: number, units?: DayutsUnit): boolean;\n//     // isSame(input: Date, units?: DayutsUnit): boolean;\n//     // isSame(input: Dayuts, units?: DayutsUnit): boolean;\n//     // isSame(input: UTSJSONObject, units?: DayutsUnit): boolean;\n// \t// isSame(input : string) : boolean\r\n// \t// isSame(input : number) : boolean\r\n// \t// isSame(input : Date) : boolean\r\n// \t// isSame(input : Dayuts) : boolean\r\n// \t// isSame(input : UTSJSONObject) : boolean\r\n\t\r\n// \t// isSame(input : string, units : DayutsUnit) : boolean\r\n// \t// isSame(input : number, units : DayutsUnit) : boolean\r\n// \t// isSame(input : Date, units : DayutsUnit) : boolean\r\n// \t// isSame(input : Dayuts, units : DayutsUnit) : boolean\r\n// \t// isSame(input : UTSJSONObject, units : DayutsUnit) : boolean\r\n// \t// isSame(input : any, units : DayutsUnit) : boolean\r\n\t\n//     // 判断给定日期是否在当前日期指定时间单位之后\n//     // isAfter(input: string, units?: DayutsUnit): boolean;\n//     // isAfter(input: number, units?: DayutsUnit): boolean;\n//     // isAfter(input: Date, units?: DayutsUnit): boolean;\n//     // isAfter(input: Dayuts, units?: DayutsUnit): boolean;\n//     // isAfter(input: UTSJSONObject, units?: DayutsUnit): boolean;\r\n// \t// isAfter(input : string) : boolean\r\n// \t// isAfter(input : number) : boolean\r\n// \t// isAfter(input : Date) : boolean\r\n// \t// isAfter(input : Dayuts) : boolean\r\n// \t// isAfter(input : UTSJSONObject) : boolean\r\n\t\r\n// \t// isAfter(input : string, units : DayutsUnit) : boolean\r\n// \t// isAfter(input : number, units : DayutsUnit) : boolean\r\n// \t// isAfter(input : Date, units : DayutsUnit) : boolean\r\n// \t// isAfter(input : Dayuts, units : DayutsUnit) : boolean\r\n// \t// isAfter(input : UTSJSONObject, units : DayutsUnit) : boolean\r\n// \t// isAfter(input : any, units : DayutsUnit) : boolean\n\n//     // 判断给定日期是否在当前日期指定时间单位之前\n//     // isBefore(input: string, units?: DayutsUnit): boolean;\n//     // isBefore(input: number, units?: DayutsUnit): boolean;\n//     // isBefore(input: Date, units?: DayutsUnit): boolean;\n//     // isBefore(input: Dayuts, units?: DayutsUnit): boolean;\n//     // isBefore(input: UTSJSONObject, units?: DayutsUnit): boolean;\n\n//     // 判断当前日期是否与给定日期在指定时间单位内相同或之前\n//     // isSameOrBefore(input: string, units?: DayutsUnit): boolean;\n//     // isSameOrBefore(input: number, units?: DayutsUnit): boolean;\n//     // isSameOrBefore(input: Date, units?: DayutsUnit): boolean;\n//     // isSameOrBefore(input: Dayuts, units?: DayutsUnit): boolean;\n//     // isSameOrBefore(input: UTSJSONObject, units?: DayutsUnit): boolean;\n\n//     // 判断当前日期是否与给定日期在指定时间单位内相同或之后\n//     // isSameOrAfter(input: string, units?: DayutsUnit): boolean;\n//     // isSameOrAfter(input: number, units?: DayutsUnit): boolean;\n//     // isSameOrAfter(input: Date, units?: DayutsUnit): boolean;\n//     // isSameOrAfter(input: Dayuts, units?: DayutsUnit): boolean;\n//     // isSameOrAfter(input: UTSJSONObject, units?: DayutsUnit): boolean;\n\n//     // 判断当前日期是否在两个给定日期之间\n//     // isBetween(input: any, input2: any): boolean;\r\n//     // isBetween(input: any, input2: any, units?: DayutsUnit, interval?: string): boolean;\n\n//     // 判断当前年份是否为闰年\n//     isLeapYear(): boolean;\n\n//     // 判断当前日期是否为今天\n//     isToday(): boolean;\n\n//     // 获取 Unix 时间戳（秒）\n//     unix(): number;\n\n//     // 设置为指定时间单位的开始或结束\n//     // startOf(units: DayutsUnit): Dayuts;\r\n//     // startOf(units: DayutsUnit, startOf?: boolean): Dayuts;\n//     endOf(units: DayutsUnit): Dayuts;\n\n//     // 设置指定时间单位的值\n//     set(units: DayutsUnit, int: number): Dayuts;\n\n//     // 获取指定时间单位的值\n//     get(units: DayutsUnit): number;\n\n//     // 年、月、日、时、分、秒、毫秒的 getter 和 setter 方法\n//     year(): number;\r\n//     year(input?: number): Dayuts;\n//     month(): number\r\n//     month(input?: number): Dayuts;\n//     // day(): number;\r\n//     day(input?: number): Dayuts;\n//     date(): number;\r\n//     date(input?: number): Dayuts;\n//     // hour(): number;\r\n//     hour(input?: number): Dayuts;\n//     // minute(): number;\r\n//     minute(input?: number): Dayuts;\n//     // second(): number;\r\n//     second(input?: number): Dayuts;\n//     // millisecond(): number;\r\n//     millisecond(input?: number): Dayuts;\n\n//     // 添加时间\n//     add(number: number, units: DayutsUnit): Dayuts;\n\n//     // 减去时间\n//     subtract(number: number, units: DayutsUnit): Dayuts;\n\n//     // 格式化日期\n//     format(formatStr?: string): string;\n\n//     // 获取 UTC 偏移量（分钟）\n//     utcOffset(): number;\n\n//     // 计算两个日期之间的差值\n//     diff(input: string, units?: DayutsUnit, float?: boolean): number;\n//     diff(input: number, units?: DayutsUnit, float?: boolean): number;\n//     diff(input: Date, units?: DayutsUnit, float?: boolean): number;\n//     diff(input: Dayuts, units?: DayutsUnit, float?: boolean): number;\n//     diff(input: UTSJSONObject, units?: DayutsUnit, float?: boolean): number;\n\n//     // 转换为原生 Date 对象\n//     toDate(): Date;\n\n//     // 转换为 ISO 8601 字符串\n//     toJSON(): string | null;\n//     toISOString(): string;\n\n//     // 转换为对象\n//     toObject(): DayutsObject;\n\n//     // 转换为数组\n//     toArray(): number[];\n\n//     // 获取时间戳（毫秒）\n//     valueOf(): number;\n\n//     // 获取月份的天数\n//     daysInMonth(): number;\n\n//     // 获取本地化对象\n//     // private $locale(): DayutsLocale;\n\n//     // 设置或获取本地化配置\n//     locale(preset: string, object?: DayutsLocale): Dayuts;\n//     locale(preset: DayutsLocale, object?: DayutsLocale): Dayuts;\n\n//     // 克隆当前实例\n//     clone(): Dayuts;\n\n//     // 转换为字符串\n//     // toString(): string;\n\n//     // 获取或设置一年中的第几天\n//     dayOfYear(): number;\r\n//     dayOfYear(input?: number): Dayuts;\n\n//     // 相对时间方法\n//     fromToBase(input: any, withoutSuffix: boolean, instance: Dayuts, isFrom: boolean): string;\n//     to(input: any, withoutSuffix?: boolean): string;\n//     from(input: any, withoutSuffix?: boolean): string;\n//     toNow(withoutSuffix?: boolean): string;\n//     fromNow(withoutSuffix?: boolean): string;\n// }","// @ts-nocheck\nimport type { DayutsLocale, DayutsRelativeTime } from '../../../utssdk/interface';\n/**\n * 英语本地化对象。\n */\nexport default {\n    name: 'en',\n    /**\n     * 星期名称数组。\n     */\n    weekdays: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n    /**\n     * 月份名称数组。\n     */\n    months: [\n        'January',\n        'February',\n        'March',\n        'April',\n        'May',\n        'June',\n        'July',\n        'August',\n        'September',\n        'October',\n        'November',\n        'December',\n    ],\n    relativeTime: {\n        future: 'in %s',\n        past: '%s ago',\n        s: 'a few seconds',\n        m: 'a minute',\n        mm: '%d minutes',\n        h: 'an hour',\n        hh: '%d hours',\n        d: 'a day',\n        dd: '%d days',\n        M: 'a month',\n        MM: '%d months',\n        y: 'a year',\n        yy: '%d years'\n    } as DayutsRelativeTime,\n    /**\n     * 序数函数，用于将数字转换为带有序数后缀的字符串。\n     *\n     * @param {number} n - 要转换的数字。\n     * @returns {string} 带有序数后缀的字符串。\n     */\n    ordinal: (n: number, _: string): string => {\n        const s = ['th', 'st', 'nd', 'rd'];\n        const v = n % 100;\n        const i = (v - 20) % 10;\n        const k = i < s.length ? i : v < s.length ? v : 0;\n        return `[${n}${(s[k])}]`;\n    },\n} as DayutsLocale;\n//# sourceMappingURL=index.uts.map","// @ts-nocheck\r\nimport type { DayutsLocale, DayutsRelativeTime} from '../../../utssdk/interface'\r\n/**\r\n * 英语本地化对象。\r\n */\r\nexport default {\r\n\tname: 'en',\r\n\t/**\r\n\t * 星期名称数组。\r\n\t */\r\n\tweekdays: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\r\n\t/**\r\n\t * 月份名称数组。\r\n\t */\r\n\tmonths: [\r\n\t\t'January',\r\n\t\t'February',\r\n\t\t'March',\r\n\t\t'April',\r\n\t\t'May',\r\n\t\t'June',\r\n\t\t'July',\r\n\t\t'August',\r\n\t\t'September',\r\n\t\t'October',\r\n\t\t'November',\r\n\t\t'December',\r\n\t],\r\n\trelativeTime: {\r\n\t\tfuture: 'in %s',\r\n\t\tpast: '%s ago',\r\n\t\ts: 'a few seconds',\r\n\t\tm: 'a minute',\r\n\t\tmm: '%d minutes',\r\n\t\th: 'an hour',\r\n\t\thh: '%d hours',\r\n\t\td: 'a day',\r\n\t\tdd: '%d days',\r\n\t\tM: 'a month',\r\n\t\tMM: '%d months',\r\n\t\ty: 'a year',\r\n\t\tyy: '%d years'\r\n\t} as DayutsRelativeTime,\r\n\t/**\r\n\t * 序数函数，用于将数字转换为带有序数后缀的字符串。\r\n\t *\r\n\t * @param {number} n - 要转换的数字。\r\n\t * @returns {string} 带有序数后缀的字符串。\r\n\t */\r\n\tordinal: (n : number, _ : string) : string => {\r\n\t\tconst s = ['th', 'st', 'nd', 'rd']\r\n\t\tconst v = n % 100\r\n\t\tconst i = (v - 20) % 10\r\n\t\tconst k = i < s.length ? i : v < s.length ? v : 0\r\n\t\treturn `[${n}${(s[k])}]`\r\n\t},\r\n} as DayutsLocale","// @ts-nocheck\nimport type { DayutsLocale, DayutsRelativeTime, DayutsFormats } from '../../../utssdk/interface';\nconst locale: DayutsLocale = {\n    name: 'zh-cn',\n    weekdays: ['星期日', '星期一', '星期二', '星期三', '星期四', '星期五', '星期六'],\n    weekdaysShort: ['周日', '周一', '周二', '周三', '周四', '周五', '周六'],\n    weekdaysMin: ['日', '一', '二', '三', '四', '五', '六'],\n    months: [\n        '一月', '二月', '三月', '四月', '五月', '六月',\n        '七月', '八月', '九月', '十月', '十一月', '十二月'\n    ],\n    monthsShort: [\n        '1月', '2月', '3月', '4月', '5月', '6月',\n        '7月', '8月', '9月', '10月', '11月', '12月'\n    ],\n    ordinal: (number: number, period: string): string => {\n        // switch (period) {\n        // \tcase 'W':\n        // \t\treturn `${number}周`;\n        // \tdefault:\n        // \t\treturn `${number}日`;\n        // }\n        if (period == 'W') {\n            return `${number}周`;\n        }\n        return `${number}日`;\n    },\n    weekStart: 1,\n    yearStart: 4,\n    formats: {\n        LT: 'HH:mm',\n        LTS: 'HH:mm:ss',\n        L: 'YYYY/MM/DD',\n        LL: 'YYYY年M月D日',\n        LLL: 'YYYY年M月D日Ah点mm分',\n        LLLL: 'YYYY年M月D日ddddAh点mm分',\n        l: 'YYYY/M/D',\n        ll: 'YYYY年M月D日',\n        lll: 'YYYY年M月D日 HH:mm',\n        llll: 'YYYY年M月D日dddd HH:mm'\n    } as DayutsFormats,\n    relativeTime: {\n        future: '%s内',\n        past: '%s前',\n        s: '几秒',\n        m: '1 分钟',\n        mm: '%d 分钟',\n        h: '1 小时',\n        hh: '%d 小时',\n        d: '1 天',\n        dd: '%d 天',\n        M: '1 个月',\n        MM: '%d 个月',\n        y: '1 年',\n        yy: '%d 年'\n    } as DayutsRelativeTime,\n    meridiem: (hour: number, minute: number, _: boolean): string => {\n        const hm = (hour * 100) + minute;\n        if (hm < 600) {\n            return '凌晨';\n        }\n        else if (hm < 900) {\n            return '早上';\n        }\n        else if (hm < 1100) {\n            return '上午';\n        }\n        else if (hm < 1300) {\n            return '中午';\n        }\n        else if (hm < 1800) {\n            return '下午';\n        }\n        return '晚上';\n    }\n};\nexport default locale;\n//# sourceMappingURL=index.uts.map","// @ts-nocheck\r\nimport type { DayutsLocale, DayutsRelativeTime, DayutsFormats } from '../../../utssdk/interface'\r\n\r\nconst locale : DayutsLocale = {\r\n\tname: 'zh-cn',\r\n\tweekdays: ['星期日', '星期一', '星期二', '星期三', '星期四', '星期五', '星期六'],\r\n\tweekdaysShort: ['周日', '周一', '周二', '周三', '周四', '周五', '周六'],\r\n\tweekdaysMin: ['日', '一', '二', '三', '四', '五', '六'],\r\n\tmonths: [\r\n\t\t'一月', '二月', '三月', '四月', '五月', '六月',\r\n\t\t'七月', '八月', '九月', '十月', '十一月', '十二月'\r\n\t],\r\n\tmonthsShort: [\r\n\t\t'1月', '2月', '3月', '4月', '5月', '6月',\r\n\t\t'7月', '8月', '9月', '10月', '11月', '12月'\r\n\t],\r\n\tordinal: (number:number, period:string):string => {\r\n\t\t// switch (period) {\r\n\t\t// \tcase 'W':\r\n\t\t// \t\treturn `${number}周`;\r\n\t\t// \tdefault:\r\n\t\t// \t\treturn `${number}日`;\r\n\t\t// }\r\n\t\tif(period == 'W'){\r\n\t\t\treturn `${number}周`;\r\n\t\t}\r\n\t\treturn `${number}日`\r\n\t},\r\n\tweekStart: 1,\r\n\tyearStart: 4,\r\n\tformats: {\r\n\t\tLT: 'HH:mm',\r\n\t\tLTS: 'HH:mm:ss',\r\n\t\tL: 'YYYY/MM/DD',\r\n\t\tLL: 'YYYY年M月D日',\r\n\t\tLLL: 'YYYY年M月D日Ah点mm分',\r\n\t\tLLLL: 'YYYY年M月D日ddddAh点mm分',\r\n\t\tl: 'YYYY/M/D',\r\n\t\tll: 'YYYY年M月D日',\r\n\t\tlll: 'YYYY年M月D日 HH:mm',\r\n\t\tllll: 'YYYY年M月D日dddd HH:mm'\r\n\t} as DayutsFormats,\r\n\trelativeTime: {\r\n\t\tfuture: '%s内',\r\n\t\tpast: '%s前',\r\n\t\ts: '几秒',\r\n\t\tm: '1 分钟',\r\n\t\tmm: '%d 分钟',\r\n\t\th: '1 小时',\r\n\t\thh: '%d 小时',\r\n\t\td: '1 天',\r\n\t\tdd: '%d 天',\r\n\t\tM: '1 个月',\r\n\t\tMM: '%d 个月',\r\n\t\ty: '1 年',\r\n\t\tyy: '%d 年'\r\n\t} as DayutsRelativeTime,\r\n\tmeridiem: (hour:number, minute:number, _ : boolean):string => {\r\n\t\tconst hm = (hour * 100) + minute;\r\n\t\tif (hm < 600) {\r\n\t\t\treturn '凌晨';\r\n\t\t} else if (hm < 900) {\r\n\t\t\treturn '早上';\r\n\t\t} else if (hm < 1100) {\r\n\t\t\treturn '上午';\r\n\t\t} else if (hm < 1300) {\r\n\t\t\treturn '中午';\r\n\t\t} else if (hm < 1800) {\r\n\t\t\treturn '下午';\r\n\t\t}\r\n\t\treturn '晚上';\r\n\t}\r\n};\r\n\r\nexport default locale;","// @ts-nocheck\nimport { DayutsLocale } from '../utssdk/interface';\nimport en from './locale/en';\nimport zhCn from './locale/zh-cn';\nconst localesMap = new Map<string, DayutsLocale>();\n//定义一个大写的State类型\ntype LocaleState = {\n    lang: string;\n    locales: Map<string, DayutsLocale>;\n};\nexport let localeState = reactive({\n    lang: 'en',\n    locales: localesMap\n} as LocaleState);\nlocaleState.locales.set('en', en);\nlocaleState.locales.set('zh-cn', zhCn);\nclass DayutsIntl {\n    constructor() { }\n    use(locale: DayutsLocale): DayutsIntl {\n        localeState.locales.set(locale.name, locale);\n        return this;\n    }\n    set locale(locale: string) {\n        if (localeState.locales.has(locale)) {\n            localeState.lang = locale;\n        }\n        else {\n            let list: string[] = [];\n            localeState.locales.forEach(function (_: any, key: string) {\n                list.push(key);\n            });\n            __f__('warn', 'at uni_modules/lime-dayuts/common/use.ts:46', `未知语言: \"${locale}\". 请使用以下已知语言之一:${list.join(', ')}`);\n        }\n    }\n    get locale(): string {\n        return localeState.lang;\n    }\n    set(name: string, locale: DayutsLocale) {\n        localeState.locales.set(name, locale);\n    }\n    has(name: string): boolean {\n        return localeState.locales.has(name);\n    }\n}\nexport const dayutsIntl = new DayutsIntl();\n// const dyauts = use(xx).use(xx).use(xx).use(xx)\n// dyauts.locale ='zh'\n//# sourceMappingURL=use.uts.map","// @ts-nocheck\nimport {DayutsLocale} from '../utssdk/interface'\nimport en from './locale/en'\nimport zhCn from './locale/zh-cn'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst localesMap = new Map<string, DayutsLocale>()\n//定义一个大写的State类型\ntype LocaleState = {\n  lang: string;\n  locales: Map<string, DayutsLocale>\n}\nexport let localeState = reactive({\n  lang: 'en',\n  locales: localesMap\n} as LocaleState)\nlocaleState.locales.set('en', en)\nlocaleState.locales.set('zh-cn', zhCn)\n\nclass DayutsIntl {\n\tconstructor(){}\n\tuse(locale:DayutsLocale):DayutsIntl{\n\t\tlocaleState.locales.set(locale.name, locale)\n\t\treturn this\n\t}\n\tset locale(locale: string){\n\t\tif(localeState.locales.has(locale)){\n\t\t\tlocaleState.lang = locale\n\t\t} else {\n\t\t\tlet list:string[] = []\n\t\t\tlocaleState.locales.forEach(function(_:any,key:string){\n\t\t\t   list.push(key)\n\t\t\t})\n\t\t\t__f__('warn','at uni_modules/lime-dayuts/common/use.ts:46',`未知语言: \"${locale}\". 请使用以下已知语言之一:${list.join(', ')}`);\n\t\t}\n\t}\n\tget locale(): string{\n\t\treturn localeState.lang\n\t}\n\tset(name: string, locale:DayutsLocale){\n\t\tlocaleState.locales.set(name, locale)\n\t}\n\thas(name: string):boolean{\n\t\treturn localeState.locales.has(name)\n\t}\n}\nexport const dayutsIntl = new DayutsIntl()\n\n\n// const dyauts = use(xx).use(xx).use(xx).use(xx)\n// dyauts.locale ='zh'","// @ts-nocheck\nimport { DayutsConfig, type DayutsLocale, DayutsUnit, DayutsObject } from '../utssdk/interface';\nimport { REGEX_FORMAT, REGEX_PARSE, INVALID_DATE_STRING, M, Y, W, D, DATE, H, MIN, S, MS, Q, MILLISECONDS_A_MINUTE, MILLISECONDS_A_HOUR, MILLISECONDS_A_SECOND, MILLISECONDS_A_WEEK, MILLISECONDS_A_DAY, FORMAT_DEFAULT } from './constant';\nimport { isNumber, prettyUnit, padStart, padZoneStr, monthDiff, absFloor } from './utils';\nimport { dayutsIntl, localeState } from './use';\ntype Threshold = {\n    l: string;\n    r?: number;\n    d?: DayutsUnit;\n};\nfunction parseLocale(preset: string | null): string | null;\nfunction parseLocale(preset: DayutsLocale | null): string | null;\nfunction parseLocale(preset: string, object: DayutsLocale | null, isLocal: boolean): string | null;\nfunction parseLocale(preset: DayutsLocale, object: DayutsLocale, isLocal: boolean): string | null;\nfunction parseLocale(preset: any | null, object: DayutsLocale | null = null, isLocal: boolean = false): string | null {\n    let l: string | null = null;\n    if (preset == null)\n        return dayutsIntl.locale;\n    if (typeof preset == 'string') {\n        const presetLower = (preset as string).toLowerCase();\n        if (dayutsIntl.has(presetLower)) {\n            l = presetLower;\n        }\n        if (object != null) {\n            dayutsIntl.set(presetLower, object);\n            l = presetLower;\n        }\n        const presetSplit = (preset as string).split('-');\n        if (l == null && presetSplit.length > 1) {\n            return parseLocale(presetSplit[0]);\n        }\n    }\n    else if (preset instanceof DayutsLocale) {\n        // const { name } = preset as DayutsLocale\n        dayutsIntl.set(preset.name, preset);\n        l = preset.name;\n    }\n    if (!isLocal && l != null) {\n        // L = l\n        dayutsIntl.locale = l;\n    }\n    // return l ?? L //(!isLocal && L != null)\n    return l ?? dayutsIntl.locale; //(!isLocal && L != null)\n}\nfunction tryParseNumberAtIndex(digits: (any | null)[], index: number): number | null {\n    // 检查索引是否在数组范围内\n    if (index >= 0 && index < digits.length) {\n        if (digits[index] == null)\n            return null;\n        // 尝试解析索引位置的字符串为数字\n        const parsedNumber = isNumber(digits[index]) ? digits[index] as number : parseInt(`${digits[index]}`, 10);\n        // 检查解析结果是否为有效数字\n        if (!isNaN(parsedNumber)) {\n            return parsedNumber;\n        }\n    }\n    return null;\n}\n// function createDateFromArray(d: number[]):Date\n// function createDateFromArray(d: string[]):Date\nfunction createDateFromArray(d: (any | null)[], offset: number = 0): Date {\n    const year = tryParseNumberAtIndex(d, 1 - offset) ?? new Date().getFullYear();\n    const month = (tryParseNumberAtIndex(d, 2 - offset) ?? 1) - 1;\n    const day = tryParseNumberAtIndex(d, 3 - offset) ?? 1;\n    const hour = tryParseNumberAtIndex(d, 4 - offset) ?? 0;\n    const minute = tryParseNumberAtIndex(d, 5 - offset) ?? 0;\n    const second = tryParseNumberAtIndex(d, 6 - offset) ?? 0;\n    const millisecond = (tryParseNumberAtIndex(d, 7 - offset) ?? 0).toString(10).substring(0, 3); //d.length > 7 ? parseInt((d[7] ?? '0').substring(0, 3)) : 0\n    return new Date(year, month, day, hour, minute, second, parseInt(millisecond));\n}\nfunction parseDate(cfg: DayutsConfig): Date | null {\n    const { date } = cfg;\n    if (date == null)\n        return new Date();\n    if (date instanceof Date)\n        return date as Date;\n    try {\n        if (typeof date == 'string' && /^\\d+$/.test(date as string)) {\n            return new Date(parseInt(`${date as string}`.padEnd(13, '0')));\n        }\n        if (typeof date == 'string' && !/Z$/i.test(date as string)) {\n            const d = (date as string).match(REGEX_PARSE);\n            const isNull = d == null || Array.isArray(d) && d.length == 0;\n            if (!isNull) {\n                return createDateFromArray(d as (any | null)[]);\n            }\n        }\n        if (typeof date == 'string')\n            return new Date(date as string);\n        if (Array.isArray(date)) {\n            return createDateFromArray(date as (any | null)[], 1);\n        }\n        if (isNumber(date))\n            return new Date(date as number);\n        return null; //new Date()\n    }\n    catch (err: any) {\n        return null; //new Date()\n    }\n}\nfunction wrapper(date: any, instance: Dayuts): Dayuts {\n    return dayuts(date, instance.$L);\n}\nexport class Dayuts {\n    $L: string;\n    private valid: boolean = true;\n    private $d: Date = new Date();\n    private $y: number = 0;\n    private $M: number = 0;\n    private $D: number = 0;\n    private $W: number = 0;\n    private $H: number = 0;\n    private $m: number = 0;\n    private $s: number = 0;\n    private $ms: number = 0;\n    private $u: boolean = false;\n    constructor(cfg: DayutsConfig) {\n        this.$L = parseLocale(cfg.locale) ?? dayutsIntl.locale; //'en'\n        this.parse(cfg);\n    }\n    parse(cfg: DayutsConfig) {\n        const _d = parseDate(cfg);\n        if (_d != null) {\n            this.$d = parseDate(cfg)!;\n            this.init();\n        }\n        else {\n            this.valid = false;\n        }\n    }\n    init() {\n        const { $d } = this;\n        this.$y = $d.getFullYear();\n        this.$M = $d.getMonth();\n        this.$D = $d.getDate();\n        this.$W = $d.getDay();\n        this.$H = $d.getHours();\n        this.$m = $d.getMinutes();\n        this.$s = $d.getSeconds();\n        this.$ms = $d.getMilliseconds();\n    }\n    /**\n     * 检查日期对象是否有效。\n     *\n     * @returns {boolean} 如果日期对象有效，则返回true；否则返回false。\n     */\n    isValid(): boolean {\n        return this.valid;\n        // return !(this.$d.toString() == INVALID_DATE_STRING)\n    }\n    /**\n     * 检查当前日期是否与给定的日期在指定的时间单位内相同。\n     *\n     * @param {string|number|Date} input - 要比较的日期。\n     * @param {string} units - 时间单位，例如'year'、'month'、'day'等。\n     * @returns {boolean} 如果当前日期与给定的日期在指定的时间单位内相同，则返回true；否则返回false。\n     */\n    isSame(input: string): boolean;\n    isSame(input: number): boolean;\n    isSame(input: Date): boolean;\n    isSame(input: Dayuts): boolean;\n    isSame(input: UTSJSONObject): boolean;\n    isSame(input: string, units: DayutsUnit): boolean;\n    isSame(input: number, units: DayutsUnit): boolean;\n    isSame(input: Date, units: DayutsUnit): boolean;\n    isSame(input: Dayuts, units: DayutsUnit): boolean;\n    isSame(input: UTSJSONObject, units: DayutsUnit): boolean;\n    isSame(input: any, units: DayutsUnit = 'millisecond'): boolean {\n        const other = input instanceof Dayuts ? input as Dayuts : dayuts(input);\n        const date1 = this.startOf(units).valueOf();\n        const date2 = other.valueOf();\n        const date3 = this.endOf(units).valueOf();\n        return date1 <= date2 && date2 <= date3;\n    }\n    /**\n     * 检查给定的日期或时间是否在当前 dayuts 对象的指定时间单位之后。\n     *\n     * @param {string | number | Date | Dayuts} input - 要与当前 dayuts 对象进行比较的日期或时间。\n     * @param {string} units - 要比较的时间单位（如 \"year\"、\"month\"、\"day\" 等）。\n     * @returns {boolean} 如果给定的日期或时间在当前 dayuts 对象的指定时间单位之后，则返回 `true`，否则返回 `false`。\n     */\n    isAfter(input: string): boolean;\n    isAfter(input: number): boolean;\n    isAfter(input: Date): boolean;\n    isAfter(input: Dayuts): boolean;\n    isAfter(input: UTSJSONObject): boolean;\n    isAfter(input: string, units: DayutsUnit): boolean;\n    isAfter(input: number, units: DayutsUnit): boolean;\n    isAfter(input: Date, units: DayutsUnit): boolean;\n    isAfter(input: Dayuts, units: DayutsUnit): boolean;\n    isAfter(input: UTSJSONObject, units: DayutsUnit): boolean;\n    isAfter(input: any, units: DayutsUnit = 'millisecond'): boolean {\n        const other = input instanceof Dayuts ? input as Dayuts : dayuts(input);\n        const date1 = other.valueOf();\n        const date2 = this.startOf(units).valueOf();\n        return date1 < date2;\n    }\n    /**\n     * 检查给定的日期或时间是否在当前 dayuts 对象的指定时间单位之前。\n     *\n     * @param {string | number | Date | Dayuts} input - 要与当前 dayuts 对象进行比较的日期或时间。\n     * @param {string} units - 要比较的时间单位（如 \"year\"、\"month\"、\"day\" 等）。\n     * @returns {boolean} 如果给定的日期或时间在当前 dayuts 对象的指定时间单位之前，则返回 `true`，否则返回 `false`。\n     */\n    isBefore(input: string): boolean;\n    isBefore(input: number): boolean;\n    isBefore(input: Date): boolean;\n    isBefore(input: Dayuts): boolean;\n    isBefore(input: UTSJSONObject): boolean;\n    isBefore(input: string, units: DayutsUnit): boolean;\n    isBefore(input: number, units: DayutsUnit): boolean;\n    isBefore(input: Date, units: DayutsUnit): boolean;\n    isBefore(input: Dayuts, units: DayutsUnit): boolean;\n    isBefore(input: UTSJSONObject, units: DayutsUnit): boolean;\n    isBefore(input: any, units: DayutsUnit = 'millisecond'): boolean {\n        const other = input instanceof Dayuts ? input as Dayuts : dayuts(input);\n        const date1 = other.valueOf();\n        const date2 = this.endOf(units).valueOf();\n        return date2 < date1;\n    }\n    /**\n     * 判断当前Dayuts对象是否与给定的输入在同一时间或之前，根据指定的时间单位\n     * @param {(string | number | Date | Dayuts | UTSJSONObject)} input - 输入的时间\n     * @param {DayutsUnit} units - 指定的时间单位\n     * @returns {boolean} - 如果当前Dayuts对象与给定的输入在同一时间或之前，则返回true，否则返回false\n     */\n    isSameOrBefore(input: string): boolean;\n    isSameOrBefore(input: number): boolean;\n    isSameOrBefore(input: Date): boolean;\n    isSameOrBefore(input: Dayuts): boolean;\n    isSameOrBefore(input: UTSJSONObject): boolean;\n    isSameOrBefore(input: string, units: DayutsUnit): boolean;\n    isSameOrBefore(input: number, units: DayutsUnit): boolean;\n    isSameOrBefore(input: Date, units: DayutsUnit): boolean;\n    isSameOrBefore(input: Dayuts, units: DayutsUnit): boolean;\n    isSameOrBefore(input: UTSJSONObject, units: DayutsUnit): boolean;\n    isSameOrBefore(input: any, units: DayutsUnit = 'millisecond'): boolean {\n        return this.isSame(input, units) || this.isBefore(input, units);\n    }\n    /**\n     * 判断当前Dayuts对象是否与给定的输入在同一时间或之后，根据指定的时间单位\n     * @param {(string | number | Date | Dayuts | UTSJSONObject)} input - 输入的时间\n     * @param {DayutsUnit} units - 指定的时间单位\n     * @returns {boolean} - 如果当前Dayuts对象与给定的输入在同一时间或之后，则返回true，否则返回false\n     */\n    isSameOrAfter(input: string): boolean;\n    isSameOrAfter(input: number): boolean;\n    isSameOrAfter(input: Date): boolean;\n    isSameOrAfter(input: Dayuts): boolean;\n    isSameOrAfter(input: UTSJSONObject): boolean;\n    isSameOrAfter(input: string, units: DayutsUnit): boolean;\n    isSameOrAfter(input: number, units: DayutsUnit): boolean;\n    isSameOrAfter(input: Date, units: DayutsUnit): boolean;\n    isSameOrAfter(input: Dayuts, units: DayutsUnit): boolean;\n    isSameOrAfter(input: UTSJSONObject, units: DayutsUnit): boolean;\n    isSameOrAfter(input: any, units: DayutsUnit = 'millisecond'): boolean {\n        return this.isSame(input, units) || this.isAfter(input, units);\n    }\n    /**\n     * 判断当前Dayuts对象是否在给定的两个时间之间\n     * @param {any} input - 第一个时间输入\n     * @param {any} input2 - 第二个时间输入\n     * @param {DayutsUnit} units - 指定的时间单位\n     * @param {string} interval - 区间符号，表示区间的开闭性，默认为'()'，表示开区间\n     * @returns {boolean} - 如果当前Dayuts对象在给定的两个时间之间，则返回true，否则返回false\n     */\n    isBetween(input: any, input2: any, units: DayutsUnit = 'millisecond', interval: string = '()'): boolean {\n        const dA = dayuts(input);\n        const dB = dayuts(input2);\n        const dAi = interval.startsWith('(');\n        const dBi = interval.endsWith(')');\n        return ((dAi ? this.isAfter(dA, units) : !this.isBefore(dA, units)) &&\n            (dBi ? this.isBefore(dB, units) : !this.isAfter(dB, units)))\n            || ((dAi ? this.isBefore(dA, units) : !this.isAfter(dA, units)) &&\n                (dBi ? this.isAfter(dB, units) : !this.isBefore(dB, units)));\n    }\n    /**\n     * 判断当前Dayuts对象所在的年份是否为闰年\n     * @returns {boolean} - 如果当前Dayuts对象所在的年份是闰年，则返回true，否则返回false\n     */\n    isLeapYear(): boolean {\n        return ((this.$y % 4 == 0) && (this.$y % 100 != 0)) || (this.$y % 400 == 0);\n    }\n    isToday(): boolean {\n        const comparisonTemplate = 'YYYY-MM-DD';\n        const now = dayuts();\n        return this.format(comparisonTemplate) == now.format(comparisonTemplate);\n    }\n    /**\n     * 获取当前 `dayuts` 对象的 Unix 时间戳（以秒为单位）。\n     *\n     * @returns {number} 返回当前 `dayuts` 对象的 Unix 时间戳（以秒为单位）。\n     */\n    unix(): number {\n        return Math.floor(this.valueOf() / 1000);\n    }\n    /**\n     * 将当前日期设置为指定时间单位的开始或结束。\n     *\n     * @param {string} units - 时间单位，例如'year'、'month'、'day'等。\n     * @param {boolean} startOf - 如果为true，则设置为开始；如果为false，则设置为结束。\n     * @returns {Dayuts} 返回一个新的Dayuts对象，表示调整后的日期。\n     */\n    startOf(units: DayutsUnit, startOf: boolean = true): Dayuts {\n        const isStartOf = startOf;\n        const unit = prettyUnit(units);\n        // instanceFactory 函数用于创建一个新的 Dayuts 对象，表示给定日期的开始或结束。\n        // 参数 d 和 m 分别表示日期和月份。\n        const instanceFactory = (d: number, m: number): Dayuts => {\n            const ins = dayuts(new Date(this.$y, m, d));\n            return isStartOf ? ins : ins.endOf(D);\n        };\n        // instanceFactorySet 函数用于创建一个新的 Dayuts 对象，表示调整后的时间。\n        // 参数 method 表示要调用的 Date 对象的方法（如 'setHours'），slice 表示要调整的时间部分的索引。\n        const instanceFactorySet = (method: string, slice: number): Dayuts => {\n            // 定义表示开始和结束时间的参数数组。\n            const argumentStart = [0, 0, 0, 0];\n            const argumentEnd = [23, 59, 59, 999];\n            // 根据 isStartOf 的值，选择开始或结束时间的参数数组，并调用 Date 对象的方法。\n            const args = (isStartOf ? argumentStart : argumentEnd).slice(slice);\n            const date = this.toDate();\n            if (method == 'setHours') {\n                date.setHours(args[0]);\n                date.setMinutes(args[1]);\n                date.setSeconds(args[2]);\n                date.setMilliseconds(args[3]);\n            }\n            else if (method == 'setMinutes') {\n                date.setMinutes(args[0]);\n                date.setSeconds(args[1]);\n                date.setMilliseconds(args[2]);\n            }\n            else if (method == 'setSeconds') {\n                date.setSeconds(args[0]);\n                date.setMilliseconds(args[1]);\n            }\n            else if (method == 'setMilliseconds') {\n                date.setMilliseconds(args[0]);\n            }\n            return dayuts(date);\n        };\n        const { $W, $M, $D } = this;\n        const utcPad = `set${this.$u ? 'UTC' : ''}`;\n        if (unit == Y) {\n            return isStartOf ? instanceFactory(1, 0) : instanceFactory(31, 11);\n        }\n        else if (unit == M) {\n            return isStartOf ? instanceFactory(1, $M) : instanceFactory(0, $M + 1);\n        }\n        else if (unit == W) {\n            const weekStart = this.$locale().weekStart ?? 0;\n            const gap = ($W < weekStart ? $W + 7 : $W) - weekStart;\n            return instanceFactory(isStartOf ? $D - gap : $D + (6 - gap), $M);\n        }\n        else if (unit == D || unit == DATE) {\n            return instanceFactorySet(`${utcPad}Hours`, 0);\n        }\n        else if (unit == H) {\n            return instanceFactorySet(`${utcPad}Minutes`, 1);\n        }\n        else if (unit == MIN) {\n            return instanceFactorySet(`${utcPad}Seconds`, 2);\n        }\n        else if (unit == S) {\n            return instanceFactorySet(`${utcPad}Milliseconds`, 3);\n        }\n        else {\n            return this.clone();\n        }\n    }\n    /**\n     * 将当前日期设置为指定时间单位的结束。\n     *\n     * @param {string} arg - 时间单位，例如'year'、'month'、'day'等。\n     * @returns {Dayuts} 返回一个新的Dayuts对象，表示调整后的日期。\n     */\n    endOf(units: DayutsUnit): Dayuts {\n        return this.startOf(units, false);\n    }\n    /**\n     * 设置指定的时间单位的值。\n     *\n     * @param {string} units - 要设置的时间单位（如 \"year\"、\"month\"、\"day\" 等）。\n     * @param {number} int - 要设置的值。\n     * @returns {Dayuts} 返回当前对象。\n     */\n    private $set(units: DayutsUnit, int: number): Dayuts {\n        const unit = prettyUnit(units);\n        // const utcPad = `set${this.$u ? 'UTC' : ''}`\n        const arg = unit == D ? this.$D + (int - this.$W) : int;\n        const setDateUnit = (date: Dayuts, unit: DayutsUnit, arg: number) => {\n            if (unit == D || unit == DATE) {\n                date.$d.setDate(arg);\n            }\n            else if (unit == M) {\n                date.$d.setMonth(arg);\n            }\n            else if (unit == Y) {\n                date.$d.setFullYear(arg);\n            }\n            else if (unit == H) {\n                date.$d.setHours(arg);\n            }\n            else if (unit == MIN) {\n                date.$d.setMinutes(arg);\n            }\n            else if (unit == S) {\n                date.$d.setSeconds(arg);\n            }\n            else if (unit == MS) {\n                date.$d.setMilliseconds(arg);\n            }\n        };\n        if (unit == M || unit == Y) {\n            // clone is for badMutable plugin\n            const date = this.clone().set(DATE, 1);\n            // date.$d[name](arg)\n            setDateUnit(date, unit, arg);\n            date.init();\n            this.$d = date.set(DATE, Math.min(this.$D, date.daysInMonth())).$d;\n        }\n        else {\n            setDateUnit(this, unit, arg);\n            // this.$d[name](arg)\n        }\n        this.init();\n        return this;\n    }\n    /**\n     * 创建一个当前对象的副本，并设置指定的时间单位的值。\n     *\n     * @param {string} string - 要设置的时间单位（如 \"year\"、\"month\"、\"day\" 等）。\n     * @param {number} int - 要设置的值。\n     * @returns {Dayuts} 返回一个新的 `dayuts` 对象，其值为当前对象的副本，并设置了指定的时间单位的值。\n     */\n    set(string: DayutsUnit, int: number): Dayuts {\n        return this.clone().$set(string, int);\n    }\n    /**\n     * 获取当前 `dayuts` 对象的指定时间单位的值。\n     *\n     * @param {string} units - 要获取的时间单位（如 \"year\"、\"month\"、\"day\" 等）。\n     * @returns {number} 返回当前 `dayuts` 对象的指定时间单位的值。\n     */\n    get(units: DayutsUnit): number {\n        const unit = prettyUnit(units);\n        if (unit == D) {\n            return this.day();\n        }\n        else if (unit == DATE) {\n            return this.date();\n        }\n        else if (unit == M) {\n            return this.month();\n        }\n        else if (unit == Y) {\n            return this.year();\n        }\n        else if (unit == H) {\n            return this.hour();\n        }\n        else if (unit == MIN) {\n            return this.minute();\n        }\n        else if (unit == S) {\n            return this.second();\n        }\n        else if (unit == MS) {\n            return this.millisecond();\n        }\n        return 0;\n    }\n    /**\n     * 获取或设置年份。\n     * @param {number | null} [input] - 要设置的年份。\n     * @returns {number | Dayuts} 年份或 Dayuts 实例。\n     */\n    year(): number;\n    year(input: number): Dayuts;\n    year(input: number | null = null): any {\n        if (input == null)\n            return this.$y;\n        return this.set(Y, input);\n    }\n    /**\n     * 获取或设置月份。\n     * @param {number | null} [input] - 要设置的月份（0-11）。\n     * @returns {number | Dayuts} 月份或 Dayuts 实例。\n     */\n    month(): number;\n    month(input: number): Dayuts;\n    month(input: number | null = null): any {\n        if (input == null)\n            return this.$M;\n        return this.set(M, input);\n    }\n    /**\n     * 获取或设置星期几。\n     * @param {number | null} [input] - 要设置的星期几（0-6）。\n     * @returns {number | Dayuts} 星期几或 Dayuts 实例。\n     */\n    day(): number;\n    day(input: number): Dayuts;\n    day(input: number | null = null): any {\n        if (input == null)\n            return this.$W;\n        return this.set(D, input);\n    }\n    /**\n     * 获取或设置月份中的某一天。\n     * @param {number | null} [input] - 要设置的月份中的某一天（1-31）。\n     * @returns {number | Dayuts} 月份中的某一天或 Dayuts 实例。\n     */\n    date(): number;\n    date(input: number): Dayuts;\n    date(input: number | null = null): any {\n        if (input == null)\n            return this.$D;\n        return this.set(DATE, input);\n    }\n    /**\n     * 获取或设置小时。\n     * @param {number | null} [input] - 要设置的小时（0-23）。\n     * @returns {number | Dayuts} 小时或 Dayuts 实例。\n     */\n    hour(): number;\n    hour(input: number): Dayuts;\n    hour(input: number | null = null): any {\n        if (input == null)\n            return this.$H;\n        return this.set(H, input);\n    }\n    /**\n     * 获取或设置分钟。\n     * @param {number | null} [input] - 要设置的分钟（0-59）。\n     * @returns {number | Dayuts} 分钟或 Dayuts 实例。\n     */\n    minute(): number;\n    minute(input: number): Dayuts;\n    minute(input: number | null = null): any {\n        if (input == null)\n            return this.$m;\n        return this.set(MIN, input);\n    }\n    /**\n     * 获取或设置秒。\n     * @param {number | null} [input] - 要设置的秒（0-59）。\n     * @returns {number | Dayuts} 秒或 Dayuts 实例。\n     */\n    second(): number;\n    second(input: number): Dayuts;\n    second(input: number | null = null): any {\n        if (input == null)\n            return this.$s;\n        return this.set(S, input);\n    }\n    /**\n     * 获取或设置毫秒。\n     * @param {number | null} [input] - 要设置的毫秒（0-999）。\n     * @returns {number | Dayuts} 毫秒或 Dayuts 实例。\n     */\n    millisecond(): number;\n    millisecond(input: number): Dayuts;\n    millisecond(input: number | null = null): any {\n        if (input == null)\n            return this.$ms;\n        return this.set(MS, input);\n    }\n    /**\n     * 在当前 Dayuts 实例上添加指定的时间长度。\n     * @param {number} number - 要添加的时间长度。\n     * @param {string} units - 要添加的时间单位（例如，“years”，“months”，“days”等）。\n     * @returns {Dayuts} 更新的 Dayuts 实例。\n     */\n    add(number: number, units: DayutsUnit): Dayuts {\n        const unit = prettyUnit(units);\n        // 创建一个新的 Dayuts 实例，并根据给定的 n 值设置日期。\n        // n 值乘以 number 参数，然后加到当前日期上，以设置新的日期。\n        const instanceFactorySet = (n: number): Dayuts => {\n            // 创建一个新的 Dayuts 实例，它是当前实例的副本\n            const d = dayuts(this);\n            // 设置新的日期并返回更新后的 Dayuts 实例\n            return d.date(d.date() + Math.round(n * number)); //Utils.w(d.date(d.date() + Math.round(n * number)), this)\n        };\n        if (unit == M) {\n            return this.set(M, this.$M + number);\n        }\n        if (unit == Y) {\n            return this.set(Y, this.$y + number);\n        }\n        if (unit == D) {\n            return instanceFactorySet(1);\n        }\n        if (unit == W) {\n            return instanceFactorySet(7);\n        }\n        const steps = new Map<string, number>([\n            [MIN, MILLISECONDS_A_MINUTE],\n            [H, MILLISECONDS_A_HOUR],\n            [S, MILLISECONDS_A_SECOND],\n        ]);\n        const step = steps.get(unit) ?? 1;\n        const nextTimeStamp = this.$d.getTime() + (number * step);\n        return wrapper(nextTimeStamp, this);\n    }\n    /**\n     * 从当前 Dayuts 实例中减去指定的时间。\n     * @param {number} number - 要减去的时间。\n     * @param {string} units - 要减去的时间单位（例如，“years”，“months”，“days”等）。\n     * @returns {Dayuts} 更新的 Dayuts 实例。\n     */\n    subtract(number: number, units: DayutsUnit): Dayuts {\n        // 通过将 number 乘以 -1，然后调用 add 方法来实现减法操作\n        return this.add(number * -1, units);\n    }\n    /**\n     * 日期格式化\n     * @param {string} formatStr - 格式化字符串，包含各种格式化占位符（例如，“YYYY-MM-DD”，“HH:mm:ss”等）。\n     * @returns {string} 格式化后的日期字符串。\n     */\n    format(formatStr: string | null = null): string {\n        const locale = this.$locale();\n        if (!this.isValid())\n            return INVALID_DATE_STRING; // locale.invalidDate || INVALID_DATE_STRING;\n        const str = formatStr ?? FORMAT_DEFAULT;\n        // @ts-ignore\n        const zoneStr = padZoneStr(this);\n        const { $H, $m, $M } = this;\n        const { weekdays, months, meridiem } = locale;\n        /**\n         * 从给定的数组中获取缩写或完整的字符串。\n         * @param {Array} arr - 包含缩写字符串的数组。\n         * @param {number} index - 数组中要获取的元素的索引。\n         * @param {Array} full - 包含完整字符串的数组。\n         * @param {number} length - 要返回的字符串的长度。\n         * @returns {string} 缩写或完整的字符串。\n         */\n        function getShort(arr: string[] | null, index: number, full: string[] = [], length: number = 0): string {\n            if (arr != null && arr.length >= index) {\n                return arr[index];\n            }\n            else if (full.length >= index) {\n                return full[index].slice(0, length);\n            }\n            return '';\n        }\n        ;\n        /**\n         * 获取12小时制的小时数。\n         * @param {number} num - 小时数的位数。\n         * @returns {string} 12小时制的小时数字符串。\n         */\n        const get$H = (num: number): string => padStart(($H % 12 == 0 ? 12 : $H % 12).toString(10), num, '0');\n        /**\n         * 获取上午或下午的字符串表示。\n         * @param {number} hour - 小时数。\n         * @param {number} minute - 分钟数。\n         * @param {boolean} isLowercase - 是否返回小写字符串。\n         * @returns {string} 上午或下午的字符串表示。\n         */\n        const meridiemFunc = meridiem ?? ((hour: number, _: number, isLowercase: boolean): string => {\n            const m = (hour < 12 ? 'AM' : 'PM');\n            return isLowercase ? m.toLowerCase() : m;\n        });\n        return str.replace('YYYY', padStart(this.$y.toString(10), 4, '0'))\n            .replace('YY', (this.$y).toString(10).slice(-2))\n            .replace('MMMM', getShort(months, $M))\n            .replace('MM', padStart(($M + 1).toString(10), 2, '0'))\n            .replace('M', ($M + 1).toString(10))\n            .replace('DD', padStart(this.$D.toString(10), 2, '0'))\n            .replace('D', this.$D.toString(10))\n            .replace('dddd', weekdays[this.$W])\n            .replace('ddd', getShort(locale.weekdaysShort, this.$W, weekdays, 3))\n            .replace('dd', getShort(locale.weekdaysMin, this.$W, weekdays, 2))\n            .replace('d', this.$W.toString(10))\n            .replace('HH', padStart($H.toString(10), 2, '0'))\n            .replace('H', $H.toString(10))\n            .replace('hh', get$H(2))\n            .replace('h', get$H(1))\n            .replace('mm', padStart($m.toString(10), 2, '0'))\n            .replace('m', $m.toString(10))\n            .replace('ss', padStart(this.$s.toString(10), 2, '0'))\n            .replace('s', this.$s.toString(10))\n            .replace('SSS', padStart(this.$ms.toString(10), 3, '0'))\n            .replace('A', meridiemFunc($H, $m, false))\n            .replace('a', meridiemFunc($H, $m, true))\n            .replace('Z', zoneStr);\n    }\n    /**\n     * 获取 Dayuts 实例的 UTC 偏移量（以分钟为单位）。\n     * @returns {number} UTC 偏移量（以分钟为单位）。\n     */\n    utcOffset(): number {\n        // Because a bug at FF24, we're rounding the timezone offset around 15 minutes\n        // https://github.com/moment/moment/pull/1871\n        return 0;\n    }\n    /**\n     * 计算两个日期之间的差值\n     * @param {string|number|Date|Dayuts} input - 要比较的日期\n     * @param {string} units - 要计算的时间单位，如 'years', 'months', 'weeks', 'days', 'hours', 'minutes', 'seconds'\n     * @param {boolean} float - 是否返回浮点数结果\n     * @returns {number} 返回两个日期之间的差值\n     */\n    diff(input: string): number;\n    diff(input: number): number;\n    diff(input: Date): number;\n    diff(input: Dayuts): number;\n    diff(input: UTSJSONObject): number;\n    diff(input: string, units: DayutsUnit): number;\n    diff(input: number, units: DayutsUnit): number;\n    diff(input: Date, units: DayutsUnit): number;\n    diff(input: Dayuts, units: DayutsUnit): number;\n    diff(input: UTSJSONObject, units: DayutsUnit): number;\n    diff(input: string, units: DayutsUnit, float: boolean): number;\n    diff(input: number, units: DayutsUnit, float: boolean): number;\n    diff(input: Date, units: DayutsUnit, float: boolean): number;\n    diff(input: Dayuts, units: DayutsUnit, float: boolean): number;\n    diff(input: UTSJSONObject, units: DayutsUnit, float: boolean): number;\n    diff(input: any, units: DayutsUnit = 'millisecond', float: boolean = false): number {\n        const unit = prettyUnit(units);\n        const that = dayuts(input);\n        const zoneDelta = (that.utcOffset() - this.utcOffset()) * MILLISECONDS_A_MINUTE;\n        const diff = this.valueOf() - that.valueOf();\n        // @ts-ignore\n        const getMonth = (): number => monthDiff(this, that);\n        let result: number;\n        switch (unit) {\n            case Y:\n                result = getMonth() / 12;\n                break;\n            case M:\n                result = getMonth();\n                break;\n            case Q:\n                result = getMonth() / 3;\n                break;\n            case W:\n                result = (diff - zoneDelta) / MILLISECONDS_A_WEEK;\n                break;\n            case D:\n                result = (diff - zoneDelta) / MILLISECONDS_A_DAY;\n                break;\n            case H:\n                result = diff / MILLISECONDS_A_HOUR;\n                break;\n            case MIN:\n                result = diff / MILLISECONDS_A_MINUTE;\n                break;\n            case S:\n                result = diff / MILLISECONDS_A_SECOND;\n                break;\n            default:\n                result = diff; // milliseconds\n                break;\n        }\n        return float ? result : absFloor(result);\n    }\n    /**\n     * 将当前 Dayuts 对象转换为原生 Date 对象。\n     *\n     * @returns {Date} 返回一个表示当前日期的原生 Date 对象。\n     */\n    toDate(): Date {\n        return new Date(this.valueOf());\n    }\n    /**\n     * 将 Moment 对象转换为 JSON 字符串\n     * @returns {string | null} 如果 Moment 对象有效，则返回 ISO 8601 格式的字符串，否则返回 null\n     */\n    toJSON(): string | null {\n        return this.isValid() ? this.toISOString() : null;\n    }\n    /**\n     * 将 Moment 对象转换为 ISO 8601 格式的字符串\n     * @returns {string} 返回 ISO 8601 格式的字符串\n     */\n    toISOString(): string {\n        return this.$d.toString();\n    }\n    toObject(): DayutsObject {\n        return {\n            years: this.$y,\n            months: this.$M,\n            date: this.$D,\n            hours: this.$H,\n            minutes: this.$m,\n            seconds: this.$s,\n            milliseconds: this.$ms\n        } as DayutsObject;\n    }\n    toArray(): number[] {\n        return [\n            this.$y,\n            this.$M,\n            this.$D,\n            this.$H,\n            this.$m,\n            this.$s,\n            this.$ms\n        ];\n    }\n    /**\n     * 获取当前日期的毫秒数。\n     *\n     * @returns {number} 返回一个表示当前日期的毫秒数。\n     */\n    valueOf(): number {\n        // 使用 Date 对象的 getTime 方法获取当前日期的毫秒数。\n        return this.$d.getTime();\n    }\n    /**\n     * 获取当前 `dayuts` 对象所在月份的天数。\n     *\n     * @returns {number} 返回当前 `dayuts` 对象所在月份的天数。\n     */\n    daysInMonth(): number {\n        return this.endOf(M).$D;\n    }\n    /**\n     * 获取当前日期的区域设置对象。\n     *\n     * @returns {Object} 区域设置对象。\n     */\n    private $locale(): DayutsLocale {\n        // return Ls.get(this.$L)!\n        return localeState.locales.get(this.$L)!;\n    }\n    /**\n     * 设置或获取 Dayuts 实例的本地化配置\n     * @param {string|Object} preset - 本地化预设名称或自定义本地化配置对象\n     * @param {Object} [DayutsLocale] - 可选的自定义本地化配置对象\n     * @returns {Dayuts|string} 如果设置了本地化配置，则返回一个新的 Dayuts 实例；否则返回当前实例的本地化配置名称\n     */\n    locale(preset: string, object: DayutsLocale): Dayuts;\n    locale(preset: DayutsLocale, object: DayutsLocale): Dayuts;\n    locale(preset: any, object: DayutsLocale | null = null): Dayuts {\n        // if (!preset) return this.$L\n        const that = this.clone();\n        const nextLocaleName = parseLocale(preset, object, true);\n        if (nextLocaleName != null)\n            that.$L = nextLocaleName;\n        return that;\n    }\n    clone(): Dayuts {\n        return wrapper(this.$d.getTime(), this);\n    }\n    /**\n     * 返回当前 dayuts 对象的 UTC 字符串表示。\n     *\n     * @returns {string} 当前 dayuts 对象的 UTC 字符串表示。\n     */\n    override toString(): string {\n        // return this.$d.toUTCString();\n        // const locale = localeState.locales.get('en')!\n        // const weekday = locale.weekdays[this.$d.getDay()].substring(0,3);\n        // const month = locale.months[this.$d.getMonth()].substring(0,3)\n        // const day = `${this.$D}`.padStart(2, '0');\n        // const hours = `${this.$H}`.padStart(2, '0');\n        // const minutes = `${this.$m}`.padStart(2, '0');\n        // const seconds = `${this.$s}`.padStart(2, '0');\n        // return `${weekday}, ${day} ${month} ${this.$y} ${hours}:${minutes}:${seconds} GMT`;\n        return this.$d.toString();\n    }\n    /**\n     * 计算给定日期在当年的第几天，或者设置给定日期为当年的第几天。\n     * @param {number} [input] - 如果提供了输入值，则将日期设置为当年的第几天。如果没有提供输入值，则返回当前日期在当年的第几天。\n     * @returns {number} 如果提供了输入值，则返回调整后的日期。如果没有提供输入值，则返回当前日期在当年的第几天。\n     */\n    dayOfYear(): number;\n    dayOfYear(input: number): Dayuts;\n    dayOfYear(input: number | null = null): any {\n        const dayOfYear = Math.round((this.startOf('day').valueOf() - this.startOf('year').valueOf()) / 864e5) + 1;\n        return input == null ? dayOfYear : this.add(input - dayOfYear, 'day');\n    }\n    /**\n     * 根据输入的时间计算与当前时间的相对时间差，并以指定的格式返回。\n     * @param {Date|number|string} input - 输入的时间，可以是Date对象、时间戳或符合Date.parse()方法的字符串\n     * @param {boolean} withoutSuffix - 是否省略“未来”或“过去”的后缀\n     * @param {Object} instance - 当前时间的实例\n     * @param {boolean} isFrom - 是否从输入时间计算到当前时间\n     * @param {Function} postFormat - 格式化绝对值后的结果的函数\n     * @returns {string} 相对时间差的格式化字符串\n     */\n    // postFormat\n    fromToBase(input: string, withoutSuffix: boolean, instance: Dayuts, isFrom: boolean): string;\n    fromToBase(input: number, withoutSuffix: boolean, instance: Dayuts, isFrom: boolean): string;\n    fromToBase(input: Date, withoutSuffix: boolean, instance: Dayuts, isFrom: boolean): string;\n    fromToBase(input: Dayuts, withoutSuffix: boolean, instance: Dayuts, isFrom: boolean): string;\n    fromToBase(input: UTSJSONObject, withoutSuffix: boolean, instance: Dayuts, isFrom: boolean): string;\n    fromToBase(input: any, withoutSuffix: boolean, instance: Dayuts, isFrom: boolean): string {\n        const relObj = localeState.locales.get('en')?.relativeTime;\n        const loc = instance.$locale().relativeTime ?? relObj;\n        if (loc == null)\n            return '';\n        const T: Threshold[] = [\n            { l: 's', r: 44, d: S } as Threshold,\n            { l: 'm', r: 89 } as Threshold,\n            { l: 'mm', r: 44, d: MIN } as Threshold,\n            { l: 'h', r: 89 } as Threshold,\n            { l: 'hh', r: 21, d: H } as Threshold,\n            { l: 'd', r: 35 } as Threshold,\n            { l: 'dd', r: 25, d: D } as Threshold,\n            { l: 'M', r: 45 } as Threshold,\n            { l: 'MM', r: 10, d: M } as Threshold,\n            { l: 'y', r: 17 } as Threshold,\n            { l: 'yy', d: Y } as Threshold\n        ];\n        const Tl = T.length;\n        let result: number = 0;\n        let out: string = '';\n        let isFuture: boolean = false;\n        for (let i = 0; i < Tl; i += 1) {\n            let t = T[i];\n            if (t.d != null) {\n                result = isFrom\n                    ? dayuts(input).diff(instance, t.d!, true)\n                    : instance.diff(input, t.d!, true);\n            }\n            let abs = Math.round(Math.abs(result));\n            isFuture = result > 0;\n            if (t.r == null || t.r != null && abs <= t.r!) {\n                if (abs <= 1 && i > 0)\n                    t = T[i - 1]; // 1 minutes -> a minute, 0 seconds -> 0 second\n                const format = loc[t.l];\n                // if (postFormat) {\n                // \tabs = postFormat(`${abs}`)\n                // }\n                if (typeof format == 'string') {\n                    out = (format as string).replace('%d', abs.toString(10));\n                }\n                // else {\n                // \tout = format(abs, withoutSuffix, t.l!, isFuture)\n                // }\n                break;\n            }\n        }\n        if (withoutSuffix)\n            return out;\n        const pastOrFuture = isFuture ? loc.future : loc.past;\n        // if (typeof pastOrFuture == 'function') {\n        // \treturn pastOrFuture(out)\n        // }\n        return pastOrFuture.replace('%s', out);\n    }\n    /**\n     * 相对指定时间(后)。\n     * @param {string|number|Date|Dayuts|UTSJSONObject} input - 输入的时间，可以是字符串、数字（时间戳）、Date对象、Dayuts对象或UTSJSONObject。\n     * @param {boolean} withoutSuffix - 是否省略“未来”或“过去”的后缀。\n     * @returns {string} 相对时间差的格式化字符串。\n     */\n    to(input: string): string;\n    to(input: number): string;\n    to(input: Date): string;\n    to(input: Dayuts): string;\n    to(input: UTSJSONObject): string;\n    to(input: string, withoutSuffix: boolean): string;\n    to(input: number, withoutSuffix: boolean): string;\n    to(input: Date, withoutSuffix: boolean): string;\n    to(input: Dayuts, withoutSuffix: boolean): string;\n    to(input: UTSJSONObject, withoutSuffix: boolean): string;\n    to(input: any, withoutSuffix: boolean = false): string {\n        return this.fromToBase(input, withoutSuffix, this, true);\n    }\n    /**\n     * 将当前时间转换为与输入时间的相对时间差，并以指定的格式返回。\n     * @param {string|number|Date|Dayuts|UTSJSONObject} input - 输入的时间，可以是字符串、数字（时间戳）、Date对象、Dayuts对象或UTSJSONObject。\n     * @param {boolean} withoutSuffix - 是否省略“未来”或“过去”的后缀。\n     * @returns {string} 相对时间差的格式化字符串。\n     */\n    from(input: string): string;\n    from(input: number): string;\n    from(input: Date): string;\n    from(input: Dayuts): string;\n    from(input: UTSJSONObject): string;\n    from(input: string, withoutSuffix: boolean): string;\n    from(input: number, withoutSuffix: boolean): string;\n    from(input: Date, withoutSuffix: boolean): string;\n    from(input: Dayuts, withoutSuffix: boolean): string;\n    from(input: UTSJSONObject, withoutSuffix: boolean): string;\n    from(input: any, withoutSuffix: boolean = false): string {\n        return this.fromToBase(input, withoutSuffix, this, false);\n    }\n    /**\n     * 获取当前时间与实例时间的相对时间差，并以指定的格式返回。\n     * @param {boolean} withoutSuffix - 是否省略“未来”或“过去”的后缀。\n     * @returns {string} 相对时间差的格式化字符串。\n     */\n    toNow(): string;\n    toNow(withoutSuffix: boolean = false): string {\n        return this.to(dayuts(), withoutSuffix);\n    }\n    /**\n     * 获取实例时间与当前时间的相对时间差，并以指定的格式返回。\n     * @param {boolean} withoutSuffix - 是否省略“未来”或“过去”的后缀。\n     * @returns {string} 相对时间差的格式化字符串。\n     */\n    fromNow(): string;\n    fromNow(withoutSuffix: boolean = false): string {\n        return this.from(dayuts(), withoutSuffix);\n    }\n}\nfunction dayuts(): Dayuts;\nfunction dayuts(date: string): Dayuts;\nfunction dayuts(date: any[]): Dayuts;\nfunction dayuts(date: number): Dayuts;\nfunction dayuts(date: UTSJSONObject): Dayuts;\nfunction dayuts(date: Date): Dayuts;\nfunction dayuts(date: Dayuts): Dayuts;\nfunction dayuts(date: any | null = null, format: string | null = null, locale: string | null = null): Dayuts {\n    if (date != null && date instanceof Dayuts)\n        return (date as Dayuts).clone();\n    return new Dayuts({\n        date,\n        format,\n        locale\n    } as DayutsConfig);\n}\n/**\n * 判断给定的对象是否为Dayuts实例\n * @param {(any | null)} date - 输入的对象\n * @returns {boolean} - 如果给定的对象是Dayuts实例，则返回true，否则返回false\n */\nfunction isDayuts(date: any | null = null): boolean {\n    return date instanceof Dayuts;\n}\nexport { dayuts, isDayuts };\n//# sourceMappingURL=index.uts.map","// @ts-nocheck\r\nimport { DayutsConfig, type DayutsLocale, DayutsUnit, DayutsObject } from '../utssdk/interface'\r\nimport { REGEX_FORMAT, REGEX_PARSE, INVALID_DATE_STRING, M, Y, W, D, DATE, H, MIN, S, MS, Q, MILLISECONDS_A_MINUTE, MILLISECONDS_A_HOUR, MILLISECONDS_A_SECOND, MILLISECONDS_A_WEEK, MILLISECONDS_A_DAY, FORMAT_DEFAULT } from './constant'\r\nimport { isNumber, prettyUnit, padStart, padZoneStr, monthDiff, absFloor } from './utils'\r\nimport { dayutsIntl, localeState } from './use'\r\n\r\ntype Threshold = {\r\n\tl : string;\r\n\tr ?: number;\r\n\td ?: DayutsUnit;\r\n}\r\n\r\nfunction parseLocale(preset : string | null) : string | null;\r\nfunction parseLocale(preset : DayutsLocale | null) : string | null;\r\nfunction parseLocale(preset : string, object : DayutsLocale | null, isLocal : boolean) : string | null;\r\nfunction parseLocale(preset : DayutsLocale, object : DayutsLocale, isLocal : boolean) : string | null;\r\nfunction parseLocale(preset : any | null, object : DayutsLocale | null = null, isLocal : boolean = false) : string | null {\r\n\tlet l : string | null = null\r\n\tif (preset == null) return dayutsIntl.locale\r\n\tif (typeof preset == 'string') {\r\n\t\tconst presetLower = (preset as string).toLowerCase()\r\n\t\tif (dayutsIntl.has(presetLower)) {\r\n\t\t\tl = presetLower\r\n\t\t}\r\n\t\tif (object != null) {\r\n\t\t\tdayutsIntl.set(presetLower, object)\r\n\t\t\tl = presetLower\r\n\t\t}\r\n\t\tconst presetSplit = preset.split('-')\r\n\t\tif (l == null && presetSplit.length > 1) {\r\n\t\t\treturn parseLocale(presetSplit[0])\r\n\t\t}\r\n\t} else if (preset instanceof DayutsLocale) {\r\n\t\t// const { name } = preset as DayutsLocale\r\n\t\tdayutsIntl.set(preset.name, preset)\r\n\t\tl = preset.name\r\n\t}\r\n\tif (!isLocal && l != null) {\r\n\t\t// L = l\r\n\t\tdayutsIntl.locale = l\r\n\t}\r\n\t// return l ?? L //(!isLocal && L != null)\r\n\treturn l ?? dayutsIntl.locale //(!isLocal && L != null)\r\n}\r\n\r\nfunction tryParseNumberAtIndex(digits : (any|null)[], index : number) : number | null {\r\n\t// 检查索引是否在数组范围内\r\n\tif (index >= 0 && index < digits.length) {\r\n\t\tif(digits[index] == null) return null\r\n\t\t// 尝试解析索引位置的字符串为数字\r\n\t\tconst parsedNumber = isNumber(digits[index]) ? digits[index] as number : parseInt(`${digits[index]}`, 10);\r\n\r\n\t\t// 检查解析结果是否为有效数字\r\n\t\tif (!isNaN(parsedNumber)) {\r\n\t\t\treturn parsedNumber;\r\n\t\t}\r\n\t}\r\n\treturn null\r\n}\r\n// function createDateFromArray(d: number[]):Date\r\n// function createDateFromArray(d: string[]):Date\r\nfunction createDateFromArray(d : (any|null)[], offset : number = 0) : Date {\r\n\tconst year = tryParseNumberAtIndex(d, 1 - offset) ?? new Date().getFullYear()\r\n\tconst month = (tryParseNumberAtIndex(d, 2 - offset) ?? 1) - 1\r\n\tconst day = tryParseNumberAtIndex(d, 3 - offset) ?? 1\r\n\tconst hour = tryParseNumberAtIndex(d, 4 - offset) ?? 0\r\n\tconst minute = tryParseNumberAtIndex(d, 5 - offset) ?? 0\r\n\tconst second = tryParseNumberAtIndex(d, 6 - offset) ?? 0\r\n\tconst millisecond = (tryParseNumberAtIndex(d, 7 - offset) ?? 0).toString().substring(0, 3) //d.length > 7 ? parseInt((d[7] ?? '0').substring(0, 3)) : 0\r\n\r\n\treturn new Date(\r\n\t\tyear,\r\n\t\tmonth,\r\n\t\tday,\r\n\t\thour,\r\n\t\tminute,\r\n\t\tsecond,\r\n\t\tparseInt(millisecond))\r\n}\r\nfunction parseDate(cfg : DayutsConfig) : Date|null {\r\n\tconst { date } = cfg\r\n\tif (date == null) return new Date()\r\n\tif (date instanceof Date) return date as Date\r\n\t\r\n\ttry {\r\n\t\tif (typeof date == 'string' && /^\\d+$/.test(date as string)) {\r\n\t\t\treturn new Date(parseInt(`${date}`.padEnd(13, '0')))\r\n\t\t}\r\n\t\tif (typeof date == 'string' && !/Z$/i.test(date as string)) {\r\n\t\t\tconst d = date.match(REGEX_PARSE)\r\n\r\n\r\n\r\n\r\n\t\t\tconst isNull = d == null|| Array.isArray(d) && d.length == 0\r\n\r\n\t\t\tif (!isNull) {\r\n\t\t\t\treturn createDateFromArray(d as (any|null)[])\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (typeof date == 'string') return new Date(date as string)\r\n\t\tif (Array.isArray(date)) {\r\n\t\t\treturn createDateFromArray(date as (any|null)[], 1)\r\n\t\t}\r\n\t\tif (isNumber(date)) return new Date(date as number)\r\n\t\treturn null//new Date()\r\n\t} catch(err) {\r\n\t\treturn null//new Date()\r\n\t}\r\n}\r\n\r\nfunction wrapper(date : any, instance : Dayuts) : Dayuts {\r\n\treturn dayuts(date, instance.$L)\r\n}\r\n\r\nexport class Dayuts {\r\n\t$L : string\r\n\tprivate valid: boolean = true; \r\n\tprivate $d : Date = new Date()\r\n\tprivate $y : number = 0\r\n\tprivate $M : number = 0\r\n\tprivate $D : number = 0\r\n\tprivate $W : number = 0\r\n\tprivate $H : number = 0\r\n\tprivate $m : number = 0\r\n\tprivate $s : number = 0\r\n\tprivate $ms : number = 0\r\n\tprivate $u : boolean = false\r\n\tconstructor(cfg : DayutsConfig) {\r\n\t\tthis.$L = parseLocale(cfg.locale) ?? dayutsIntl.locale //'en'\r\n\t\tthis.parse(cfg)\r\n\t}\r\n\tparse(cfg : DayutsConfig) {\r\n\t\tconst _d = parseDate(cfg)\r\n\t\tif(_d != null) {\r\n\t\t\tthis.$d = parseDate(cfg)!\r\n\t\t\tthis.init()\r\n\t\t} else {\r\n\t\t\tthis.valid = false\r\n\t\t}\r\n\t}\r\n\tinit() {\r\n\t\tconst { $d } = this\r\n\t\tthis.$y = $d.getFullYear()\r\n\t\tthis.$M = $d.getMonth()\r\n\t\tthis.$D = $d.getDate()\r\n\t\tthis.$W = $d.getDay()\r\n\t\tthis.$H = $d.getHours()\r\n\t\tthis.$m = $d.getMinutes()\r\n\t\tthis.$s = $d.getSeconds()\r\n\t\tthis.$ms = $d.getMilliseconds()\r\n\t}\r\n\t/**\r\n\t * 检查日期对象是否有效。\r\n\t *\r\n\t * @returns {boolean} 如果日期对象有效，则返回true；否则返回false。\r\n\t */\r\n\tisValid() : boolean {\r\n\t\treturn this.valid\r\n\t\t// return !(this.$d.toString() == INVALID_DATE_STRING)\r\n\t}\r\n\t/**\r\n\t * 检查当前日期是否与给定的日期在指定的时间单位内相同。\r\n\t *\r\n\t * @param {string|number|Date} input - 要比较的日期。\r\n\t * @param {string} units - 时间单位，例如'year'、'month'、'day'等。\r\n\t * @returns {boolean} 如果当前日期与给定的日期在指定的时间单位内相同，则返回true；否则返回false。\r\n\t */\r\n\tisSame(input : string) : boolean\r\n\tisSame(input : number) : boolean\r\n\tisSame(input : Date) : boolean\r\n\tisSame(input : Dayuts) : boolean\r\n\tisSame(input : UTSJSONObject) : boolean\r\n\r\n\tisSame(input : string, units : DayutsUnit) : boolean\r\n\tisSame(input : number, units : DayutsUnit) : boolean\r\n\tisSame(input : Date, units : DayutsUnit) : boolean\r\n\tisSame(input : Dayuts, units : DayutsUnit) : boolean\r\n\tisSame(input : UTSJSONObject, units : DayutsUnit) : boolean\r\n\tisSame(input : any, units : DayutsUnit = 'millisecond') : boolean {\r\n\t\tconst other = input instanceof Dayuts ? input : dayuts(input)\r\n\t\tconst date1 = this.startOf(units).valueOf()\r\n\t\tconst date2 = other.valueOf()\r\n\t\tconst date3 = this.endOf(units).valueOf()\r\n\t\treturn date1 <= date2 && date2 <= date3\r\n\t}\r\n\t/**\r\n\t * 检查给定的日期或时间是否在当前 dayuts 对象的指定时间单位之后。\r\n\t *\r\n\t * @param {string | number | Date | Dayuts} input - 要与当前 dayuts 对象进行比较的日期或时间。\r\n\t * @param {string} units - 要比较的时间单位（如 \"year\"、\"month\"、\"day\" 等）。\r\n\t * @returns {boolean} 如果给定的日期或时间在当前 dayuts 对象的指定时间单位之后，则返回 `true`，否则返回 `false`。\r\n\t */\r\n\tisAfter(input : string) : boolean\r\n\tisAfter(input : number) : boolean\r\n\tisAfter(input : Date) : boolean\r\n\tisAfter(input : Dayuts) : boolean\r\n\tisAfter(input : UTSJSONObject) : boolean\r\n\r\n\tisAfter(input : string, units : DayutsUnit) : boolean\r\n\tisAfter(input : number, units : DayutsUnit) : boolean\r\n\tisAfter(input : Date, units : DayutsUnit) : boolean\r\n\tisAfter(input : Dayuts, units : DayutsUnit) : boolean\r\n\tisAfter(input : UTSJSONObject, units : DayutsUnit) : boolean\r\n\tisAfter(input : any, units : DayutsUnit = 'millisecond') : boolean {\r\n\t\tconst other = input instanceof Dayuts ? input : dayuts(input)\r\n\t\tconst date1 = other.valueOf()\r\n\t\tconst date2 = this.startOf(units).valueOf()\r\n\t\treturn date1 < date2;\r\n\t}\r\n\t/**\r\n\t * 检查给定的日期或时间是否在当前 dayuts 对象的指定时间单位之前。\r\n\t *\r\n\t * @param {string | number | Date | Dayuts} input - 要与当前 dayuts 对象进行比较的日期或时间。\r\n\t * @param {string} units - 要比较的时间单位（如 \"year\"、\"month\"、\"day\" 等）。\r\n\t * @returns {boolean} 如果给定的日期或时间在当前 dayuts 对象的指定时间单位之前，则返回 `true`，否则返回 `false`。\r\n\t */\r\n\tisBefore(input : string) : boolean\r\n\tisBefore(input : number) : boolean\r\n\tisBefore(input : Date) : boolean\r\n\tisBefore(input : Dayuts) : boolean\r\n\tisBefore(input : UTSJSONObject) : boolean\r\n\r\n\tisBefore(input : string, units : DayutsUnit) : boolean\r\n\tisBefore(input : number, units : DayutsUnit) : boolean\r\n\tisBefore(input : Date, units : DayutsUnit) : boolean\r\n\tisBefore(input : Dayuts, units : DayutsUnit) : boolean\r\n\tisBefore(input : UTSJSONObject, units : DayutsUnit) : boolean\r\n\tisBefore(input : any, units : DayutsUnit = 'millisecond') : boolean {\r\n\t\tconst other = input instanceof Dayuts ? input : dayuts(input);\r\n\t\tconst date1 = other.valueOf()\r\n\t\tconst date2 = this.endOf(units).valueOf()\r\n\t\treturn date2 < date1;\r\n\t}\r\n\t/**\r\n\t * 判断当前Dayuts对象是否与给定的输入在同一时间或之前，根据指定的时间单位\r\n\t * @param {(string | number | Date | Dayuts | UTSJSONObject)} input - 输入的时间\r\n\t * @param {DayutsUnit} units - 指定的时间单位\r\n\t * @returns {boolean} - 如果当前Dayuts对象与给定的输入在同一时间或之前，则返回true，否则返回false\r\n\t */\r\n\tisSameOrBefore(input : string) : boolean\r\n\tisSameOrBefore(input : number) : boolean\r\n\tisSameOrBefore(input : Date) : boolean\r\n\tisSameOrBefore(input : Dayuts) : boolean\r\n\tisSameOrBefore(input : UTSJSONObject) : boolean\r\n\r\n\tisSameOrBefore(input : string, units : DayutsUnit) : boolean\r\n\tisSameOrBefore(input : number, units : DayutsUnit) : boolean\r\n\tisSameOrBefore(input : Date, units : DayutsUnit) : boolean\r\n\tisSameOrBefore(input : Dayuts, units : DayutsUnit) : boolean\r\n\tisSameOrBefore(input : UTSJSONObject, units : DayutsUnit) : boolean\r\n\tisSameOrBefore(input : any, units : DayutsUnit = 'millisecond') : boolean {\r\n\t\treturn this.isSame(input, units) || this.isBefore(input, units)\r\n\t}\r\n\t/**\r\n\t * 判断当前Dayuts对象是否与给定的输入在同一时间或之后，根据指定的时间单位\r\n\t * @param {(string | number | Date | Dayuts | UTSJSONObject)} input - 输入的时间\r\n\t * @param {DayutsUnit} units - 指定的时间单位\r\n\t * @returns {boolean} - 如果当前Dayuts对象与给定的输入在同一时间或之后，则返回true，否则返回false\r\n\t */\r\n\tisSameOrAfter(input : string) : boolean\r\n\tisSameOrAfter(input : number) : boolean\r\n\tisSameOrAfter(input : Date) : boolean\r\n\tisSameOrAfter(input : Dayuts) : boolean\r\n\tisSameOrAfter(input : UTSJSONObject) : boolean\r\n\r\n\tisSameOrAfter(input : string, units : DayutsUnit) : boolean\r\n\tisSameOrAfter(input : number, units : DayutsUnit) : boolean\r\n\tisSameOrAfter(input : Date, units : DayutsUnit) : boolean\r\n\tisSameOrAfter(input : Dayuts, units : DayutsUnit) : boolean\r\n\tisSameOrAfter(input : UTSJSONObject, units : DayutsUnit) : boolean\r\n\tisSameOrAfter(input : any, units : DayutsUnit = 'millisecond') : boolean {\r\n\t\treturn this.isSame(input, units) || this.isAfter(input, units)\r\n\t}\r\n\t/**\r\n\t * 判断当前Dayuts对象是否在给定的两个时间之间\r\n\t * @param {any} input - 第一个时间输入\r\n\t * @param {any} input2 - 第二个时间输入\r\n\t * @param {DayutsUnit} units - 指定的时间单位\r\n\t * @param {string} interval - 区间符号，表示区间的开闭性，默认为'()'，表示开区间\r\n\t * @returns {boolean} - 如果当前Dayuts对象在给定的两个时间之间，则返回true，否则返回false\r\n\t */\r\n\tisBetween(input : any, input2 : any, units : DayutsUnit = 'millisecond', interval : string = '()') : boolean {\r\n\t\tconst dA = dayuts(input)\r\n\t\tconst dB = dayuts(input2)\r\n\t\tconst dAi = interval.startsWith('(')\r\n\t\tconst dBi = interval.endsWith(')')\r\n\r\n\t\treturn ((dAi ? this.isAfter(dA, units) : !this.isBefore(dA, units)) &&\r\n\t\t\t(dBi ? this.isBefore(dB, units) : !this.isAfter(dB, units)))\r\n\t\t\t|| ((dAi ? this.isBefore(dA, units) : !this.isAfter(dA, units)) &&\r\n\t\t\t\t(dBi ? this.isAfter(dB, units) : !this.isBefore(dB, units)))\r\n\t}\r\n\t/**\r\n\t * 判断当前Dayuts对象所在的年份是否为闰年\r\n\t * @returns {boolean} - 如果当前Dayuts对象所在的年份是闰年，则返回true，否则返回false\r\n\t */\r\n\tisLeapYear():boolean{\r\n\t\t return ((this.$y % 4 == 0) && (this.$y % 100 != 0)) || (this.$y % 400 == 0)\r\n\t}\r\n\tisToday():boolean{\r\n\t\tconst comparisonTemplate = 'YYYY-MM-DD'\r\n\t\tconst now = dayuts()\r\n\t\t\r\n\t\treturn this.format(comparisonTemplate) == now.format(comparisonTemplate)\r\n\t}\r\n\t/**\r\n\t * 获取当前 `dayuts` 对象的 Unix 时间戳（以秒为单位）。\r\n\t *\r\n\t * @returns {number} 返回当前 `dayuts` 对象的 Unix 时间戳（以秒为单位）。\r\n\t */\r\n\tunix() : number {\r\n\t\treturn Math.floor(this.valueOf() / 1000);\r\n\t}\r\n\t/**\r\n\t * 将当前日期设置为指定时间单位的开始或结束。\r\n\t *\r\n\t * @param {string} units - 时间单位，例如'year'、'month'、'day'等。\r\n\t * @param {boolean} startOf - 如果为true，则设置为开始；如果为false，则设置为结束。\r\n\t * @returns {Dayuts} 返回一个新的Dayuts对象，表示调整后的日期。\r\n\t */\r\n\tstartOf(units : DayutsUnit, startOf : boolean = true) : Dayuts {\r\n\t\tconst isStartOf = startOf;\r\n\t\tconst unit = prettyUnit(units)\r\n\t\t// instanceFactory 函数用于创建一个新的 Dayuts 对象，表示给定日期的开始或结束。\r\n\t\t// 参数 d 和 m 分别表示日期和月份。\r\n\t\tconst instanceFactory = (d : number, m : number) : Dayuts => {\r\n\t\t\tconst ins = dayuts(new Date(this.$y, m, d))\r\n\t\t\treturn isStartOf ? ins : ins.endOf(D)\r\n\t\t}\r\n\r\n\t\t// instanceFactorySet 函数用于创建一个新的 Dayuts 对象，表示调整后的时间。\r\n\t\t// 参数 method 表示要调用的 Date 对象的方法（如 'setHours'），slice 表示要调整的时间部分的索引。\r\n\t\tconst instanceFactorySet = (method : string, slice : number) : Dayuts => {\r\n\t\t\t// 定义表示开始和结束时间的参数数组。\r\n\t\t\tconst argumentStart = [0, 0, 0, 0]\r\n\t\t\tconst argumentEnd = [23, 59, 59, 999]\r\n\t\t\t// 根据 isStartOf 的值，选择开始或结束时间的参数数组，并调用 Date 对象的方法。\r\n\t\t\tconst args = (isStartOf ? argumentStart : argumentEnd).slice(slice)\r\n\t\t\tconst date = this.toDate()\r\n\t\t\tif (method == 'setHours') {\r\n\t\t\t\tdate.setHours(args[0]);\r\n\t\t\t\tdate.setMinutes(args[1])\r\n\t\t\t\tdate.setSeconds(args[2])\r\n\t\t\t\tdate.setMilliseconds(args[3])\r\n\t\t\t} else if (method == 'setMinutes') {\r\n\t\t\t\tdate.setMinutes(args[0]);\r\n\t\t\t\tdate.setSeconds(args[1])\r\n\t\t\t\tdate.setMilliseconds(args[2])\r\n\t\t\t} else if (method == 'setSeconds') {\r\n\t\t\t\tdate.setSeconds(args[0])\r\n\t\t\t\tdate.setMilliseconds(args[1])\r\n\t\t\t} else if (method == 'setMilliseconds') {\r\n\t\t\t\tdate.setMilliseconds(args[0])\r\n\t\t\t}\r\n\t\t\treturn dayuts(date)\r\n\t\t}\r\n\t\tconst { $W, $M, $D } = this\r\n\t\tconst utcPad = `set${this.$u ? 'UTC' : ''}`\r\n\t\tif (unit == Y) {\r\n\t\t\treturn isStartOf ? instanceFactory(1, 0) : instanceFactory(31, 11);\r\n\t\t} else if (unit == M) {\r\n\t\t\treturn isStartOf ? instanceFactory(1, $M) : instanceFactory(0, $M + 1);\r\n\t\t} else if (unit == W) {\r\n\t\t\tconst weekStart = this.$locale().weekStart ?? 0;\r\n\t\t\tconst gap = ($W < weekStart ? $W + 7 : $W) - weekStart;\r\n\t\t\treturn instanceFactory(isStartOf ? $D - gap : $D + (6 - gap), $M);\r\n\t\t} else if (unit == D || unit == DATE) {\r\n\t\t\treturn instanceFactorySet(`${utcPad}Hours`, 0);\r\n\t\t} else if (unit == H) {\r\n\t\t\treturn instanceFactorySet(`${utcPad}Minutes`, 1);\r\n\t\t} else if (unit == MIN) {\r\n\t\t\treturn instanceFactorySet(`${utcPad}Seconds`, 2);\r\n\t\t} else if (unit == S) {\r\n\t\t\treturn instanceFactorySet(`${utcPad}Milliseconds`, 3);\r\n\t\t} else {\r\n\t\t\treturn this.clone();\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * 将当前日期设置为指定时间单位的结束。\r\n\t *\r\n\t * @param {string} arg - 时间单位，例如'year'、'month'、'day'等。\r\n\t * @returns {Dayuts} 返回一个新的Dayuts对象，表示调整后的日期。\r\n\t */\r\n\tendOf(units : DayutsUnit) : Dayuts {\r\n\t\treturn this.startOf(units, false)\r\n\t}\r\n\t/**\r\n\t * 设置指定的时间单位的值。\r\n\t *\r\n\t * @param {string} units - 要设置的时间单位（如 \"year\"、\"month\"、\"day\" 等）。\r\n\t * @param {number} int - 要设置的值。\r\n\t * @returns {Dayuts} 返回当前对象。\r\n\t */\r\n\tprivate $set(units : DayutsUnit, int : number) : Dayuts { // private set\r\n\t\tconst unit = prettyUnit(units)\r\n\t\t// const utcPad = `set${this.$u ? 'UTC' : ''}`\r\n\t\tconst arg = unit == D ? this.$D + (int - this.$W) : int\r\n\t\tconst setDateUnit = (date : Dayuts, unit : DayutsUnit, arg : number) => {\r\n\t\t\tif (unit == D || unit == DATE) {\r\n\t\t\t\tdate.$d.setDate(arg);\r\n\t\t\t} else if (unit == M) {\r\n\t\t\t\tdate.$d.setMonth(arg);\r\n\t\t\t} else if (unit == Y) {\r\n\t\t\t\tdate.$d.setFullYear(arg);\r\n\t\t\t} else if (unit == H) {\r\n\t\t\t\tdate.$d.setHours(arg);\r\n\t\t\t} else if (unit == MIN) {\r\n\t\t\t\tdate.$d.setMinutes(arg);\r\n\t\t\t} else if (unit == S) {\r\n\t\t\t\tdate.$d.setSeconds(arg);\r\n\t\t\t} else if (unit == MS) {\r\n\t\t\t\tdate.$d.setMilliseconds(arg);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (unit == M || unit == Y) {\r\n\t\t\t// clone is for badMutable plugin\r\n\t\t\tconst date = this.clone().set(DATE, 1)\r\n\t\t\t// date.$d[name](arg)\r\n\t\t\tsetDateUnit(date, unit, arg)\r\n\t\t\tdate.init()\r\n\t\t\tthis.$d = date.set(DATE, Math.min(this.$D, date.daysInMonth())).$d\r\n\t\t} else {\r\n\t\t\tsetDateUnit(this, unit, arg)\r\n\t\t\t// this.$d[name](arg)\r\n\t\t}\r\n\r\n\t\tthis.init()\r\n\t\treturn this\r\n\t}\r\n\t/**\r\n\t * 创建一个当前对象的副本，并设置指定的时间单位的值。\r\n\t *\r\n\t * @param {string} string - 要设置的时间单位（如 \"year\"、\"month\"、\"day\" 等）。\r\n\t * @param {number} int - 要设置的值。\r\n\t * @returns {Dayuts} 返回一个新的 `dayuts` 对象，其值为当前对象的副本，并设置了指定的时间单位的值。\r\n\t */\r\n\tset(string : DayutsUnit, int : number) : Dayuts {\r\n\t\treturn this.clone().$set(string, int);\r\n\t}\r\n\t/**\r\n\t * 获取当前 `dayuts` 对象的指定时间单位的值。\r\n\t *\r\n\t * @param {string} units - 要获取的时间单位（如 \"year\"、\"month\"、\"day\" 等）。\r\n\t * @returns {number} 返回当前 `dayuts` 对象的指定时间单位的值。\r\n\t */\r\n\tget(units : DayutsUnit) : number {\r\n\t\tconst unit = prettyUnit(units)\r\n\t\tif (unit == D) {\r\n\t\t\treturn this.day()\r\n\t\t} else if (unit == DATE) {\r\n\t\t\treturn this.date()\r\n\t\t} else if (unit == M) {\r\n\t\t\treturn this.month()\r\n\t\t} else if (unit == Y) {\r\n\t\t\treturn this.year()\r\n\t\t} else if (unit == H) {\r\n\t\t\treturn this.hour()\r\n\t\t} else if (unit == MIN) {\r\n\t\t\treturn this.minute()\r\n\t\t} else if (unit == S) {\r\n\t\t\treturn this.second()\r\n\t\t} else if (unit == MS) {\r\n\t\t\treturn this.millisecond()\r\n\t\t}\r\n\t\treturn 0\r\n\t}\r\n\t/**\r\n\t * 获取或设置年份。\r\n\t * @param {number | null} [input] - 要设置的年份。\r\n\t * @returns {number | Dayuts} 年份或 Dayuts 实例。\r\n\t */\r\n\tyear() : number\r\n\tyear(input : number) : Dayuts\r\n\tyear(input : number | null = null) : any {\r\n\t\tif (input == null) return this.$y\r\n\t\treturn this.set(Y, input)\r\n\t}\r\n\t/**\r\n\t * 获取或设置月份。\r\n\t * @param {number | null} [input] - 要设置的月份（0-11）。\r\n\t * @returns {number | Dayuts} 月份或 Dayuts 实例。\r\n\t */\r\n\tmonth() : number\r\n\tmonth(input : number) : Dayuts\r\n\tmonth(input : number | null = null) : any {\r\n\t\tif (input == null) return this.$M\r\n\t\treturn this.set(M, input)\r\n\t}\r\n\t/**\r\n\t * 获取或设置星期几。\r\n\t * @param {number | null} [input] - 要设置的星期几（0-6）。\r\n\t * @returns {number | Dayuts} 星期几或 Dayuts 实例。\r\n\t */\r\n\tday() : number\r\n\tday(input : number) : Dayuts\r\n\tday(input : number | null = null) : any {\r\n\t\tif (input == null) return this.$W\r\n\t\treturn this.set(D, input)\r\n\t}\r\n\t/**\r\n\t * 获取或设置月份中的某一天。\r\n\t * @param {number | null} [input] - 要设置的月份中的某一天（1-31）。\r\n\t * @returns {number | Dayuts} 月份中的某一天或 Dayuts 实例。\r\n\t */\r\n\tdate() : number\r\n\tdate(input : number) : Dayuts\r\n\tdate(input : number | null = null) : any {\r\n\t\tif (input == null) return this.$D\r\n\t\treturn this.set(DATE, input)\r\n\t}\r\n\t/**\r\n\t * 获取或设置小时。\r\n\t * @param {number | null} [input] - 要设置的小时（0-23）。\r\n\t * @returns {number | Dayuts} 小时或 Dayuts 实例。\r\n\t */\r\n\thour() : number\r\n\thour(input : number) : Dayuts\r\n\thour(input : number | null = null) : any {\r\n\t\tif (input == null) return this.$H\r\n\t\treturn this.set(H, input)\r\n\t}\r\n\t/**\r\n\t * 获取或设置分钟。\r\n\t * @param {number | null} [input] - 要设置的分钟（0-59）。\r\n\t * @returns {number | Dayuts} 分钟或 Dayuts 实例。\r\n\t */\r\n\tminute() : number\r\n\tminute(input : number) : Dayuts\r\n\tminute(input : number | null = null) : any {\r\n\t\tif (input == null) return this.$m\r\n\t\treturn this.set(MIN, input)\r\n\t}\r\n\t/**\r\n\t * 获取或设置秒。\r\n\t * @param {number | null} [input] - 要设置的秒（0-59）。\r\n\t * @returns {number | Dayuts} 秒或 Dayuts 实例。\r\n\t */\r\n\tsecond() : number\r\n\tsecond(input : number) : Dayuts\r\n\tsecond(input : number | null = null) : any {\r\n\t\tif (input == null) return this.$s\r\n\t\treturn this.set(S, input)\r\n\t}\r\n\t/**\r\n\t * 获取或设置毫秒。\r\n\t * @param {number | null} [input] - 要设置的毫秒（0-999）。\r\n\t * @returns {number | Dayuts} 毫秒或 Dayuts 实例。\r\n\t */\r\n\tmillisecond() : number\r\n\tmillisecond(input : number) : Dayuts\r\n\tmillisecond(input : number | null = null) : any {\r\n\t\tif (input == null) return this.$ms\r\n\t\treturn this.set(MS, input)\r\n\t}\r\n\r\n\t/**\r\n\t * 在当前 Dayuts 实例上添加指定的时间长度。\r\n\t * @param {number} number - 要添加的时间长度。\r\n\t * @param {string} units - 要添加的时间单位（例如，“years”，“months”，“days”等）。\r\n\t * @returns {Dayuts} 更新的 Dayuts 实例。\r\n\t */\r\n\tadd(number : number, units : DayutsUnit) : Dayuts {\r\n\t\tconst unit = prettyUnit(units)\r\n\t\t// 创建一个新的 Dayuts 实例，并根据给定的 n 值设置日期。\r\n\t\t// n 值乘以 number 参数，然后加到当前日期上，以设置新的日期。\r\n\t\tconst instanceFactorySet = (n : number) : Dayuts => {\r\n\t\t\t// 创建一个新的 Dayuts 实例，它是当前实例的副本\r\n\t\t\tconst d = dayuts(this)\r\n\t\t\t// 设置新的日期并返回更新后的 Dayuts 实例\r\n\t\t\treturn d.date(d.date() + Math.round(n * number)) //Utils.w(d.date(d.date() + Math.round(n * number)), this)\r\n\t\t}\r\n\t\tif (unit == M) {\r\n\t\t\treturn this.set(M, this.$M + number)\r\n\t\t}\r\n\t\tif (unit == Y) {\r\n\t\t\treturn this.set(Y, this.$y + number)\r\n\t\t}\r\n\t\tif (unit == D) {\r\n\t\t\treturn instanceFactorySet(1)\r\n\t\t}\r\n\t\tif (unit == W) {\r\n\t\t\treturn instanceFactorySet(7)\r\n\t\t}\r\n\r\n\t\tconst steps = new Map<string, number>([\r\n\t\t\t[MIN, MILLISECONDS_A_MINUTE],\r\n\t\t\t[H, MILLISECONDS_A_HOUR],\r\n\t\t\t[S, MILLISECONDS_A_SECOND],\r\n\t\t])\r\n\t\tconst step = steps.get(unit) ?? 1;\r\n\t\tconst nextTimeStamp = this.$d.getTime() + (number * step)\r\n\t\treturn wrapper(nextTimeStamp, this)\r\n\t}\r\n\t/**\r\n\t * 从当前 Dayuts 实例中减去指定的时间。\r\n\t * @param {number} number - 要减去的时间。\r\n\t * @param {string} units - 要减去的时间单位（例如，“years”，“months”，“days”等）。\r\n\t * @returns {Dayuts} 更新的 Dayuts 实例。\r\n\t */\r\n\tsubtract(number : number, units : DayutsUnit) : Dayuts {\r\n\t\t// 通过将 number 乘以 -1，然后调用 add 方法来实现减法操作\r\n\t\treturn this.add(number * -1, units);\r\n\t}\r\n\t/**\r\n\t * 日期格式化\r\n\t * @param {string} formatStr - 格式化字符串，包含各种格式化占位符（例如，“YYYY-MM-DD”，“HH:mm:ss”等）。\r\n\t * @returns {string} 格式化后的日期字符串。\r\n\t */\r\n\tformat(formatStr : string | null = null) : string {\r\n\t\tconst locale = this.$locale();\r\n\t\tif (!this.isValid()) return INVALID_DATE_STRING // locale.invalidDate || INVALID_DATE_STRING;\r\n\r\n\t\tconst str = formatStr ?? FORMAT_DEFAULT;\r\n\t\t// @ts-ignore\r\n\t\tconst zoneStr = padZoneStr(this);\r\n\t\tconst { $H, $m, $M } = this;\r\n\t\tconst { weekdays, months, meridiem } = locale;\r\n\t\t/**\r\n\t\t * 从给定的数组中获取缩写或完整的字符串。\r\n\t\t * @param {Array} arr - 包含缩写字符串的数组。\r\n\t\t * @param {number} index - 数组中要获取的元素的索引。\r\n\t\t * @param {Array} full - 包含完整字符串的数组。\r\n\t\t * @param {number} length - 要返回的字符串的长度。\r\n\t\t * @returns {string} 缩写或完整的字符串。\r\n\t\t */\r\n\t\tfunction getShort(arr : string[] | null, index : number, full : string[] = [], length : number = 0) : string {\r\n\t\t\tif (arr != null && arr.length >= index) {\r\n\t\t\t\treturn arr[index]\r\n\t\t\t} else if (full.length >= index) {\r\n\t\t\t\treturn full[index].slice(0, length)\r\n\t\t\t}\r\n\t\t\treturn ''\r\n\t\t};\r\n\t\t/**\r\n\t\t * 获取12小时制的小时数。\r\n\t\t * @param {number} num - 小时数的位数。\r\n\t\t * @returns {string} 12小时制的小时数字符串。\r\n\t\t */\r\n\t\tconst get$H = (num : number) : string => padStart(($H % 12 == 0 ? 12 : $H % 12).toString(), num, '0')\r\n\t\t/**\r\n\t\t * 获取上午或下午的字符串表示。\r\n\t\t * @param {number} hour - 小时数。\r\n\t\t * @param {number} minute - 分钟数。\r\n\t\t * @param {boolean} isLowercase - 是否返回小写字符串。\r\n\t\t * @returns {string} 上午或下午的字符串表示。\r\n\t\t */\r\n\t\tconst meridiemFunc = meridiem ?? ((hour : number, _ : number, isLowercase : boolean) : string => {\r\n\t\t\tconst m = (hour < 12 ? 'AM' : 'PM');\r\n\t\t\treturn isLowercase ? m.toLowerCase() : m;\r\n\t\t});\r\n\r\n\t\treturn str.replace('YYYY', padStart(this.$y.toString(), 4, '0'))\r\n\t\t\t.replace('YY', (this.$y).toString().slice(-2))\r\n\t\t\t.replace('MMMM', getShort(months, $M))\r\n\t\t\t.replace('MM', padStart(($M + 1).toString(), 2, '0'))\r\n\t\t\t.replace('M', ($M + 1).toString())\r\n\t\t\t.replace('DD', padStart(this.$D.toString(), 2, '0'))\r\n\t\t\t.replace('D', this.$D.toString())\r\n\t\t\t.replace('dddd', weekdays[this.$W])\r\n\t\t\t.replace('ddd', getShort(locale.weekdaysShort, this.$W, weekdays, 3))\r\n\t\t\t.replace('dd', getShort(locale.weekdaysMin, this.$W, weekdays, 2))\r\n\t\t\t.replace('d', this.$W.toString())\r\n\t\t\t.replace('HH', padStart($H.toString(), 2, '0'))\r\n\t\t\t.replace('H', $H.toString())\r\n\t\t\t.replace('hh', get$H(2))\r\n\t\t\t.replace('h', get$H(1))\r\n\t\t\t.replace('mm', padStart($m.toString(), 2, '0'))\r\n\t\t\t.replace('m', $m.toString())\r\n\t\t\t.replace('ss', padStart(this.$s.toString(), 2, '0'))\r\n\t\t\t.replace('s', this.$s.toString())\r\n\t\t\t.replace('SSS', padStart(this.$ms.toString(), 3, '0'))\r\n\t\t\t.replace('A', meridiemFunc($H, $m, false))\r\n\t\t\t.replace('a', meridiemFunc($H, $m, true))\r\n\t\t\t.replace('Z', zoneStr)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\t}\r\n\t/**\r\n\t * 获取 Dayuts 实例的 UTC 偏移量（以分钟为单位）。\r\n\t * @returns {number} UTC 偏移量（以分钟为单位）。\r\n\t */\r\n\tutcOffset() : number {\r\n\t\t// Because a bug at FF24, we're rounding the timezone offset around 15 minutes\r\n\t\t// https://github.com/moment/moment/pull/1871\r\n\r\n\r\n\r\n\r\n\t\treturn 0\r\n\r\n\t}\r\n\t/**\r\n\t * 计算两个日期之间的差值\r\n\t * @param {string|number|Date|Dayuts} input - 要比较的日期\r\n\t * @param {string} units - 要计算的时间单位，如 'years', 'months', 'weeks', 'days', 'hours', 'minutes', 'seconds'\r\n\t * @param {boolean} float - 是否返回浮点数结果\r\n\t * @returns {number} 返回两个日期之间的差值\r\n\t */\r\n\tdiff(input : string) : number\r\n\tdiff(input : number) : number\r\n\tdiff(input : Date) : number\r\n\tdiff(input : Dayuts) : number\r\n\tdiff(input : UTSJSONObject) : number\r\n\r\n\tdiff(input : string, units : DayutsUnit) : number\r\n\tdiff(input : number, units : DayutsUnit) : number\r\n\tdiff(input : Date, units : DayutsUnit) : number\r\n\tdiff(input : Dayuts, units : DayutsUnit) : number\r\n\tdiff(input : UTSJSONObject, units : DayutsUnit) : number\r\n\r\n\tdiff(input : string, units : DayutsUnit, float : boolean) : number\r\n\tdiff(input : number, units : DayutsUnit, float : boolean) : number\r\n\tdiff(input : Date, units : DayutsUnit, float : boolean) : number\r\n\tdiff(input : Dayuts, units : DayutsUnit, float : boolean) : number\r\n\tdiff(input : UTSJSONObject, units : DayutsUnit, float : boolean) : number\r\n\tdiff(input : any, units : DayutsUnit = 'millisecond', float : boolean = false) : number {\r\n\t\tconst unit = prettyUnit(units)\r\n\t\tconst that = dayuts(input)\r\n\t\tconst zoneDelta = (that.utcOffset() - this.utcOffset()) * MILLISECONDS_A_MINUTE\r\n\t\tconst diff = this.valueOf() - that.valueOf()\r\n\t\t// @ts-ignore\r\n\t\tconst getMonth = () : number => monthDiff(this, that)\r\n\t\tlet result : number;\r\n\t\tswitch (unit) {\r\n\t\t\tcase Y:\r\n\t\t\t\tresult = getMonth() / 12\r\n\t\t\t\tbreak\r\n\t\t\tcase M:\r\n\t\t\t\tresult = getMonth()\r\n\t\t\t\tbreak\r\n\t\t\tcase Q:\r\n\t\t\t\tresult = getMonth() / 3\r\n\t\t\t\tbreak\r\n\t\t\tcase W:\r\n\t\t\t\tresult = (diff - zoneDelta) / MILLISECONDS_A_WEEK\r\n\t\t\t\tbreak\r\n\t\t\tcase D:\r\n\t\t\t\tresult = (diff - zoneDelta) / MILLISECONDS_A_DAY\r\n\t\t\t\tbreak\r\n\t\t\tcase H:\r\n\t\t\t\tresult = diff / MILLISECONDS_A_HOUR\r\n\t\t\t\tbreak\r\n\t\t\tcase MIN:\r\n\t\t\t\tresult = diff / MILLISECONDS_A_MINUTE\r\n\t\t\t\tbreak\r\n\t\t\tcase S:\r\n\t\t\t\tresult = diff / MILLISECONDS_A_SECOND\r\n\t\t\t\tbreak\r\n\t\t\tdefault:\r\n\t\t\t\tresult = diff // milliseconds\r\n\t\t\t\tbreak\r\n\t\t}\r\n\r\n\t\treturn float ? result : absFloor(result)\r\n\t}\r\n\t/**\r\n\t * 将当前 Dayuts 对象转换为原生 Date 对象。\r\n\t *\r\n\t * @returns {Date} 返回一个表示当前日期的原生 Date 对象。\r\n\t */\r\n\ttoDate() : Date {\r\n\t\treturn new Date(this.valueOf())\r\n\t}\r\n\t/**\r\n\t * 将 Moment 对象转换为 JSON 字符串\r\n\t * @returns {string | null} 如果 Moment 对象有效，则返回 ISO 8601 格式的字符串，否则返回 null\r\n\t */\r\n\ttoJSON() : string | null {\r\n\t\treturn this.isValid() ? this.toISOString() : null;\r\n\t}\r\n\t/**\r\n\t * 将 Moment 对象转换为 ISO 8601 格式的字符串\r\n\t * @returns {string} 返回 ISO 8601 格式的字符串\r\n\t */\r\n\ttoISOString() : string {\r\n\r\n\r\n\r\n\r\n\t\treturn this.$d.toString();\r\n\r\n\t}\r\n\ttoObject() : DayutsObject {\r\n\t\treturn {\r\n\t\t\tyears: this.$y,\r\n\t\t\tmonths: this.$M,\r\n\t\t\tdate: this.$D,\r\n\t\t\thours: this.$H,\r\n\t\t\tminutes: this.$m,\r\n\t\t\tseconds: this.$s,\r\n\t\t\tmilliseconds: this.$ms\r\n\t\t} as DayutsObject\r\n\t}\r\n\ttoArray() : number[] {\r\n\t\treturn [\r\n\t\t\tthis.$y,\r\n\t\t\tthis.$M,\r\n\t\t\tthis.$D,\r\n\t\t\tthis.$H,\r\n\t\t\tthis.$m,\r\n\t\t\tthis.$s,\r\n\t\t\tthis.$ms\r\n\t\t]\r\n\t}\r\n\t/**\r\n\t * 获取当前日期的毫秒数。\r\n\t *\r\n\t * @returns {number} 返回一个表示当前日期的毫秒数。\r\n\t */\r\n\tvalueOf() : number {\r\n\t\t// 使用 Date 对象的 getTime 方法获取当前日期的毫秒数。\r\n\t\treturn this.$d.getTime()\r\n\t}\r\n\t/**\r\n\t * 获取当前 `dayuts` 对象所在月份的天数。\r\n\t *\r\n\t * @returns {number} 返回当前 `dayuts` 对象所在月份的天数。\r\n\t */\r\n\tdaysInMonth() : number {\r\n\t\treturn this.endOf(M).$D;\r\n\t}\r\n\r\n\t/**\r\n\t * 获取当前日期的区域设置对象。\r\n\t *\r\n\t * @returns {Object} 区域设置对象。\r\n\t */\r\n\tprivate $locale() : DayutsLocale { // get locale object\r\n\t\t// return Ls.get(this.$L)!\r\n\t\treturn localeState.locales.get(this.$L)!\r\n\t}\r\n\t/**\r\n\t * 设置或获取 Dayuts 实例的本地化配置\r\n\t * @param {string|Object} preset - 本地化预设名称或自定义本地化配置对象\r\n\t * @param {Object} [DayutsLocale] - 可选的自定义本地化配置对象\r\n\t * @returns {Dayuts|string} 如果设置了本地化配置，则返回一个新的 Dayuts 实例；否则返回当前实例的本地化配置名称\r\n\t */\r\n\tlocale(preset : string, object : DayutsLocale) : Dayuts\r\n\tlocale(preset : DayutsLocale, object : DayutsLocale) : Dayuts\r\n\tlocale(preset : any, object : DayutsLocale | null = null) : Dayuts {\r\n\t\t// if (!preset) return this.$L\r\n\t\tconst that = this.clone()\r\n\t\tconst nextLocaleName = parseLocale(preset, object, true)\r\n\t\tif (nextLocaleName != null) that.$L = nextLocaleName\r\n\t\treturn that\r\n\t}\r\n\tclone() : Dayuts {\r\n\t\treturn wrapper(this.$d.getTime(), this)\r\n\t}\r\n\t/**\r\n\t * 返回当前 dayuts 对象的 UTC 字符串表示。\r\n\t *\r\n\t * @returns {string} 当前 dayuts 对象的 UTC 字符串表示。\r\n\t */\r\n\r\n\toverride toString() : string {\r\n\t\t// return this.$d.toUTCString();\r\n\t\t// const locale = localeState.locales.get('en')!\r\n\t\t// const weekday = locale.weekdays[this.$d.getDay()].substring(0,3);\r\n\t\t// const month = locale.months[this.$d.getMonth()].substring(0,3)\r\n\t\t// const day = `${this.$D}`.padStart(2, '0');\r\n\t\t// const hours = `${this.$H}`.padStart(2, '0');\r\n\t\t// const minutes = `${this.$m}`.padStart(2, '0');\r\n\t\t// const seconds = `${this.$s}`.padStart(2, '0');\r\n\t\t// return `${weekday}, ${day} ${month} ${this.$y} ${hours}:${minutes}:${seconds} GMT`;\r\n\t\treturn this.$d.toString();\r\n\t}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\t/**\r\n\t * 计算给定日期在当年的第几天，或者设置给定日期为当年的第几天。\r\n\t * @param {number} [input] - 如果提供了输入值，则将日期设置为当年的第几天。如果没有提供输入值，则返回当前日期在当年的第几天。\r\n\t * @returns {number} 如果提供了输入值，则返回调整后的日期。如果没有提供输入值，则返回当前日期在当年的第几天。\r\n\t */\r\n\tdayOfYear() : number\r\n\tdayOfYear(input : number) : Dayuts\r\n\tdayOfYear(input : number | null = null) : any {\r\n\t\tconst dayOfYear = Math.round((this.startOf('day').valueOf() - this.startOf('year').valueOf()) / 864e5) + 1\r\n\t\treturn input == null ? dayOfYear : this.add(input - dayOfYear, 'day')\r\n\t}\r\n\t/**\r\n\t * 根据输入的时间计算与当前时间的相对时间差，并以指定的格式返回。\r\n\t * @param {Date|number|string} input - 输入的时间，可以是Date对象、时间戳或符合Date.parse()方法的字符串\r\n\t * @param {boolean} withoutSuffix - 是否省略“未来”或“过去”的后缀\r\n\t * @param {Object} instance - 当前时间的实例\r\n\t * @param {boolean} isFrom - 是否从输入时间计算到当前时间\r\n\t * @param {Function} postFormat - 格式化绝对值后的结果的函数\r\n\t * @returns {string} 相对时间差的格式化字符串\r\n\t */\r\n\t// postFormat\r\n\tfromToBase(input : string, withoutSuffix : boolean, instance : Dayuts, isFrom : boolean) : string\r\n\tfromToBase(input : number, withoutSuffix : boolean, instance : Dayuts, isFrom : boolean) : string\r\n\tfromToBase(input : Date, withoutSuffix : boolean, instance : Dayuts, isFrom : boolean) : string\r\n\tfromToBase(input : Dayuts, withoutSuffix : boolean, instance : Dayuts, isFrom : boolean) : string\r\n\tfromToBase(input : UTSJSONObject, withoutSuffix : boolean, instance : Dayuts, isFrom : boolean) : string\r\n\tfromToBase(input : any, withoutSuffix : boolean, instance : Dayuts, isFrom : boolean) : string {\r\n\t\tconst relObj = localeState.locales.get('en')?.relativeTime\r\n\t\tconst loc = instance.$locale().relativeTime ?? relObj\r\n\t\tif (loc == null) return '';\r\n\t\tconst T : Threshold[] = [\r\n\t\t\t{ l: 's', r: 44, d: S },\r\n\t\t\t{ l: 'm', r: 89 },\r\n\t\t\t{ l: 'mm', r: 44, d: MIN },\r\n\t\t\t{ l: 'h', r: 89 },\r\n\t\t\t{ l: 'hh', r: 21, d: H },\r\n\t\t\t{ l: 'd', r: 35 },\r\n\t\t\t{ l: 'dd', r: 25, d: D },\r\n\t\t\t{ l: 'M', r: 45 },\r\n\t\t\t{ l: 'MM', r: 10, d: M },\r\n\t\t\t{ l: 'y', r: 17 },\r\n\t\t\t{ l: 'yy', d: Y }\r\n\t\t]\r\n\t\tconst Tl = T.length\r\n\t\tlet result : number = 0;\r\n\t\tlet out : string = '';\r\n\t\tlet isFuture : boolean = false\r\n\t\tfor (let i = 0; i < Tl; i += 1) {\r\n\t\t\tlet t = T[i]\r\n\t\t\tif (t.d != null) {\r\n\t\t\t\tresult = isFrom\r\n\t\t\t\t\t? dayuts(input).diff(instance, t.d!, true)\r\n\t\t\t\t\t: instance.diff(input, t.d!, true)\r\n\t\t\t}\r\n\t\t\tlet abs = Math.round(Math.abs(result))\r\n\t\t\tisFuture = result > 0\r\n\t\t\tif (t.r == null || t.r != null && abs <= t.r!) {\r\n\t\t\t\tif (abs <= 1 && i > 0) t = T[i - 1] // 1 minutes -> a minute, 0 seconds -> 0 second\r\n\t\t\t\tconst format = loc[t.l]\r\n\t\t\t\t// if (postFormat) {\r\n\t\t\t\t// \tabs = postFormat(`${abs}`)\r\n\t\t\t\t// }\r\n\t\t\t\tif (typeof format == 'string') {\r\n\t\t\t\t\tout = (format as string).replace('%d', abs.toString())\r\n\t\t\t\t}\r\n\t\t\t\t// else {\r\n\t\t\t\t// \tout = format(abs, withoutSuffix, t.l!, isFuture)\r\n\t\t\t\t// }\r\n\t\t\t\tbreak\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (withoutSuffix) return out\r\n\t\tconst pastOrFuture = isFuture ? loc.future : loc.past\r\n\t\t// if (typeof pastOrFuture == 'function') {\r\n\t\t// \treturn pastOrFuture(out)\r\n\t\t// }\r\n\t\treturn pastOrFuture.replace('%s', out)\r\n\t}\r\n\t/**\r\n\t * 相对指定时间(后)。\r\n\t * @param {string|number|Date|Dayuts|UTSJSONObject} input - 输入的时间，可以是字符串、数字（时间戳）、Date对象、Dayuts对象或UTSJSONObject。\r\n\t * @param {boolean} withoutSuffix - 是否省略“未来”或“过去”的后缀。\r\n\t * @returns {string} 相对时间差的格式化字符串。\r\n\t */\r\n\tto(input : string) : string\r\n\tto(input : number) : string\r\n\tto(input : Date) : string\r\n\tto(input : Dayuts) : string\r\n\tto(input : UTSJSONObject) : string\r\n\r\n\tto(input : string, withoutSuffix : boolean) : string\r\n\tto(input : number, withoutSuffix : boolean) : string\r\n\tto(input : Date, withoutSuffix : boolean) : string\r\n\tto(input : Dayuts, withoutSuffix : boolean) : string\r\n\tto(input : UTSJSONObject, withoutSuffix : boolean) : string\r\n\tto(input : any, withoutSuffix : boolean = false) : string {\r\n\t\treturn this.fromToBase(input, withoutSuffix, this, true)\r\n\t}\r\n\t/**\r\n\t * 将当前时间转换为与输入时间的相对时间差，并以指定的格式返回。\r\n\t * @param {string|number|Date|Dayuts|UTSJSONObject} input - 输入的时间，可以是字符串、数字（时间戳）、Date对象、Dayuts对象或UTSJSONObject。\r\n\t * @param {boolean} withoutSuffix - 是否省略“未来”或“过去”的后缀。\r\n\t * @returns {string} 相对时间差的格式化字符串。\r\n\t */\r\n\tfrom(input : string) : string\r\n\tfrom(input : number) : string\r\n\tfrom(input : Date) : string\r\n\tfrom(input : Dayuts) : string\r\n\tfrom(input : UTSJSONObject) : string\r\n\r\n\tfrom(input : string, withoutSuffix : boolean) : string\r\n\tfrom(input : number, withoutSuffix : boolean) : string\r\n\tfrom(input : Date, withoutSuffix : boolean) : string\r\n\tfrom(input : Dayuts, withoutSuffix : boolean) : string\r\n\tfrom(input : UTSJSONObject, withoutSuffix : boolean) : string\r\n\tfrom(input : any, withoutSuffix : boolean = false) : string {\r\n\t\treturn this.fromToBase(input, withoutSuffix, this, false)\r\n\t}\r\n\t/**\r\n\t * 获取当前时间与实例时间的相对时间差，并以指定的格式返回。\r\n\t * @param {boolean} withoutSuffix - 是否省略“未来”或“过去”的后缀。\r\n\t * @returns {string} 相对时间差的格式化字符串。\r\n\t */\r\n\ttoNow() : string\r\n\ttoNow(withoutSuffix : boolean = false) : string {\r\n\t\treturn this.to(dayuts(), withoutSuffix)\r\n\t}\r\n\t/**\r\n\t * 获取实例时间与当前时间的相对时间差，并以指定的格式返回。\r\n\t * @param {boolean} withoutSuffix - 是否省略“未来”或“过去”的后缀。\r\n\t * @returns {string} 相对时间差的格式化字符串。\r\n\t */\r\n\tfromNow() : string\r\n\tfromNow(withoutSuffix : boolean = false) : string {\r\n\t\treturn this.from(dayuts(), withoutSuffix)\r\n\t}\r\n}\r\n\r\nfunction dayuts() : Dayuts;\r\nfunction dayuts(date : string) : Dayuts;\r\nfunction dayuts(date : any[]) : Dayuts;\r\nfunction dayuts(date : number) : Dayuts;\r\nfunction dayuts(date : UTSJSONObject) : Dayuts;\r\nfunction dayuts(date : Date) : Dayuts;\r\nfunction dayuts(date : Dayuts) : Dayuts;\r\n\r\n\r\n\r\n\r\nfunction dayuts(date : any | null = null, format : string | null = null, locale : string | null = null) : Dayuts {\r\n\tif (date != null && date instanceof Dayuts) return date.clone()\r\n\treturn new Dayuts({\r\n\t\tdate,\r\n\t\tformat,\r\n\t\tlocale\r\n\t} as DayutsConfig)\r\n}\r\n\r\n/**\r\n * 判断给定的对象是否为Dayuts实例\r\n * @param {(any | null)} date - 输入的对象\r\n * @returns {boolean} - 如果给定的对象是Dayuts实例，则返回true，否则返回false\r\n */\r\nfunction isDayuts(date : any | null = null) : boolean {\r\n\treturn date instanceof Dayuts\r\n}\r\n\r\nexport {\r\n\tdayuts,\r\n\tisDayuts\r\n}","// @ts-nocheck\nimport { Dayuts } from './index';\nimport { M, Y, W, D, DATE, H, MIN, S, MS, Q } from './constant';\nimport { DayutsUnit } from '../utssdk/interface';\n/**\n * 用指定字符串填充目标字符串的开头，以达到指定的总长度。\n *\n * @param {string} string - 需要填充的目标字符串。\n * @param {number} length - 填充后的总长度。\n * @param {string} pad - 用于填充的字符串。\n * @returns {string} 填充后的字符串。\n */\nfunction padStart(string: string, length: number, pad: string): string {\n    const str = string; //`${string}`\n    if (str.length >= length)\n        return str;\n    return str.padStart(length, pad); //`${Array((length + 1) - string.length).join(pad)}${string}`\n}\nexport { padStart };\nfunction padZoneStr(instance: Dayuts): string {\n    const negMinutes = -instance.utcOffset();\n    const minutes = Math.abs(negMinutes);\n    const hourOffset = Math.floor(minutes / 60);\n    const minuteOffset = minutes % 60;\n    return `${negMinutes <= 0 ? '+' : '-'}${padStart(hourOffset.toString(10), 2, '0')}:${padStart(minuteOffset.toString(10), 2, '0')}`;\n}\nexport { padZoneStr };\n// export function isNull(s): boolean{\n// \treturn s == null\n// }\nexport function isNumber(value: any | null): boolean {\n    return ['Byte', 'UByte', 'Short', 'UShort', 'Int', 'UInt', 'Long', 'ULong', 'Float', 'Double', 'number'].includes(typeof value);\n}\n/**\n * 将给定的时间单位转换为标准格式。\n *\n * @param {string} u - 要转换的时间单位。\n * @returns {string} 返回转换后的时间单位。\n */\nexport function prettyUnit(u: string): DayutsUnit {\n    const special = new Map<string, string>([\n        ['M', M],\n        ['y', Y],\n        ['w', W],\n        ['d', D],\n        ['D', DATE],\n        ['h', H],\n        ['m', MIN],\n        ['s', S],\n        ['ms', MS],\n        ['Q', Q]\n    ]);\n    return (special.get(u) ?? `${u}`.toLowerCase().replace(/s$/, '')) as DayutsUnit;\n}\n/**\n * 计算两个日期之间的月份差值\n * @param {Dayjs} a - 第一个日期\n * @param {Dayjs} b - 第二个日期\n * @returns {number} 返回两个日期之间的月份差值\n */\nexport function monthDiff(a: Dayuts, b: Dayuts): number {\n    // 该函数来自 moment.js，以保持相同的结果\n    if (a.date() < b.date())\n        return -monthDiff(b, a);\n    const wholeMonthDiff = ((b.year() - a.year()) * 12) + (b.month() - a.month());\n    const anchor = a.clone().add(wholeMonthDiff, M).valueOf();\n    const c = b.valueOf() - anchor < 0;\n    const anchor2 = a.clone().add(wholeMonthDiff + (c ? -1 : 1), M).valueOf();\n    // return +(-(wholeMonthDiff + ((b.valueOf() - anchor) / (c ? (anchor - anchor2) :\n    // \t(anchor2 - anchor)))) || 0)\n    const decimalMonthDiff = (b.valueOf() - anchor) / (c ? (anchor - anchor2) : (anchor2 - anchor));\n    const result = wholeMonthDiff + decimalMonthDiff;\n    const negatedResult = -result;\n    const absResult = +negatedResult;\n    const finalResult = !isNaN(absResult) ? absResult : 0;\n    return finalResult;\n}\n/**\n * 返回向下取整的绝对值\n * @param {number} n - 输入的数字\n * @returns {number} 返回向下取整的绝对值\n */\nexport function absFloor(n: number): number {\n    // return (n < 0 ? Math.ceil(n) || 0 : Math.floor(n))\n    return (n < 0 ? Math.max(Math.ceil(n), 0) : Math.floor(n));\n}\n//# sourceMappingURL=utils.uts.map","// @ts-nocheck\r\nimport { Dayuts } from './index'\r\nimport { M, Y, W, D, DATE, H, MIN, S, MS, Q } from './constant'\r\nimport {DayutsUnit} from '../utssdk/interface'\r\n/**\r\n * 用指定字符串填充目标字符串的开头，以达到指定的总长度。\r\n *\r\n * @param {string} string - 需要填充的目标字符串。\r\n * @param {number} length - 填充后的总长度。\r\n * @param {string} pad - 用于填充的字符串。\r\n * @returns {string} 填充后的字符串。\r\n */\r\nfunction padStart(string : string, length : number, pad : string) : string {\r\n\tconst str = string//`${string}`\r\n\tif (str.length >= length) return str\r\n\treturn str.padStart(length, pad) //`${Array((length + 1) - string.length).join(pad)}${string}`\r\n}\r\nexport {\r\n\tpadStart\r\n}\r\nfunction padZoneStr(instance : Dayuts) : string {\r\n\tconst negMinutes = -instance.utcOffset()\r\n\tconst minutes = Math.abs(negMinutes)\r\n\tconst hourOffset = Math.floor(minutes / 60)\r\n\tconst minuteOffset = minutes % 60\r\n\treturn `${negMinutes <= 0 ? '+' : '-'}${padStart(hourOffset.toString(), 2, '0')}:${padStart(minuteOffset.toString(), 2, '0')}`\r\n}\r\nexport {\r\n\tpadZoneStr\r\n}\r\n\r\n// export function isNull(s): boolean{\r\n// \treturn s == null\r\n// }\r\n\r\nexport function isNumber(value : any | null) : boolean {\r\n\r\n\treturn ['Byte', 'UByte', 'Short', 'UShort', 'Int', 'UInt', 'Long', 'ULong', 'Float', 'Double', 'number'].includes(typeof value)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n/**\r\n * 将给定的时间单位转换为标准格式。\r\n *\r\n * @param {string} u - 要转换的时间单位。\r\n * @returns {string} 返回转换后的时间单位。\r\n */\r\nexport function prettyUnit(u : string) : DayutsUnit {\r\n\tconst special = new Map<string, string>([\r\n\t\t['M', M],\r\n\t\t['y', Y],\r\n\t\t['w', W],\r\n\t\t['d', D],\r\n\t\t['D', DATE],\r\n\t\t['h', H],\r\n\t\t['m', MIN],\r\n\t\t['s', S],\r\n\t\t['ms', MS],\r\n\t\t['Q', Q]\r\n\t])\r\n\treturn (special.get(u) ?? `${u}`.toLowerCase().replace(/s$/, '')) as DayutsUnit\r\n}\r\n\r\n\r\n/**\r\n * 计算两个日期之间的月份差值\r\n * @param {Dayjs} a - 第一个日期\r\n * @param {Dayjs} b - 第二个日期\r\n * @returns {number} 返回两个日期之间的月份差值\r\n */\r\nexport function monthDiff(a : Dayuts, b : Dayuts) : number {\r\n\t// 该函数来自 moment.js，以保持相同的结果\r\n\tif (a.date() < b.date()) return -monthDiff(b, a)\r\n\tconst wholeMonthDiff = ((b.year() - a.year()) * 12) + (b.month() - a.month())\r\n\tconst anchor = a.clone().add(wholeMonthDiff, M).valueOf()\r\n\tconst c = b.valueOf() - anchor < 0\r\n\tconst anchor2 = a.clone().add(wholeMonthDiff + (c ? -1 : 1), M).valueOf()\r\n\t// return +(-(wholeMonthDiff + ((b.valueOf() - anchor) / (c ? (anchor - anchor2) :\r\n\t// \t(anchor2 - anchor)))) || 0)\r\n\t\r\n\tconst decimalMonthDiff = (b.valueOf() - anchor) / (c ? (anchor - anchor2) : (anchor2 - anchor));\r\n\tconst result = wholeMonthDiff + decimalMonthDiff;\r\n\tconst negatedResult = -result;\r\n\tconst absResult = +negatedResult;\r\n\tconst finalResult = !isNaN(absResult) ? absResult : 0;\r\n\treturn finalResult;\r\n}\r\n\r\n\r\n/**\r\n * 返回向下取整的绝对值\r\n * @param {number} n - 输入的数字\r\n * @returns {number} 返回向下取整的绝对值\r\n */\r\nexport function absFloor(n : number):number {\r\n\t// return (n < 0 ? Math.ceil(n) || 0 : Math.floor(n))\r\n\treturn (n < 0 ? Math.max(Math.ceil(n), 0) : Math.floor(n))\r\n}"],"names":[],"mappings":"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"}