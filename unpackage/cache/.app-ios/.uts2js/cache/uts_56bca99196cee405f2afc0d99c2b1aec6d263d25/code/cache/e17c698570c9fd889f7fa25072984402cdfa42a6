{"code":"// https://github.com/ant-design/ant-design-colors/blob/main/src/generate.ts\nimport { inputToRGB } from './format-input';\nimport { rgbToHex, rgbToHsv } from './conversion';\nimport { HSV, LColorInfo, LGenerateOptions } from \"../utssdk/interface\";\nclass DarkColorMapItem extends UTS.UTSType {\n    static get$UTSMetadata$() {\n        return {\n            kind: 2,\n            get fields() {\n                return {\n                    index: { type: Number, optional: false },\n                    opacity: { type: Number, optional: false }\n                };\n            },\n            name: \"DarkColorMapItem\"\n        };\n    }\n    constructor(options, metadata = DarkColorMapItem.get$UTSMetadata$(), isJSONParse = false) {\n        super();\n        this.__props__ = UTS.UTSType.initProps(options, metadata, isJSONParse);\n        this.index = this.__props__.index;\n        this.opacity = this.__props__.opacity;\n        delete this.__props__;\n    }\n}\nconst hueStep = 2; // 色相阶梯\nconst saturationStep = 0.16; // 饱和度阶梯，浅色部分\nconst saturationStep2 = 0.05; // 饱和度阶梯，深色部分\nconst brightnessStep1 = 0.05; // 亮度阶梯，浅色部分\nconst brightnessStep2 = 0.15; // 亮度阶梯，深色部分\nconst lightColorCount = 5; // 浅色数量，主色上\nconst darkColorCount = 4; // 深色数量，主色下\n// 暗色主题颜色映射关系表\nconst darkColorMap = [\n    new DarkColorMapItem({ index: 7, opacity: 0.15 }),\n    new DarkColorMapItem({ index: 6, opacity: 0.25 }),\n    new DarkColorMapItem({ index: 5, opacity: 0.3 }),\n    new DarkColorMapItem({ index: 5, opacity: 0.45 }),\n    new DarkColorMapItem({ index: 5, opacity: 0.65 }),\n    new DarkColorMapItem({ index: 5, opacity: 0.85 }),\n    new DarkColorMapItem({ index: 4, opacity: 0.9 }),\n    new DarkColorMapItem({ index: 3, opacity: 0.95 }),\n    new DarkColorMapItem({ index: 2, opacity: 0.97 }),\n    new DarkColorMapItem({ index: 1, opacity: 0.98 }),\n];\n// 从 TinyColor.toHsv 移植的包装函数\n// 保留这里，因为有 `hsv.h * 360`\nfunction toHsv(_a) {\n    var r = _a.r, g = _a.g, b = _a.b;\n    // 将 RGB 值转换为 HSV 值\n    const hsv = rgbToHsv(r, g, b);\n    // 返回一个 HsvObject，其中 h 值乘以 360\n    return new HSV({ h: hsv.h * 360, s: hsv.s, v: hsv.v });\n}\n// 从 TinyColor.toHexString 移植的包装函数\n// 保留这里，因为有前缀 `#`\nfunction toHex(_a) {\n    var r = _a.r, g = _a.g, b = _a.b;\n    // 将 RGB 值转换为十六进制字符串，并添加前缀 `#`\n    return `#${rgbToHex(r, g, b, false)}`;\n}\n// 从 TinyColor.mix 移植的包装函数，无法进行 tree-shaking\n// 数量范围为 [0, 1]\n// 假设 color1 和 color2 没有透明度，因为以下源代码也是如此\nfunction mix(rgb1, rgb2, amount) {\n    // 将 amount 除以 100，得到一个范围为 [0, 1] 的值\n    const p = amount / 100;\n    // 计算混合后的 RGB 值\n    const rgb = new LColorInfo({\n        r: (rgb2.r - rgb1.r) * p + rgb1.r,\n        g: (rgb2.g - rgb1.g) * p + rgb1.g,\n        b: (rgb2.b - rgb1.b) * p + rgb1.b,\n        a: 1\n    });\n    // 返回混合后的 RGB 对象\n    return rgb;\n}\n// 根据给定的 HSV 对象和索引值计算新的色相值\n// 如果 light 参数为 true，则色相向左转动；否则向右转动\nfunction getHue(hsv, i, light = false) {\n    let hue;\n    // 根据色相不同，色相转向不同\n    if (Math.round(hsv.h) >= 60 && Math.round(hsv.h) <= 240) {\n        // 如果色相在 60 到 240 之间，向左转动\n        hue = light ? Math.round(hsv.h) - hueStep * i : Math.round(hsv.h) + hueStep * i;\n    }\n    else {\n        hue = light ? Math.round(hsv.h) + hueStep * i : Math.round(hsv.h) - hueStep * i;\n    }\n    if (hue < 0) {\n        // 如果新的色相值小于 0，则加上 360\n        hue += 360;\n    }\n    else if (hue >= 360) {\n        // 如果新的色相值大于等于 360，则减去 360\n        hue -= 360;\n    }\n    return hue;\n}\n// 根据给定的 HSV 对象和索引值计算新的饱和度值\n// 如果 light 参数为 true，则饱和度减小；否则增加\nfunction getSaturation(hsv, i, light = false) {\n    // grey color don't change saturation\n    // 如果颜色是灰色（色相和饱和度都为 0），则饱和度不变\n    if (hsv.h == 0 && hsv.s == 0) {\n        return hsv.s;\n    }\n    let saturation;\n    // 如果 light 参数为 true，则饱和度减小\n    if (light) {\n        saturation = hsv.s - saturationStep * i;\n    }\n    // 如果 i 等于 darkColorCount，则饱和度增加\n    else if (i == darkColorCount) {\n        saturation = hsv.s + saturationStep;\n    }\n    // 否则，饱和度增加\n    else {\n        saturation = hsv.s + saturationStep2 * i;\n    }\n    // 边界值修正\n    if (saturation > 1) {\n        saturation = 1;\n    }\n    // 第一格的 s 限制在 0.06-0.1 之间\n    if (light && i == lightColorCount && saturation > 0.1) {\n        saturation = 0.1;\n    }\n    if (saturation < 0.06) {\n        saturation = 0.06;\n    }\n    return parseFloat(saturation.toFixed(2));\n}\n// 根据给定的 HSV 对象和索引值计算新的亮度值\n// 如果 light 参数为 true，则亮度增加；否则减少\nfunction getValue(hsv, i, light = false) {\n    let value;\n    // 如果 light 参数为 true，则亮度增加\n    if (light) {\n        value = hsv.v + brightnessStep1 * i;\n    }\n    else {\n        value = hsv.v - brightnessStep2 * i;\n    }\n    if (value > 1) {\n        value = 1;\n    }\n    // 返回保留两位小数的亮度值\n    return parseFloat(value.toFixed(2));\n}\n/**\n * generate 函数用于生成一组基于给定颜色的色彩模式。\n * 它可以生成亮色、暗色和深色主题颜色模式。\n *\n * @param {string} color - 输入的颜色值，可以是十六进制、RGB、RGBA、HSL、HSLA或颜色名称。\n * @param {LGenerateOptions} [opts] - 可选的生成选项。\n * @returns {string[]} - 返回一个包含生成的颜色模式的字符串数组。\n */\nexport function generate(color, opts = new LGenerateOptions({})) {\n    const patterns = [];\n    const pColor = inputToRGB(color);\n    // 生成亮色模式\n    for (let i = lightColorCount; i > 0; i -= 1) {\n        const hsv = toHsv(pColor);\n        const colorString = toHex(inputToRGB(new HSV({\n            h: getHue(hsv, i, true),\n            s: getSaturation(hsv, i, true),\n            v: getValue(hsv, i, true),\n        })));\n        patterns.push(colorString);\n    }\n    // 添加原始颜色\n    patterns.push(toHex(pColor));\n    // 生成暗色模式\n    for (let i = 1; i <= darkColorCount; i += 1) {\n        const hsv = toHsv(pColor);\n        const colorString = toHex(inputToRGB(new HSV({\n            h: getHue(hsv, i),\n            s: getSaturation(hsv, i),\n            v: getValue(hsv, i),\n        })));\n        patterns.push(colorString);\n    }\n    // 如果选项中指定了 dark 主题，则生成深色主题颜色模式\n    if (opts.theme == 'dark') {\n        return darkColorMap.map((_a, _) => {\n            var _b;\n            var index = _a.index, opacity = _a.opacity;\n            const darkColorString = toHex(mix(inputToRGB((_b = opts.backgroundColor) !== null && _b !== void 0 ? _b : '#141414'), inputToRGB(patterns[index]), opacity * 100));\n            return darkColorString;\n        });\n    }\n    // 返回默认颜色模式\n    return patterns;\n}\n//# sourceMappingURL=/Users/xyhc/Documents/veepai_uniappx/uni_modules/lime-color/common/generate.uts.js.map","references":["/Users/xyhc/Documents/veepai_uniappx/uni_modules/lime-color/common/format-input.uts","/Users/xyhc/Documents/veepai_uniappx/uni_modules/lime-color/common/conversion.uts"],"uniExtApis":[],"map":"{\"version\":3,\"file\":\"generate.uts.js\",\"sourceRoot\":\"\",\"sources\":[\"generate.uts\"],\"names\":[],\"mappings\":\"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\"}"}
