{"code":"// @ts-nocheck\nimport {} from './type';\nimport { MODE_NAMES, MODE_MAP, MODE_YEAR, MODE_MONTH, MODE_DATE, MODE_HOUR, MODE_MINUTE, MODE_SECOND } from './constant';\n/**\n * 根据给定的模式返回具有意义的时间列数组。\n * @param {number} mode - 表示时间模式的位掩码。\n * @returns {TimeModeValues[]} - 返回具有意义的时间列名称数组。\n */\nexport function getMeaningColumn(mode) {\n    // 初始化结果数组\n    const res = [];\n    let _mode = 0;\n    if (typeof mode == 'string') {\n        MODE_MAP.forEach((value, key) => {\n            if (mode.includes(key)) {\n                _mode = _mode | value;\n            }\n        });\n    }\n    else if (typeof mode == 'number') {\n        _mode = mode;\n    }\n    if (_mode <= 0) {\n        return res;\n    }\n    // 定义对应的位掩码数组\n    const modeBitmasks = [MODE_YEAR, MODE_MONTH, MODE_DATE, MODE_HOUR, MODE_MINUTE, MODE_SECOND];\n    // 查找被设置的位掩码\n    const activeBitmasks = modeBitmasks.filter(bitmask => { return (_mode & bitmask) != 0; });\n    // 如果没有位掩码被设置，返回空数组\n    if (activeBitmasks.length == 0) {\n        return [];\n    }\n    // 初始化最长连续子序列和当前连续子序列\n    let longestSequence = [];\n    let currentSequence = [];\n    // 遍历所有被设置的位掩码\n    activeBitmasks.forEach(bitmask => {\n        // 如果当前序列为空或当前位掩码是前一个位掩码的两倍，则将其加入当前序列\n        if (currentSequence.length == 0 || bitmask == currentSequence[currentSequence.length - 1] * 2) {\n            currentSequence.push(bitmask);\n        }\n        else {\n            // 如果当前序列长度大于最长序列长度，则更新最长序列\n            if (currentSequence.length > longestSequence.length) {\n                longestSequence = currentSequence;\n            }\n            // 开始新的序列\n            currentSequence = [bitmask];\n        }\n    });\n    // 检查最后一个序列是否是最长的\n    if (currentSequence.length > longestSequence.length) {\n        longestSequence = currentSequence;\n    }\n    // 将最长连续子序列的位掩码转换为对应的模式名并返回\n    return longestSequence.map(bitmask => { return MODE_NAMES[modeBitmasks.indexOf(bitmask)]; });\n}\n//# sourceMappingURL=/Users/xyhc/Documents/veepai_uniappx/uni_modules/lime-date-time-picker/components/l-date-time-picker/utils.js.map","references":["/Users/xyhc/Documents/veepai_uniappx/uni_modules/lime-date-time-picker/components/l-date-time-picker/type.ts","/Users/xyhc/Documents/veepai_uniappx/uni_modules/lime-date-time-picker/components/l-date-time-picker/constant.ts"],"uniExtApis":[],"map":"{\"version\":3,\"file\":\"utils.js\",\"sourceRoot\":\"\",\"sources\":[\"utils.ts\"],\"names\":[],\"mappings\":\"AAAA,cAAc;AACd,OAAO,EAAkB,MAAM,QAAQ,CAAC;AACxC,OAAO,EAAE,UAAU,EAAE,QAAQ,EAAE,SAAS,EAAE,UAAU,EAAE,SAAS,EAAE,SAAS,EAAE,WAAW,EAAE,WAAW,EAAE,MAAM,YAAY,CAAA;AAGxH;;;;GAIG;AACH,MAAM,UAAU,gBAAgB,CAAC,IAAU;IAC1C,UAAU;IACV,MAAM,GAAG,GAAsB,EAAE,CAAC;IAElC,IAAI,KAAK,GAAU,CAAC,CAAC;IACrB,IAAG,OAAO,IAAI,IAAI,QAAQ,EAAE;QAC3B,QAAQ,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,GAAG;YAC3B,IAAI,IAAe,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;gBAClC,KAAK,GAAG,KAAK,GAAG,KAAK,CAAC;aACtB;QACF,CAAC,CAAC,CAAA;KACF;SAAM,IAAG,OAAO,IAAI,IAAI,QAAQ,EAAE;QAClC,KAAK,GAAG,IAAc,CAAA;KACtB;IAED,IAAG,KAAK,IAAI,CAAC,EAAE;QACd,OAAO,GAAG,CAAA;KACV;IAGD,aAAa;IACb,MAAM,YAAY,GAAG,CAAC,SAAS,EAAE,UAAU,EAAE,SAAS,EAAE,SAAS,EAAE,WAAW,EAAE,WAAW,CAAC,CAAC;IAE7F,YAAY;IACZ,MAAM,cAAc,GAAG,YAAY,CAAC,MAAM,CAAC,OAAO,MAAI,OAAA,CAAC,KAAK,GAAG,OAAO,CAAC,IAAI,CAAC,EAAtB,CAAsB,CAAC,CAAC;IAE9E,mBAAmB;IACnB,IAAI,cAAc,CAAC,MAAM,IAAI,CAAC,EAAE;QAC/B,OAAO,EAAE,CAAC;KACV;IAED,qBAAqB;IACrB,IAAI,eAAe,GAAc,EAAE,CAAC;IACpC,IAAI,eAAe,GAAc,EAAE,CAAC;IAEpC,cAAc;IACd,cAAc,CAAC,OAAO,CAAC,OAAO;QAC7B,qCAAqC;QACrC,IAAI,eAAe,CAAC,MAAM,IAAI,CAAC,IAAI,OAAO,IAAI,eAAe,CAAC,eAAe,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE;YAC9F,eAAe,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;SAC9B;aAAM;YACN,2BAA2B;YAC3B,IAAI,eAAe,CAAC,MAAM,GAAG,eAAe,CAAC,MAAM,EAAE;gBACpD,eAAe,GAAG,eAAe,CAAC;aAClC;YACD,SAAS;YACT,eAAe,GAAG,CAAC,OAAO,CAAC,CAAC;SAC5B;IACF,CAAC,CAAC,CAAC;IAEH,iBAAiB;IACjB,IAAI,eAAe,CAAC,MAAM,GAAG,eAAe,CAAC,MAAM,EAAE;QACpD,eAAe,GAAG,eAAe,CAAC;KAClC;IAED,2BAA2B;IAC3B,OAAO,eAAe,CAAC,GAAG,CAAC,OAAO,MAAI,OAAA,UAAU,CAAC,YAAY,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,EAAzC,CAAyC,CAAC,CAAC;AAClF,CAAC\"}"}
