// @ts-nocheck
import type { ComponentPublicInstance, Ref } from 'vue';
import { ease, linear } from './ease';
import { Timeline, Animation } from './';
export type UseTransitionOptions = {
    duration?: number;
    immediate?: boolean;
    context?: ComponentPublicInstance;
};
type UseTransitionReturnType = Ref<number>;
export function useTransition(source: any, options: UseTransitionOptions): UseTransitionReturnType {
    const outputRef: Ref<number> = ref(0);
    const immediate = options.immediate ?? false;
    const duration = options.duration ?? 300;
    const context = options.context; //as ComponentPublicInstance | null
    let tl: Timeline | null = null;
    let timer = -1;
    const watchFunc = (v: number) => {
        if (tl == null) {
            tl = new Timeline();
        }
        tl!.start();
        tl!.add(new Animation(outputRef.value, v, duration, 0, ease, nowValue => {
            outputRef.value = nowValue;
            clearTimeout(timer);
            if (outputRef.value == v) {
                timer = setTimeout(() => {
                    tl?.pause();
                    tl = null;
                }, duration);
            }
        }), null);
    };
    if (context != null && typeof source == 'string') {
        context.$watch(source as string, watchFunc, { immediate } as WatchOptions);
    }
    else if (typeof source == 'function') {
        watch(source, watchFunc, { immediate });
    }
    else if (isRef(source) && source instanceof Ref<number>) {
        watch(source as Ref<number>, watchFunc, { immediate });
    }
    const stop = () => {
    };
    return outputRef; //as UseTransitionReturnType
}
//# sourceMappingURL=useTransition.uts.map