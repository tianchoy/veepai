{"version":3,"file":"index.uts","sourceRoot":"","sources":["uni_modules/lime-shared/unitConvert/index.ts"],"names":[],"mappings":"AAAA,cAAc;AACd,OAAO,EAAE,QAAQ,EAAE,MAAM,aAAa,CAAA;AACtC,OAAO,EAAE,SAAS,EAAE,MAAM,cAAc,CAAA;AAExC;;;;GAIG;AAiCH,OAAO,EAAE,QAAQ,EAAE,MAAM,aAAa,CAAA;AACtC,MAAM,UAAU,WAAW,CAAC,KAAK,EAAG,GAAG,GAAG,IAAI,EAAE,IAAI,EAAE,MAAM,GAAG,CAAC,GAAI,MAAM;IACzE,IAAI,QAAQ,CAAC,KAAK,CAAC,EAAE;QACpB,OAAO,KAAK,IAAI,MAAM,CAAA;KACtB;IACD,WAAW;IACX,IAAI,SAAS,CAAC,KAAK,CAAC,EAAE;QACrB,OAAO,UAAU,CAAC,KAAK,IAAI,MAAM,CAAC,CAAC;KACnC;IACD,QAAQ;IACR,IAAI,QAAQ,CAAC,KAAK,CAAC,EAAE;QACpB,MAAM,GAAG,GAAG,gDAAgD,CAAC;QAC7D,MAAM,OAAO,GAAG,GAAG,CAAC,IAAI,CAAC,KAAK,IAAI,MAAM,CAAC,CAAC;QAC1C,IAAI,OAAO,IAAI,IAAI,EAAE;YACpB,OAAO,CAAC,CAAC;SACT;QACD,MAAM,IAAI,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;QACxB,MAAM,MAAM,GAAG,UAAU,CAAC,KAAK,CAAC,CAAC;QACjC,IAAI,IAAI,IAAI,KAAK,EAAE;YAClB,8CAA8C;YAC9C,qCAAqC;YACrC,OAAO,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,CAAA;SACzB;QACD,IAAI,IAAI,IAAI,IAAI,EAAE;YACjB,OAAO,MAAM,CAAC;SACd;QACD,IAAG,IAAI,IAAI,GAAG,EAAE;YACf,OAAO,MAAM,GAAG,GAAG,GAAG,IAAI,CAAA;SAC1B;QACD,wBAAwB;KACxB;IACD,OAAO,CAAC,CAAC;AACV,CAAC;AAED,KAAK;AACL,gHAAgH;AAChH,8GAA8G;AAC9G,qHAAqH;AACrH,yGAAyG","sourcesContent":["// @ts-nocheck\r\nimport { isString } from '../isString'\r\nimport { isNumeric } from '../isNumeric'\r\n\r\n/**\r\n * 单位转换函数，将字符串数字或带有单位的字符串转换为数字\r\n * @param value 要转换的值，可以是字符串数字或带有单位的字符串\r\n * @returns 转换后的数字，如果无法转换则返回0\r\n */\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nimport { isNumber } from '../isNumber'\r\nexport function unitConvert(value : any | null, base: number = 0) : number {\r\n\tif (isNumber(value)) {\r\n\t\treturn value as number\r\n\t}\r\n\t// 如果是字符串数字\r\n\tif (isNumeric(value)) {\r\n\t\treturn parseFloat(value as string);\r\n\t}\r\n\t// 如果有单位\r\n\tif (isString(value)) {\r\n\t\tconst reg = /^-?([0-9]+)?([.]{1}[0-9]+){0,1}(em|rpx|px|%)$/g;\r\n\t\tconst results = reg.exec(value as string);\r\n\t\tif (results == null) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\tconst unit = results[3];\r\n\t\tconst _value = parseFloat(value);\r\n\t\tif (unit == 'rpx') {\r\n\t\t\t// const { windowWidth } = uni.getWindowInfo()\r\n\t\t\t// return windowWidth / 750 * _value;\r\n\t\t\treturn uni.rpx2px(_value)\r\n\t\t}\r\n\t\tif (unit == 'px') {\r\n\t\t\treturn _value;\r\n\t\t}\r\n\t\tif(unit == '%') {\r\n\t\t\treturn _value / 100 * base\r\n\t\t}\r\n\t\t// 如果是其他单位，可以继续添加对应的转换逻辑\r\n\t}\r\n\treturn 0;\r\n}\r\n\r\n// 示例\r\n// __f__('log','at uni_modules/lime-shared/unitConvert/index.ts:77',unitConvert(\"123\")); // 输出: 123 (字符串数字转换为数字)\r\n// __f__('log','at uni_modules/lime-shared/unitConvert/index.ts:78',unitConvert(\"3.14em\")); // 输出: 0 (无法识别的单位)\r\n// __f__('log','at uni_modules/lime-shared/unitConvert/index.ts:79',unitConvert(\"20rpx\")); // 输出: 根据具体情况而定 (根据单位进行转换)\r\n// __f__('log','at uni_modules/lime-shared/unitConvert/index.ts:80',unitConvert(10)); // 输出: 10 (数字不需要转换)"]}