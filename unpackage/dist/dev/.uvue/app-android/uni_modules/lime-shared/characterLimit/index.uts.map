{"version":3,"file":"index.uts","sourceRoot":"","sources":["uni_modules/lime-shared/characterLimit/index.ts"],"names":[],"mappings":"AAAA,cAAc;AACd;;;;;GAKG;AACH,MAAM,MAAM,qBAAqB,GAAG;IACnC,MAAM,EAAG,MAAM,CAAC;IAChB,UAAU,EAAG,MAAM,CAAC;CACpB,CAAA;AAED,KAAK,SAAS,GAAG,GAAG,CAAA;AAMpB,MAAM,UAAU,cAAc,CAAC,IAAI,EAAG,MAAM,EAAE,IAAI,EAAG,SAAS,EAAE,GAAG,EAAG,MAAM,GAAI,qBAAqB;IACpG,MAAM,GAAG,GAAG,GAAG,IAAI,EAAE,CAAC;IAEtB,IAAI,GAAG,CAAC,MAAM,IAAI,CAAC,EAAE;QACpB,OAAO;YACN,MAAM,EAAE,CAAC;YACT,UAAU,EAAE,EAAE;SACd,IAAI,qBAAqB,CAAA;KAC1B;IAED,IAAI,IAAI,IAAI,cAAc,EAAE;QAC3B,IAAI,GAAG,GAAG,CAAC,CAAC;QACZ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE;YACvC,IAAI,mBAAmB,EAAG,MAAM,CAAA,CAAA,OAAO;YACvC,MAAM,IAAI,GAAG,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAA;YAC/B,IAAI,IAAI,GAAG,GAAG,IAAI,IAAI,IAAI,EAAE,EAAE;gBAC7B,mBAAmB,GAAG,CAAC,CAAC;aACxB;iBAAM;gBACN,mBAAmB,GAAG,CAAC,CAAC;aACxB;YACD,IAAI,GAAG,GAAG,mBAAmB,GAAG,GAAG,EAAE;gBACpC,OAAO;oBACN,MAAM,EAAE,GAAG;oBACX,UAAU,EAAE,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;iBAC3B,IAAI,qBAAqB,CAAA;aAC1B;YACD,GAAG,IAAI,mBAAmB,CAAC;SAC3B;QACD,OAAO;YACN,MAAM,EAAE,GAAG;YACX,UAAU,EAAE,GAAG;SACf,IAAI,qBAAqB,CAAA;KAC1B;SAAM,IAAI,IAAI,IAAI,WAAW,EAAE;QAC/B,MAAM,MAAM,GAAG,GAAG,CAAC,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC;QACnD,OAAO;YACN,MAAM,EAAE,MAAM;YACd,UAAU,EAAE,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE,MAAM,CAAC;SAChC,IAAI,qBAAqB,CAAA;KAC1B;IAED,OAAO;QACN,MAAM,EAAE,GAAG,CAAC,MAAM;QAClB,UAAU,EAAE,GAAG;KACf,IAAI,qBAAqB,CAAA;AAC3B,CAAC;AAAA,CAAC","sourcesContent":["// @ts-nocheck\r\n/**\r\n * 计算字符串字符的长度并可以截取字符串。\r\n * @param char 传入字符串（maxcharacter条件下，一个汉字表示两个字符）\r\n * @param max 规定最大字符串长度\r\n * @returns 当没有传入maxCharacter/maxLength 时返回字符串字符长度，当传入maxCharacter/maxLength时返回截取之后的字符串和长度。\r\n */\r\nexport type CharacterLengthResult = {\r\n\tlength : number;\r\n\tcharacters : string;\r\n}\r\n\r\ntype ChartType = any\r\n\r\n\r\n\r\n\r\n\r\nexport function characterLimit(type : string, char : ChartType, max : number) : CharacterLengthResult {\r\n\tconst str = `${char}`;\r\n\r\n\tif (str.length == 0) {\r\n\t\treturn {\r\n\t\t\tlength: 0,\r\n\t\t\tcharacters: '',\r\n\t\t} as CharacterLengthResult\r\n\t}\r\n\r\n\tif (type == 'maxcharacter') {\r\n\t\tlet len = 0;\r\n\t\tfor (let i = 0; i < str.length; i += 1) {\r\n\t\t\tlet currentStringLength : number// = 0;\r\n\t\t\tconst code = str.charCodeAt(i)!\r\n\t\t\tif (code > 127 || code == 94) {\r\n\t\t\t\tcurrentStringLength = 2;\r\n\t\t\t} else {\r\n\t\t\t\tcurrentStringLength = 1;\r\n\t\t\t}\r\n\t\t\tif (len + currentStringLength > max) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tlength: len,\r\n\t\t\t\t\tcharacters: str.slice(0, i),\r\n\t\t\t\t} as CharacterLengthResult\r\n\t\t\t}\r\n\t\t\tlen += currentStringLength;\r\n\t\t}\r\n\t\treturn {\r\n\t\t\tlength: len,\r\n\t\t\tcharacters: str,\r\n\t\t} as CharacterLengthResult\r\n\t} else if (type == 'maxlength') {\r\n\t\tconst length = str.length > max ? max : str.length;\r\n\t\treturn {\r\n\t\t\tlength: length,\r\n\t\t\tcharacters: str.slice(0, length),\r\n\t\t} as CharacterLengthResult\r\n\t}\r\n\r\n\treturn {\r\n\t\tlength: str.length,\r\n\t\tcharacters: str,\r\n\t} as CharacterLengthResult\r\n};"]}