import { measureText } from '@/uni_modules/lime-progress';
import { LProgressOptions } from './types';
function calculateBorderRadius(width: number, height: number, radius: number[]): number[] {
    // 验证半径是否为非负数
    if (radius.some((r): boolean => r < 0)) {
        throw new Error('Radius values must be non-negative numbers.');
    }
    // 将 radius 扩展到 4 位
    while (radius.length < 4) {
        radius.push(radius[radius.length > 2 ? radius.length - 2 : 0]);
    }
    const factors = [
        width / (radius[0] + radius[1]),
        height / (radius[1] + radius[2]),
        width / (radius[2] + radius[3]),
        height / (radius[0] + radius[3]),
    ];
    const minFactor = Math.min(...factors);
    if (minFactor <= 1) {
        for (var i = 0; i < radius.length; i++) {
            radius[i] *= minFactor;
        }
    }
    return radius;
}
function roundRect(ctx: DrawableContext, x: number, y: number, width: number, height: number, radius: number[]) {
    const _radius = calculateBorderRadius(width, height, radius);
    const x1 = x;
    const y1 = y;
    const x2 = width + x;
    const y2 = height + y;
    const leftTopCx = _radius[0] * (1 - 0.55191502449);
    const rightTopCx = _radius[1] * (1 - 0.55191502449);
    const rightBottomCx = _radius[2] * (1 - 0.55191502449);
    const leftBottomCx = _radius[3] * (1 - 0.55191502449);
    ctx.beginPath();
    ctx.moveTo(x1 + _radius[0], y1);
    ctx.lineTo(x2 - _radius[1], y1);
    ctx.bezierCurveTo(x2 - rightTopCx, y1, x2, y1 + rightTopCx, x2, y1 + _radius[1]);
    ctx.lineTo(x2, y2 - _radius[2]);
    ctx.bezierCurveTo(x2, y2 - rightBottomCx, x2 - rightBottomCx, y2, x2 - _radius[2], y2);
    ctx.lineTo(x1 + _radius[3], y2);
    ctx.bezierCurveTo(x1 + leftBottomCx, y2, x1, y2 - leftBottomCx, x1, y2 - _radius[3]);
    ctx.lineTo(x1, y1 + _radius[0]);
    ctx.bezierCurveTo(x1, y1 + leftTopCx, x1 + leftTopCx, y1, x1 + _radius[0], y1);
    ctx.closePath();
}
/**
 * 绘制圆角矩形路径
 * @param ctx - 绘图上下文
 * @param x - 起始x坐标
 * @param y - 起始y坐标
 * @param width - 宽度
 * @param height - 高度
 * @param radius - 圆角半径
 */
function drawRoundedRect(ctx: DrawableContext, x: number, y: number, width: number, height: number, radius: number = 0) {
    roundRect(ctx, x - radius, y - radius, width + radius, height, [radius]);
}
function drawArc(ctx: DrawableContext, x: number, y: number, radius: number, color: string) {
    ctx.beginPath();
    ctx.fillStyle = color;
    // ctx.lineWidth = lineWidth
    ctx.arc(center, center, radius, beginAngle, endAngle);
    ctx.fill();
}
export class Progress {
    private el: UniElement;
    private ctx: DrawableContext;
    private textWidth = 0;
    private containerWidth = 0;
    private containerHeight = 0;
    private currentPercentage = 0;
    private isInitialized = false;
    private resizeObserver: UniResizeObserver;
    private opt: LProgressOptions = {
        showInfo: false,
        strokeColor: '#1677ff',
        strokeWidth: 4,
        trailColor: 'rgba(0, 0, 0, 0.06)',
        linecap: 'round',
        fontSize: 12,
        infoAlign: 'end',
        infoType: 'outer',
        infoColor: 'black'
    } as LProgressOptions;
    constructor(el: UniElement) {
        this.el = el;
        this.ctx = el.getDrawableContext() as DrawableContext;
        this.resizeObserver = new UniResizeObserver((entries: Array<UniResizeObserverEntry>) => {
            const height = Math.max(this.opt.showInfo! ? measureText(this.opt.fontSize!, '00%')[1] : 0, this.opt.strokeWidth!);
            this.el.style.setProperty('height', height + 'px');
            const rect = entries[0].target.getBoundingClientRect();
            this.containerWidth = rect.width;
            this.containerHeight = height;
            this.isInitialized = false;
            this.render(this.currentPercentage);
        });
        this.resizeObserver.observe(el);
    }
    /**
      * 设置进度条选项
      * @param options - 进度条配置项
      */
    setOption(options: LProgressOptions) {
        for (let key in options) {
            if (options[key] != null && options[key] != 0) {
                this.opt[key] = options[key];
            }
        }
        if (this.opt.showInfo!) {
            this.textWidth = 0;
        }
        // const height = Math.max(this.opt.showInfo! ? this.opt.fontSize! : 0, this.opt.strokeWidth!)
        // const height = Math.max(this.opt.showInfo! ? this.opt.fontSize! : 0, this.opt.strokeWidth!)
        const height = Math.max(this.opt.showInfo! ? measureText(this.opt.fontSize!, '00%')[1] : 0, this.opt.strokeWidth!);
        this.el.style.setProperty('height', height + 'px');
        const rect = this.el.getBoundingClientRect();
        this.containerWidth = rect.width;
        this.containerHeight = height;
    }
    /**
   * 渲染进度条
   * @param percentage - 当前进度百分比
   */
    render(percentage: number) {
        const roundedPercentage = Math.floor(percentage);
        if (this.isInitialized && this.currentPercentage == roundedPercentage) {
            return;
        }
        if (this.currentPercentage != roundedPercentage) {
            this.currentPercentage = roundedPercentage;
        }
        this.isInitialized = true;
        this.ctx.reset();
        const percentageText = roundedPercentage.toString(10).replace(/\.0$/, '') + '%';
        const strokeWidth = this.opt.strokeWidth!;
        const isInfoOuter = this.opt.infoType == 'outer';
        const isInfoStart = this.opt.infoAlign == 'start';
        const showInfo = this.opt.showInfo!;
        let textWidth = 0;
        let startX = 0;
        let startY = this.containerHeight / 2;
        let offset = 0;
        let gap = 5;
        let lineWidth = strokeWidth;
        let fontSize = this.opt.fontSize!;
        let textY = 0;
        if (showInfo) {
            const [width, height] = measureText(fontSize, percentageText);
            textWidth = width;
            const textHeight = height;
            offset = isInfoOuter ? width + gap : 0;
            lineWidth = !isInfoOuter ? Math.max(strokeWidth, textHeight) : strokeWidth;
            this.ctx.fillStyle = this.opt.infoColor!;
            this.ctx.font = `${fontSize}px`;
            startX += (isInfoStart && isInfoOuter ? textWidth + gap : 0);
            textY = this.containerHeight - (this.containerHeight - textHeight * 0.64) / 2; //(lineWidth - textHeight) / 2  //fontSize + (fontSize - textHeight) / 2
        }
        if (this.opt.linecap == 'round') {
            startX += (lineWidth / 2);
            offset += (lineWidth / 2);
        }
        if (isInfoStart && showInfo && isInfoOuter) {
            offset = (lineWidth / 2);
            this.ctx.fillText(percentageText, 0, textY);
        }
        if (!isInfoStart && showInfo && isInfoOuter) {
            this.ctx.fillText(percentageText, this.containerWidth - textWidth, textY);
        }
        let percent = roundedPercentage / 100 * (this.containerWidth - offset);
        this.ctx.lineWidth = lineWidth;
        this.ctx.fillStyle = this.opt.trailColor!;
        drawRoundedRect(this.ctx, startX, startY, this.containerWidth - offset, lineWidth, lineWidth / 2);
        this.ctx.fill();
        // this.ctx.strokeStyle = this.opt.trailColor!
        // this.ctx.lineCap = this.opt.linecap!
        // this.ctx.beginPath()
        // this.ctx.moveTo(startX, startY)
        // this.ctx.lineTo(this.containerWidth - offset, startY)
        // this.ctx.stroke()
        if (!isInfoOuter && showInfo) {
            // this.ctx.strokeStyle = this.opt.strokeColor!
            // this.ctx.beginPath()
            // this.ctx.moveTo(startX, startY)
            // this.ctx.lineTo(Math.max(percent, textWidth + lineWidth / 2), startY)
            // this.ctx.stroke()
            this.ctx.fillStyle = this.opt.strokeColor!;
            drawRoundedRect(this.ctx, startX, startY, Math.max(percent, textWidth + lineWidth / 2), lineWidth, lineWidth / 2);
            this.ctx.fill();
        }
        else if (this.currentPercentage != 0) {
            this.ctx.fillStyle = this.opt.strokeColor!;
            drawRoundedRect(this.ctx, startX, startY, Math.max(percent, startX), lineWidth, lineWidth / 2);
            this.ctx.fill();
            // this.ctx.strokeStyle = this.opt.strokeColor!
            // this.ctx.beginPath()
            // this.ctx.moveTo(startX, startY)
            // this.ctx.lineTo(Math.max(percent, startX), startY)
            // this.ctx.stroke()
        }
        if (isInfoStart && this.opt.showInfo! && !isInfoOuter) {
            this.ctx.fillStyle = this.opt.infoColor!;
            this.ctx.fillText(percentageText, 5, textY);
        }
        if (!isInfoStart && this.opt.showInfo! && !isInfoOuter) {
            this.ctx.fillStyle = this.opt.infoColor!;
            this.ctx.textAlign = 'right';
            this.ctx.fillText(percentageText, Math.max(textWidth + lineWidth / 2, percent), textY);
        }
        this.ctx.update();
    }
    disconnect() {
        this.resizeObserver.disconnect();
    }
}
//# sourceMappingURL=progress.uts.map