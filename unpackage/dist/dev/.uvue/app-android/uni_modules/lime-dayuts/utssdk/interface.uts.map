{"version":3,"file":"interface.uts","sourceRoot":"","sources":["uni_modules/lime-dayuts/utssdk/interface.uts"],"names":[],"mappings":"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","sourcesContent":["// @ts-nocheck\r\nexport type DayutsConfig = {\r\n\tdate: any|null\r\n\tformat : string|null\r\n\tlocale : string|null\r\n}\r\n\r\nexport type DayutsUnit = 'year' | 'month' | 'day' | 'week' | 'date' | 'hour' | 'minute' | 'second' | 'millisecond' | 'quarter'\r\n\r\nexport type DayutsFormats = {\r\n\t/**\r\n\t * 小时和分钟的格式化字符串。\r\n\t */\r\n\tLT : string;\r\n\r\n\t/**\r\n\t * 小时、分钟和秒的格式化字符串。\r\n\t */\r\n\tLTS : string;\r\n\r\n\t/**\r\n\t * 年份、月份和日期的格式化字符串。\r\n\t */\r\n\tL : string;\r\n\r\n\t/**\r\n\t * 年份、月份、日期和星期的格式化字符串。\r\n\t */\r\n\tLL : string;\r\n\r\n\t/**\r\n\t * 年份、月份、日期、星期和小时的格式化字符串。\r\n\t */\r\n\tLLL : string;\r\n\r\n\t/**\r\n\t * 年份、月份、日期、星期、小时和分钟的格式化字符串。\r\n\t */\r\n\tLLLL : string;\r\n\r\n\t/**\r\n\t * 缩小的年份、月份和日期的格式化字符串。\r\n\t */\r\n\tl : string;\r\n\r\n\t/**\r\n\t * 缩小的年份、月份、日期和星期的格式化字符串。\r\n\t */\r\n\tll : string;\r\n\r\n\t/**\r\n\t * 缩小的年份、月份、日期、星期和小时的格式化字符串。\r\n\t */\r\n\tlll : string;\r\n\r\n\t/**\r\n\t * 缩小的年份、月份、日期、星期、小时和分钟的格式化字符串。\r\n\t */\r\n\tllll : string;\r\n}\r\nexport type DayutsRelativeTime = {\r\n\t/**\r\n\t * 时间单位之后的格式化字符串。\r\n\t */\r\n\tfuture : string;\r\n\r\n\t/**\r\n\t * 时间单位之前的格式化字符串。\r\n\t */\r\n\tpast : string;\r\n\r\n\t/**\r\n\t * 秒的格式化字符串。\r\n\t */\r\n\ts : string;\r\n\r\n\t/**\r\n\t * 分钟的格式化字符串。\r\n\t */\r\n\tm : string;\r\n\r\n\t/**\r\n\t * 分钟（带前缀）的格式化字符串。\r\n\t */\r\n\tmm : string;\r\n\r\n\t/**\r\n\t * 小时的格式化字符串。\r\n\t */\r\n\th : string;\r\n\r\n\t/**\r\n\t * 小时（带前缀）的格式化字符串。\r\n\t */\r\n\thh : string;\r\n\r\n\t/**\r\n\t * 天的格式化字符串。\r\n\t */\r\n\td : string;\r\n\r\n\t/**\r\n\t * 天（带前缀）的格式化字符串。\r\n\t */\r\n\tdd : string;\r\n\r\n\t/**\r\n\t * 月的格式化字符串。\r\n\t */\r\n\tM : string;\r\n\r\n\t/**\r\n\t * 月（带前缀）的格式化字符串。\r\n\t */\r\n\tMM : string;\r\n\r\n\t/**\r\n\t * 年的格式化字符串。\r\n\t */\r\n\ty : string;\r\n\r\n\t/**\r\n\t * 年（带前缀）的格式化字符串。\r\n\t */\r\n\tyy : string;\r\n}\r\n\r\n/**\r\n * 本地化对象接口。\r\n */\r\nexport type DayutsLocale = {\r\n\t/**\r\n\t * 区域设置名称。\r\n\t */\r\n\tname : string;\r\n\r\n\t/**\r\n\t * 一周中每天的完整名称。\r\n\t */\r\n\tweekdays : string[];\r\n\r\n\t/**\r\n\t * 一周中每天的缩写名称。\r\n\t */\r\n\tweekdaysShort ?: string[];\r\n\r\n\t/**\r\n\t * 一周中每天的最小缩写名称。\r\n\t */\r\n\tweekdaysMin ?: string[];\r\n\r\n\t/**\r\n\t * 一年中的每个月份的名称。\r\n\t */\r\n\tmonths : string[];\r\n\r\n\t/**\r\n\t * 一年中的每个月份的缩写名称。\r\n\t */\r\n\tmonthsShort ?: string[];\r\n\r\n\t/**\r\n\t * 返回序数词的函数。\r\n\t *\r\n\t * @param number - 要格式化的数字。\r\n\t * @param period - 周期类型（如 \"W\" 表示周）。\r\n\t * @returns 返回格式化后的序数词字符串。\r\n\t */\r\n\t// ordinal : (number : number) => string;\r\n\tordinal : (number : number, period : string) => string;\r\n\r\n\t/**\r\n\t * 一周的开始日期（星期几）。\r\n\t */\r\n\tweekStart ?: number;\r\n\r\n\t/**\r\n\t * 年的开始月份。\r\n\t */\r\n\tyearStart ?: number;\r\n\r\n\t/**\r\n\t * 日期和时间格式化选项。\r\n\t */\r\n\tformats ?: DayutsFormats;\r\n\r\n\t/**\r\n\t * 相对时间格式化选项。\r\n\t */\r\n\trelativeTime ?: DayutsRelativeTime;\r\n\r\n\t/**\r\n\t * 根据小时和分钟返回上午或下午的函数。\r\n\t *\r\n\t * @param hour - 小时数（0-23）。\r\n\t * @param minute - 分钟数（0-59）。\r\n\t * @returns 返回上午或下午的字符串。\r\n\t */\r\n\tmeridiem ?: (hour : number, minute : number, isLowercase : boolean) => string;\r\n}\r\n\r\n\r\nexport type DayutsObject = {\r\n\tyears : number;\r\n\tmonths : number;\r\n\tdate : number;\r\n\thours : number;\r\n\tminutes : number;\r\n\tseconds : number;\r\n\tmilliseconds : number;\r\n}\r\n\r\n\r\n// 主 Dayuts 类类型定义\n// export interface Dayuts {\n//     // 公共属性\n//     $L: string;\n\n//     // 私有属性\n//     $d: Date;\n//     $y: number;\n//     $M: number;\n//     $D: number;\n//     $W: number;\n//     $H: number;\n//     $m: number;\n//     $s: number;\n//     $ms: number;\n//     $u: boolean;\n\n//     // 构造函数\n//     // constructor(cfg: DayutsConfig);\n\n//     // 解析配置并初始化日期\n//     // private parse(cfg: DayutsConfig): void;\n\n//     // 初始化日期的各个部分\n//     // private init(): void;\n\n//     // 检查日期是否有效\n//     isValid(): boolean;\n\n//     // 判断当前日期是否与给定日期在指定时间单位内相同\n//     // isSame(input: string, units?: DayutsUnit): boolean;\n//     // isSame(input: number, units?: DayutsUnit): boolean;\n//     // isSame(input: Date, units?: DayutsUnit): boolean;\n//     // isSame(input: Dayuts, units?: DayutsUnit): boolean;\n//     // isSame(input: UTSJSONObject, units?: DayutsUnit): boolean;\n// \t// isSame(input : string) : boolean\r\n// \t// isSame(input : number) : boolean\r\n// \t// isSame(input : Date) : boolean\r\n// \t// isSame(input : Dayuts) : boolean\r\n// \t// isSame(input : UTSJSONObject) : boolean\r\n\t\r\n// \t// isSame(input : string, units : DayutsUnit) : boolean\r\n// \t// isSame(input : number, units : DayutsUnit) : boolean\r\n// \t// isSame(input : Date, units : DayutsUnit) : boolean\r\n// \t// isSame(input : Dayuts, units : DayutsUnit) : boolean\r\n// \t// isSame(input : UTSJSONObject, units : DayutsUnit) : boolean\r\n// \t// isSame(input : any, units : DayutsUnit) : boolean\r\n\t\n//     // 判断给定日期是否在当前日期指定时间单位之后\n//     // isAfter(input: string, units?: DayutsUnit): boolean;\n//     // isAfter(input: number, units?: DayutsUnit): boolean;\n//     // isAfter(input: Date, units?: DayutsUnit): boolean;\n//     // isAfter(input: Dayuts, units?: DayutsUnit): boolean;\n//     // isAfter(input: UTSJSONObject, units?: DayutsUnit): boolean;\r\n// \t// isAfter(input : string) : boolean\r\n// \t// isAfter(input : number) : boolean\r\n// \t// isAfter(input : Date) : boolean\r\n// \t// isAfter(input : Dayuts) : boolean\r\n// \t// isAfter(input : UTSJSONObject) : boolean\r\n\t\r\n// \t// isAfter(input : string, units : DayutsUnit) : boolean\r\n// \t// isAfter(input : number, units : DayutsUnit) : boolean\r\n// \t// isAfter(input : Date, units : DayutsUnit) : boolean\r\n// \t// isAfter(input : Dayuts, units : DayutsUnit) : boolean\r\n// \t// isAfter(input : UTSJSONObject, units : DayutsUnit) : boolean\r\n// \t// isAfter(input : any, units : DayutsUnit) : boolean\n\n//     // 判断给定日期是否在当前日期指定时间单位之前\n//     // isBefore(input: string, units?: DayutsUnit): boolean;\n//     // isBefore(input: number, units?: DayutsUnit): boolean;\n//     // isBefore(input: Date, units?: DayutsUnit): boolean;\n//     // isBefore(input: Dayuts, units?: DayutsUnit): boolean;\n//     // isBefore(input: UTSJSONObject, units?: DayutsUnit): boolean;\n\n//     // 判断当前日期是否与给定日期在指定时间单位内相同或之前\n//     // isSameOrBefore(input: string, units?: DayutsUnit): boolean;\n//     // isSameOrBefore(input: number, units?: DayutsUnit): boolean;\n//     // isSameOrBefore(input: Date, units?: DayutsUnit): boolean;\n//     // isSameOrBefore(input: Dayuts, units?: DayutsUnit): boolean;\n//     // isSameOrBefore(input: UTSJSONObject, units?: DayutsUnit): boolean;\n\n//     // 判断当前日期是否与给定日期在指定时间单位内相同或之后\n//     // isSameOrAfter(input: string, units?: DayutsUnit): boolean;\n//     // isSameOrAfter(input: number, units?: DayutsUnit): boolean;\n//     // isSameOrAfter(input: Date, units?: DayutsUnit): boolean;\n//     // isSameOrAfter(input: Dayuts, units?: DayutsUnit): boolean;\n//     // isSameOrAfter(input: UTSJSONObject, units?: DayutsUnit): boolean;\n\n//     // 判断当前日期是否在两个给定日期之间\n//     // isBetween(input: any, input2: any): boolean;\r\n//     // isBetween(input: any, input2: any, units?: DayutsUnit, interval?: string): boolean;\n\n//     // 判断当前年份是否为闰年\n//     isLeapYear(): boolean;\n\n//     // 判断当前日期是否为今天\n//     isToday(): boolean;\n\n//     // 获取 Unix 时间戳（秒）\n//     unix(): number;\n\n//     // 设置为指定时间单位的开始或结束\n//     // startOf(units: DayutsUnit): Dayuts;\r\n//     // startOf(units: DayutsUnit, startOf?: boolean): Dayuts;\n//     endOf(units: DayutsUnit): Dayuts;\n\n//     // 设置指定时间单位的值\n//     set(units: DayutsUnit, int: number): Dayuts;\n\n//     // 获取指定时间单位的值\n//     get(units: DayutsUnit): number;\n\n//     // 年、月、日、时、分、秒、毫秒的 getter 和 setter 方法\n//     year(): number;\r\n//     year(input?: number): Dayuts;\n//     month(): number\r\n//     month(input?: number): Dayuts;\n//     // day(): number;\r\n//     day(input?: number): Dayuts;\n//     date(): number;\r\n//     date(input?: number): Dayuts;\n//     // hour(): number;\r\n//     hour(input?: number): Dayuts;\n//     // minute(): number;\r\n//     minute(input?: number): Dayuts;\n//     // second(): number;\r\n//     second(input?: number): Dayuts;\n//     // millisecond(): number;\r\n//     millisecond(input?: number): Dayuts;\n\n//     // 添加时间\n//     add(number: number, units: DayutsUnit): Dayuts;\n\n//     // 减去时间\n//     subtract(number: number, units: DayutsUnit): Dayuts;\n\n//     // 格式化日期\n//     format(formatStr?: string): string;\n\n//     // 获取 UTC 偏移量（分钟）\n//     utcOffset(): number;\n\n//     // 计算两个日期之间的差值\n//     diff(input: string, units?: DayutsUnit, float?: boolean): number;\n//     diff(input: number, units?: DayutsUnit, float?: boolean): number;\n//     diff(input: Date, units?: DayutsUnit, float?: boolean): number;\n//     diff(input: Dayuts, units?: DayutsUnit, float?: boolean): number;\n//     diff(input: UTSJSONObject, units?: DayutsUnit, float?: boolean): number;\n\n//     // 转换为原生 Date 对象\n//     toDate(): Date;\n\n//     // 转换为 ISO 8601 字符串\n//     toJSON(): string | null;\n//     toISOString(): string;\n\n//     // 转换为对象\n//     toObject(): DayutsObject;\n\n//     // 转换为数组\n//     toArray(): number[];\n\n//     // 获取时间戳（毫秒）\n//     valueOf(): number;\n\n//     // 获取月份的天数\n//     daysInMonth(): number;\n\n//     // 获取本地化对象\n//     // private $locale(): DayutsLocale;\n\n//     // 设置或获取本地化配置\n//     locale(preset: string, object?: DayutsLocale): Dayuts;\n//     locale(preset: DayutsLocale, object?: DayutsLocale): Dayuts;\n\n//     // 克隆当前实例\n//     clone(): Dayuts;\n\n//     // 转换为字符串\n//     // toString(): string;\n\n//     // 获取或设置一年中的第几天\n//     dayOfYear(): number;\r\n//     dayOfYear(input?: number): Dayuts;\n\n//     // 相对时间方法\n//     fromToBase(input: any, withoutSuffix: boolean, instance: Dayuts, isFrom: boolean): string;\n//     to(input: any, withoutSuffix?: boolean): string;\n//     from(input: any, withoutSuffix?: boolean): string;\n//     toNow(withoutSuffix?: boolean): string;\n//     fromNow(withoutSuffix?: boolean): string;\n// }"]}