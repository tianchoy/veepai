import { CheckboxProps, ManageChildInList, CheckboxStatus, OnCheckedChange, CheckboxChangeOptions, ComputedRef } from './type';
const __sfc__ = defineComponent({
    __name: 'l-checkbox',
    mixins: [{
            props: {
                checked: {
                    type: [null, Boolean],
                    default: null,
                },
                modelValue: {
                    type: [null, Boolean],
                    default: null,
                },
            }
        }],
    slots: Object as SlotsType<{
        checkbox: {
            checked: boolean;
            disabled: boolean;
        };
        icon: {
            checked: boolean;
            disabled: boolean;
        };
        default: {
            checked: boolean;
            disabled: boolean;
        };
    }>,
    props: {
        defaultChecked: { type: Boolean, required: true, default: false },
        label: { type: String, required: false },
        indeterminate: { type: Boolean, required: true, default: false },
        disabled: { type: Boolean, required: true, default: false },
        readonly: { type: Boolean, required: true, default: false },
        size: { type: String, required: true, default: 'medium' },
        name: { type: Object, required: false },
        checkAll: { type: Boolean, required: true, default: false },
        value: { type: Object, required: false },
        icon: { type: String, required: true, default: 'rectangle' },
        fontSize: { type: String, required: false },
        iconSize: { type: String, required: false },
        checkedColor: { type: String, required: false },
        iconBgColor: { type: String, required: false },
        iconBorderColor: { type: String, required: false },
        iconDisabledColor: { type: String, required: false },
        iconDisabledBgColor: { type: String, required: false },
        labelStyle: { type: [String, UTSJSONObject], required: false }
    },
    emits: ['update:modelValue', 'change'],
    setup(__props) {
        const __ins = getCurrentInstance()!;
        const _ctx = __ins.proxy as InstanceType<typeof __sfc__>;
        const _cache = __ins.renderCache;
        /**
         * Checkbox 复选框组件
         * @description 用于在多个选项中进行选择的表单组件，支持单选、全选和不确定态
         * <br> 插件类型：LCheckboxComponentPublicInstance
         * @tutorial https://ext.dcloud.net.cn/plugin?name=lime-checkbox
         *
         * @property {boolean} defaultChecked 默认选中状态（非受控属性）
         * @property {string} label 显示文本（支持插槽）
         * @property {boolean} indeterminate 半选状态（优先级高于checked）
         * @property {boolean} disabled 禁用状态（覆盖Group设置）
         * @property {'small' | 'medium' | 'large'} size 组件尺寸
         * @value small
         * @value medium
         * @value large
         * @property {string} name 唯一标识符（表单提交使用）
         * @property {boolean} checkAll 标记为全选选项（需在Group中使用）
         * @property {string} value 选项值（Group模式下必填）
         * @property {'circle' | 'line' | 'rectangle' | 'dot'} icon 图标样式类型
         * @value circle 圆
         * @value line 线
         * @value rectangle	方
         * @value dot 点
         * @property {string} fontSize 文本字号（支持CSS单位）
         * @property {string} iconSize 图标尺寸（支持CSS单位）
         * @property {string} checkedColor 选中状态主题色
         * @property {string} iconBgColor 图标背景色
         * @property {string} iconBorderColor 图标边框色
         * @property {string} iconDisabledColor 禁用状态图标颜色
         * @property {string} iconDisabledBgColor 禁用状态背景色
         * @property {string|object} labelStyle label的样式
         * @event {Function} change 状态变化时触发（参数：CheckboxChangeOptions）
         */
        const name = 'l-checkbox';
        function emit(event: string, ...do_not_transform_spread: Array<any | null>) {
            __ins.emit(event, ...do_not_transform_spread);
        }
        const props = __props;
        const instance = getCurrentInstance()!;
        const formDisabled = inject<Ref<boolean | null> | null>('formDisabled', null);
        const formReadonly = inject<Ref<boolean | null> | null>('formReadonly', null);
        const checkboxGroup = inject<LCheckboxGroupComponentPublicInstance | null>('limeCheckboxGroup', null);
        const checkboxGroupValue = inject<ComputedRef<any[]> | null>('limeCheckboxGroupValue', null);
        const checkboxGroupStatus = inject<ComputedRef<CheckboxStatus> | null>('limeCheckboxGroupStatus', null);
        const checkboxGroupCheckedSet = inject<ComputedRef<Set<any>> | null>('limeCheckboxGroupCheckedSet', null);
        const manageChildInList = inject<ManageChildInList | null>('limeCheckboxGroupManageChildInList', null);
        const onCheckedChange = inject<OnCheckedChange | null>('limeCheckboxGroupOnCheckedChange', null);
        if (manageChildInList != null) {
            manageChildInList(instance.proxy as LCheckboxComponentPublicInstance, true);
        }
        const max = computed((): number => checkboxGroup?.max ?? -1);
        const _innerChecked = ref(props.defaultChecked);
        const innerChecked = computed({
            set(value: boolean) {
                _innerChecked.value = value;
                emit('update:modelValue', value);
                emit('change', value);
            },
            get(): boolean {
                const value = (props.checked ?? props.modelValue);
                if (value != null)
                    return value;
                return _innerChecked.value;
                // return (props.checked ?? false) || (props.modelValue ?? false) || _innerChecked.value
                // return (props.checked ?? props.modelValue) || _innerChecked.value
            }
        } as WritableComputedOptions<boolean>);
        const isChecked = computed((): boolean => {
            if (props.checkAll) {
                const checkAllStatus = checkboxGroupStatus?.value ?? 'uncheck';
                return checkAllStatus == 'checked' || checkAllStatus == 'indeterminate';
            }
            const value = props.value ?? props.name;
            if (checkboxGroupCheckedSet != null && value != null) {
                return checkboxGroupCheckedSet.value.has(value);
            }
            return innerChecked.value;
        });
        const isDisabled = computed((): boolean => {
            if (max.value > -1 && checkboxGroupValue != null) {
                return max.value <= checkboxGroupValue.value.length && !isChecked.value;
            }
            if (props.disabled)
                return props.disabled;
            return formDisabled?.value ?? checkboxGroup?.disabled ?? false;
        });
        const isReadonly = computed((): boolean => {
            if (props.readonly)
                return props.readonly;
            return formReadonly?.value ?? checkboxGroup?.readonly ?? false;
        });
        const isIndeterminate = computed((): boolean => {
            if (props.checkAll && checkboxGroupStatus != null)
                return checkboxGroupStatus.value == 'indeterminate';
            return props.indeterminate;
        });
        const innerIcon = computed((): string => checkboxGroup?.icon ?? props.icon);
        const innerSize = computed((): string => checkboxGroup?.size ?? props.size);
        const innerIconSize = computed((): string | null => checkboxGroup?.iconSize ?? props.iconSize);
        const innerFontSize = computed((): string | null => checkboxGroup?.fontSize ?? props.fontSize);
        const innerCheckedColor = computed((): string | null => checkboxGroup?.checkedColor ?? props.checkedColor);
        const innerIconBgColor = computed((): string => props.iconBgColor ?? checkboxGroup?.iconBgColor ?? 'white');
        const innerIconBorderColor = computed((): string => props.iconBorderColor ?? checkboxGroup?.iconBorderColor ?? '#c5c5c5');
        const innerIconDisabledColor = computed((): string => props.iconDisabledColor ?? checkboxGroup?.iconDisabledColor ?? '#c5c5c5');
        const innerIconDisabledBgColor = computed((): string => props.iconDisabledBgColor ?? checkboxGroup?.iconDisabledBgColor ?? '#f3f3f3');
        const rootCasses = computed((): Map<string, boolean> => {
            const cls = new Map<string, boolean>();
            cls.set(`${name}--${props.size}`, true);
            cls.set(`${name}--disabled`, isDisabled.value);
            return cls;
        });
        const iconClasses = computed((): Map<string, boolean> => {
            const cls = new Map<string, boolean>();
            cls.set(`${name}__icon--disabled`, isDisabled.value);
            cls.set(`${name}__icon--${props.icon}`, true);
            cls.set(`${name}__icon--checked`, isChecked.value && innerCheckedColor.value == null);
            cls.set(`${name}__icon--indeterminate`, isIndeterminate.value && innerCheckedColor.value == null);
            return cls;
        });
        const labelClass = computed((): Map<string, boolean> => {
            const cls = new Map<string, boolean>();
            cls.set(`${name}__label--disabled`, isDisabled.value);
            return cls;
        });
        const styles = computed((): Map<string, any> => {
            const style = new Map<string, any>();
            if (checkboxGroup != null && checkboxGroup.gap != null) {
                style.set(checkboxGroup.direction == 'horizontal' ? 'margin-right' : 'margin-bottom', checkboxGroup.gap!);
            }
            return style;
        });
        const iconStyle = computed((): Map<string, any> => {
            const style = new Map<string, any>();
            if (innerIconSize.value != null) {
                style.set('width', innerIconSize.value!);
                style.set('height', innerIconSize.value!);
            }
            if (innerCheckedColor.value != null) {
                if (!isDisabled.value && !isChecked.value && ['dot', 'circle', 'rectangle'].includes(innerIcon.value)) {
                    style.set('background', innerIconBgColor.value);
                    style.set('border-color', innerIconBorderColor.value);
                }
                if (isDisabled.value && ['dot', 'circle', 'rectangle'].includes(innerIcon.value)) {
                    style.set('background', innerIconDisabledBgColor.value);
                    style.set('border-color', innerIconDisabledColor.value);
                }
                if (isChecked.value && ['dot', 'circle', 'rectangle'].includes(innerIcon.value)) {
                    style.set('background', innerCheckedColor.value!);
                    style.set('border-color', innerCheckedColor.value!);
                }
            }
            return style;
        });
        // const labelStyle = computed(():Map<string, any>=>{
        // 	const style = new Map<string, any>();
        // 	const fontSize = props.fontSize ?? checkboxGroup?.fontSize
        // 	if(fontSize != null) {
        // 		style.set('font-size', fontSize)
        // 	}
        // 	return style
        // })
        const labelStyles = computed((): any => {
            if (typeof props.labelStyle == 'string') {
                return `${props.labelStyle};` + (innerIconSize.value != null ? `font-size: ${innerIconSize.value!}` : '');
            }
            if (typeof props.labelStyle == 'object') {
                return UTSJSONObject.assign({}, (props.labelStyle ?? {}) as UTSJSONObject, innerFontSize.value != null ? { 'font-size': innerFontSize.value } : {});
            }
            return {};
        });
        const handleChange = (e: UniPointerEvent) => {
            if (isDisabled.value || isReadonly.value)
                return;
            const value = !isChecked.value;
            innerChecked.value = value;
            if (onCheckedChange != null) {
                onCheckedChange({
                    checked: value,
                    checkAll: props.checkAll,
                    value: props.value ?? props.name //?? instance.uid
                } as CheckboxChangeOptions);
            }
        };
        const iconRef = ref<UniElement | null>(null);
        const update = () => {
            if (iconRef.value == null)
                return;
            const ctx = iconRef.value!.getDrawableContext()!;
            const rect = iconRef.value!.getBoundingClientRect();
            const x = rect.width / 2;
            const y = rect.height / 2;
            ctx.reset();
            const drawIndeterminate = () => {
                ctx.strokeStyle = isDisabled.value
                    ? innerIconDisabledColor.value
                    : innerIcon.value == 'line'
                        ? props.checkedColor ?? '#3283ff'
                        : 'white';
                ctx.lineWidth = innerIcon.value == 'line' ? rect.width * 0.16 : rect.width * 0.12;
                const width = innerIcon.value == 'line' ? rect.width * 0.8 : rect.width * 0.5;
                ctx.beginPath();
                ctx.moveTo((rect.width - width) / 2, rect.height * 0.5);
                ctx.lineTo((rect.width - width) / 2 + width, rect.height * 0.5);
                ctx.stroke();
            };
            const drawCheckedIcon = () => {
                if (isDisabled.value) {
                    ctx.strokeStyle = innerIconDisabledColor.value;
                    ctx.fillStyle = innerIconDisabledColor.value;
                }
                else if (innerIcon.value == 'line') {
                    ctx.strokeStyle = props.checkedColor ?? '#3283ff';
                }
                else {
                    ctx.strokeStyle = 'white';
                    ctx.fillStyle = 'white';
                }
                ctx.lineWidth = innerIcon.value == 'line' ? rect.width * 0.16 : rect.width * 0.12;
                ctx.lineCap = 'round';
                if (innerIcon.value == 'circle' || innerIcon.value == 'rectangle') {
                    ctx.beginPath();
                    ctx.moveTo(rect.width * 0.2967, rect.height * 0.53);
                    ctx.lineTo(rect.width * 0.4342, rect.height * 0.6675);
                    ctx.lineTo(rect.width * 0.7092, rect.height * 0.3925);
                    ctx.stroke();
                }
                else if (innerIcon.value == 'line') {
                    ctx.beginPath();
                    ctx.moveTo(rect.width * 0.10, rect.height * 0.5466);
                    ctx.lineTo(rect.width * 0.3666, rect.height * 0.8134);
                    ctx.lineTo(rect.width * 0.90, rect.height * 0.28);
                    ctx.stroke();
                }
                else if (innerIcon.value == 'dot') {
                    ctx.beginPath();
                    ctx.arc(x, y, rect.width * 0.22, 0, Math.PI * 2);
                    ctx.fill();
                }
            };
            if (isIndeterminate.value) {
                drawIndeterminate();
            }
            else if (isChecked.value) {
                drawCheckedIcon();
            }
            ctx.update();
        };
        // onMounted(()=>{
        // 	nextTick(()=>{
        // 		watchEffect(update)
        // 	})
        // })
        const resizeObserver = new UniResizeObserver((entries: Array<UniResizeObserverEntry>) => {
            update();
        });
        const stopWatch = watch((): UniElement | null => iconRef.value, (el: UniElement | null) => {
            if (el == null)
                return;
            resizeObserver.observe(el);
        });
        watchEffect(update);
        onUnmounted(() => {
            stopWatch();
            resizeObserver.disconnect();
        });
        onBeforeUnmount(() => {
            if (manageChildInList != null) {
                manageChildInList(instance.proxy as LCheckboxComponentPublicInstance, false);
            }
        });
        return (): any | null => {
            return _cE("view", _uM({
                class: _nC(["l-checkbox", [unref(rootCasses)]]),
                style: _nS([unref(styles)]),
                onClick: handleChange
            }), [
                renderSlot(_ctx.$slots, "checkbox", _uM({
                    checked: unref(isChecked),
                    disabled: unref(isDisabled)
                }), (): any[] => [
                    renderSlot(_ctx.$slots, "icon", _uM({
                        checked: unref(isChecked),
                        disabled: unref(isDisabled)
                    }), (): any[] => [
                        _cE("view", _uM({
                            class: _nC(["l-checkbox__icon", unref(iconClasses)]),
                            ref_key: "iconRef",
                            ref: iconRef,
                            style: _nS([unref(iconStyle)])
                        }), null, 6 /* CLASS, STYLE */)
                    ]),
                    isTrue(_ctx.label != null || _ctx.$slots['default'] != null)
                        ? _cE("text", _uM({
                            key: 0,
                            class: _nC(["l-checkbox__label", unref(labelClass)]),
                            style: _nS([unref(labelStyles)])
                        }), [
                            renderSlot(_ctx.$slots, "default", {}, (): any[] => [_tD(_ctx.label)])
                        ], 6 /* CLASS, STYLE */)
                        : _cC("v-if", true)
                ])
            ], 6 /* CLASS, STYLE */);
        };
    }
});
export default __sfc__;
export type LCheckboxComponentPublicInstance = InstanceType<typeof __sfc__>;
const GenUniModulesLimeCheckboxComponentsLCheckboxLCheckboxStyles = [_uM([["l-checkbox", _pS(_uM([["flexDirection", "row"], ["alignItems", "center"]]))], ["l-checkbox__icon", _pS(_uM([["position", "relative"], ["boxSizing", "border-box"], ["width", "40rpx"], ["height", "40rpx"], ["alignSelf", "center"], ["transitionProperty", "all"], ["transitionDuration", "200ms"], ["transitionTimingFunction", "cubic-bezier(0.78,0.14,0.15,0.86)"]]))], ["l-checkbox__icon--rectangle", _uM([["", _uM([["borderTopLeftRadius", "6rpx"], ["borderTopRightRadius", "6rpx"], ["borderBottomRightRadius", "6rpx"], ["borderBottomLeftRadius", "6rpx"], ["backgroundColor", "#FFFFFF"], ["borderTopWidth", "1rpx"], ["borderRightWidth", "1rpx"], ["borderBottomWidth", "1rpx"], ["borderLeftWidth", "1rpx"], ["borderTopStyle", "solid"], ["borderRightStyle", "solid"], ["borderBottomStyle", "solid"], ["borderLeftStyle", "solid"], ["borderTopColor", "#c5c5c5"], ["borderRightColor", "#c5c5c5"], ["borderBottomColor", "#c5c5c5"], ["borderLeftColor", "#c5c5c5"]])], [".l-checkbox__icon--checked", _uM([["backgroundColor", "#3283ff"], ["borderTopColor", "#3283ff"], ["borderRightColor", "#3283ff"], ["borderBottomColor", "#3283ff"], ["borderLeftColor", "#3283ff"]])], [".l-checkbox__icon--indeterminate", _uM([["backgroundColor", "#3283ff"], ["borderTopColor", "#3283ff"], ["borderRightColor", "#3283ff"], ["borderBottomColor", "#3283ff"], ["borderLeftColor", "#3283ff"]])], [".l-checkbox__icon--disabled", _uM([["borderTopColor", "#c5c5c5"], ["borderRightColor", "#c5c5c5"], ["borderBottomColor", "#c5c5c5"], ["borderLeftColor", "#c5c5c5"], ["backgroundColor", "#f3f3f3"]])]])], ["l-checkbox__icon--dot", _uM([["", _uM([["borderTopLeftRadius", 99], ["borderTopRightRadius", 99], ["borderBottomRightRadius", 99], ["borderBottomLeftRadius", 99], ["backgroundColor", "#FFFFFF"], ["borderTopWidth", "1rpx"], ["borderRightWidth", "1rpx"], ["borderBottomWidth", "1rpx"], ["borderLeftWidth", "1rpx"], ["borderTopStyle", "solid"], ["borderRightStyle", "solid"], ["borderBottomStyle", "solid"], ["borderLeftStyle", "solid"], ["borderTopColor", "#c5c5c5"], ["borderRightColor", "#c5c5c5"], ["borderBottomColor", "#c5c5c5"], ["borderLeftColor", "#c5c5c5"]])], [".l-checkbox__icon--checked", _uM([["backgroundColor", "#3283ff"]])], [".l-checkbox__icon--indeterminate", _uM([["backgroundColor", "#3283ff"]])], [".l-checkbox__icon--disabled", _uM([["borderTopColor", "#c5c5c5"], ["borderRightColor", "#c5c5c5"], ["borderBottomColor", "#c5c5c5"], ["borderLeftColor", "#c5c5c5"], ["backgroundColor", "#f3f3f3"]])]])], ["l-checkbox__icon--circle", _uM([["", _uM([["borderTopLeftRadius", 99], ["borderTopRightRadius", 99], ["borderBottomRightRadius", 99], ["borderBottomLeftRadius", 99], ["backgroundColor", "#FFFFFF"], ["borderTopWidth", "1rpx"], ["borderRightWidth", "1rpx"], ["borderBottomWidth", "1rpx"], ["borderLeftWidth", "1rpx"], ["borderTopStyle", "solid"], ["borderRightStyle", "solid"], ["borderBottomStyle", "solid"], ["borderLeftStyle", "solid"], ["borderTopColor", "#c5c5c5"], ["borderRightColor", "#c5c5c5"], ["borderBottomColor", "#c5c5c5"], ["borderLeftColor", "#c5c5c5"]])], [".l-checkbox__icon--checked", _uM([["backgroundColor", "#3283ff"], ["borderTopColor", "#3283ff"], ["borderRightColor", "#3283ff"], ["borderBottomColor", "#3283ff"], ["borderLeftColor", "#3283ff"]])], [".l-checkbox__icon--indeterminate", _uM([["backgroundColor", "#3283ff"], ["borderTopColor", "#3283ff"], ["borderRightColor", "#3283ff"], ["borderBottomColor", "#3283ff"], ["borderLeftColor", "#3283ff"]])], [".l-checkbox__icon--disabled", _uM([["borderTopColor", "#c5c5c5"], ["borderRightColor", "#c5c5c5"], ["borderBottomColor", "#c5c5c5"], ["borderLeftColor", "#c5c5c5"], ["backgroundColor", "#f3f3f3"]])]])], ["l-checkbox__label", _pS(_uM([["paddingLeft", "16rpx"], ["fontSize", "32rpx"], ["color", "rgba(0,0,0,0.88)"]]))], ["l-checkbox__label--disabled", _pS(_uM([["color", "#c5c5c5"]]))], ["@TRANSITION", _uM([["l-checkbox__icon", _uM([["property", "all"], ["duration", "200ms"], ["timingFunction", "cubic-bezier(0.78,0.14,0.15,0.86)"]])]])]])];
import { LCheckboxGroupComponentPublicInstance } from "@/uni_modules/lime-checkbox/components/l-checkbox-group/l-checkbox-group.uvue";
//# sourceMappingURL=l-checkbox.uvue.map