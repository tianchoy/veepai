{"version":3,"sources":["uni_modules/lime-checkbox/components/l-checkbox-group/l-checkbox-group.uvue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n\t<view class=\"l-checkbox-group\" :class=\"'l-checkbox-group--'+ direction\">\r\n\t\t<slot />\r\n\t</view>\r\n</template>\r\n<script lang=\"uts\" setup>\r\n\t/**\r\n\t * CheckboxGroup 复选框组容器\r\n\t * @description 用于管理多个 Checkbox 组件，支持整体禁用、最大选择和布局控制\r\n\t * <br> 插件类型：LCheckboxGroupComponentPublicInstance \r\n\t * @tutorial https://ext.dcloud.net.cn/plugin?name=lime-checkbox-group\r\n\t * \r\n\t * @property {Boolean} disabled 是否禁用组件\r\n\t * @property {Boolean} readonly 是否只读组件\r\n\t * @property {Number} max 支持最多选中的数量\r\n\t * @property {String|Number} name 唯一标识\r\n\t * @property {String|Number} value 选中值\r\n\t * @property {'small' | 'medium' | 'large'} size 组件统一尺寸\r\n\t * @value small\r\n\t * @value medium\r\n\t * @value large\r\n\t * @property {String} direction 布局方向\r\n\t * @value horizontal 水平\r\n\t * @value vertical 垂直\r\n\t * @property {String} icon = [square|round|circle]  形状\r\n\t * @value circle\ticon 圆形\r\n\t * @value line\t    icon 线\r\n\t * @value rectangle\ticon 方形\r\n\t * @value dot\ticon 点状\r\n\t * @property {string} fontSize 文本统一字号\r\n\t * @property {string} iconSize 图标统一尺寸\r\n\t * @property {string} checkedColor 选中状态主题色\r\n\t * @property {string} iconBgColor 图标背景色\r\n\t * @property {string} iconBorderColor 图标边框色\r\n\t * @property {string} iconDisabledColor 禁用图标颜色\r\n\t * @property {string} iconDisabledBgColor 禁用背景色\r\n\t * @event {Function} change \r\n\t */\r\n\t\r\n\timport { CheckboxGroupProps } from './type';\r\n\timport { CheckboxChangeOptions } from '../l-checkbox/type';\r\n\timport { setCheckAllStatus } from './utils';\r\n\t\r\n\tconst emit = defineEmits(['update:value', 'update:modelValue', 'change']);\r\n\tconst props = withDefaults(defineProps<CheckboxGroupProps>(), {\r\n\t\tdisabled: false,\r\n\t\treadonly: false,\r\n\t\tsize: 'medium',\r\n\t\tdirection: 'horizontal',\r\n\t\ticon: 'rectangle'\r\n\t})\r\n\t\r\n\tconst _innerValue = ref(props.defaultValue ?? [])\r\n\tconst innerValue = computed({\r\n\t\tset(value: any[]){\r\n\t\t\t_innerValue.value = value\r\n\t\t\temit('change', value)\r\n\t\t\temit('update:value', value)\r\n\t\t\temit('update:modelValue', value)\r\n\t\t},\r\n\t\tget(): any[]{\r\n\t\t\treturn props.value ?? props.modelValue ?? _innerValue.value\r\n\t\t},\r\n\t} as WritableComputedOptions<any[]>)\r\n\t\r\n\tconst checkedSet = computed(():Set<any>=>{\r\n\t\tconst set = new Set<any>()\r\n\t\tif (Array.isArray(innerValue.value)) {\r\n\t\t\tinnerValue.value.forEach(item => {\r\n\t\t\t\tset.add(item)\r\n\t\t\t})\r\n\t\t}\r\n\t\treturn set\r\n\t});\r\n\tconst children = reactive<LCheckboxComponentPublicInstance[]>([]);\r\n\t// @ts-ignore\r\n\tconst checkAllStatus = setCheckAllStatus(children, innerValue, checkedSet);\r\n\tconst maxExceeded = computed(():boolean => {\r\n\t\treturn props.max != null && innerValue.value.length == props.max;\r\n\t});\r\n\r\n\tconst manageChildInList = (child: LCheckboxComponentPublicInstance, shouldAdd: boolean) => {\r\n\t\tconst index = children.indexOf(child);\r\n\t\tif(shouldAdd) {\r\n\t\t\tif(index != -1) return\r\n\t\t\tchildren.push(child)\r\n\t\t} else {\r\n\t\t\tif(index == -1) return\r\n\t\t\tchildren.splice(index, 1);\r\n\t\t}\r\n\t}\r\n\tconst handleCheckboxChange = (item: CheckboxChangeOptions) => {\r\n\t\tconst currentValue = item.value;\r\n\t\tif(Array.isArray(innerValue.value)) {\r\n\t\t\tif(currentValue == null) return;\r\n\t\t\tconst val = [...innerValue.value];\r\n\t\t\tif (item.checked) {\r\n\t\t\t\tval.push(currentValue);\r\n\t\t\t} else {\r\n\t\t\t\tconst i = val.indexOf(currentValue);\r\n\t\t\t\tval.splice(i, 1);\r\n\t\t\t}\r\n\t\t\tinnerValue.value = val\r\n\t\t} else {\r\n\t\t\tconsole.warn(`CheckboxGroup Warn: \\`value\\` must be an array, instead of ${typeof innerValue.value}`);\r\n\t\t}\r\n\t}\r\n\tconst getAllCheckboxValue = () : any[] => {\r\n\t\tconst arr:any[] = []\r\n\t\tfor (let i = 0, len = children.length; i < len; i++) {\r\n\t\t\tconst item = children[i];\r\n\t\t\tconst value = item.value ?? item.name //?? item.$.uid;\r\n\t\t\tif (item.checkAll) continue;\r\n\t\t\tif (value == null) continue;\r\n\t\t\tif(arr.includes(value)) continue;\r\n\t\t\tarr.push(value)\r\n\t\t\tif (maxExceeded.value) break;\r\n\t\t}\r\n\t\treturn arr\r\n\t};\r\n\tconst toggleAllCheckboxValues = () : any[] => {\r\n\t\tconst arr:any[] = []\r\n\t\t\r\n\t\tfor (let i = 0, len = children.length; i < len; i++) {\r\n\t\t\tconst item = children[i];\r\n\t\t\tconst value = item.value ?? item.name;\r\n\t\t\t\r\n\t\t\tif (item.checkAll) continue;\r\n\t\t\tif (value == null) continue;\r\n\t\t\tif(!checkedSet.value.has(value)) {\r\n\t\t\t\tarr.push(value)\r\n\t\t\t};\r\n\t\t\tif (maxExceeded.value) break;\r\n\t\t}\r\n\t\treturn arr;\r\n\t};\r\n\tconst onCheckAllChange = (checked: boolean) => {\r\n\t\tconst value = checked ? getAllCheckboxValue() : [];\r\n\t\tinnerValue.value = value;\r\n\t}\r\n\t\r\n\tconst onCheckedChange = (item: CheckboxChangeOptions) => {\r\n\t\tif(item.checkAll) {\r\n\t\t\tonCheckAllChange(item.checked);\r\n\t\t} else {\r\n\t\t\thandleCheckboxChange(item);\r\n\t\t}\r\n\t}\r\n\t\r\n\tconst toggleAll = (checked : boolean) => {\r\n\t\tconst value = checked ? getAllCheckboxValue() : toggleAllCheckboxValues();\r\n\t\tinnerValue.value = value\r\n\t}\r\n\t\r\n\t\r\n\tdefineExpose({\r\n\t\ttoggleAll\r\n\t})\r\n\t\r\n\tprovide('limeCheckboxGroup', props)\r\n\tprovide('limeCheckboxGroupValue', innerValue)\r\n\tprovide('limeCheckboxGroupStatus', checkAllStatus)\r\n\tprovide('limeCheckboxGroupCheckedSet', checkedSet)\r\n\tprovide('limeCheckboxGroupManageChildInList', manageChildInList)\r\n\tprovide('limeCheckboxGroupOnCheckedChange', onCheckedChange)\r\n\t// const optionList = getOptions(props, children);\r\n\t\r\n</script>\r\n<style lang=\"scss\">\r\n\t.l-checkbox-group {\r\n\t\tflex-direction: row;\r\n\t}\r\n\r\n\t.l-checkbox-group--vertical {\r\n\t\tflex-direction: column;\r\n\t}\r\n</style>"]}