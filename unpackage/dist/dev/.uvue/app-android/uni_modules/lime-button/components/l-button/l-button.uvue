import _easycom_l_loading from '@/uni_modules/lime-loading/components/l-loading/l-loading.uvue';
import _easycom_l_icon from '@/uni_modules/lime-icon/components/l-icon/l-icon.uvue';
import { ButtonProps } from './type';
const __sfc__ = defineComponent({
    __name: 'l-button',
    behaviors: ['wx://form-field-button'],
    __props: ButtonProps,
    props: {
        ariaLabel: { type: String, required: false },
        lId: { type: String, required: false },
        content: { type: String, required: false },
        block: { type: Boolean, required: true, default: false },
        disabled: { type: Boolean, required: true, default: false },
        ghost: { type: Boolean, required: true, default: false },
        icon: { type: String, required: false },
        iconSize: { type: String, required: false },
        loading: { type: Boolean, required: true, default: false },
        loadingProps: { type: UTSJSONObject, required: false },
        shape: { type: String, required: true, default: 'rectangle' },
        size: { type: String, required: true, default: 'medium' },
        suffix: { type: String, required: false },
        type: { type: String, required: true, default: 'default' },
        variant: { type: String, required: false },
        radius: { type: String, required: false },
        fontSize: { type: String, required: false },
        textColor: { type: String, required: false },
        color: { type: String, required: false },
        lStyle: { type: String, required: false },
        gap: { type: String, required: false },
        formType: { type: String, required: false },
        openType: { type: String, required: false },
        hoverClass: { type: String, required: false },
        hoverStopPropagation: { type: Boolean, required: true, default: false },
        hoverStartTime: { type: Number, required: true, default: 20 },
        hoverStayTime: { type: Number, required: true, default: 70 },
        lang: { type: String, required: true, default: 'en' },
        sessionFrom: { type: String, required: true, default: '' },
        sendMessageTitle: { type: String, required: true, default: '' },
        sendMessagePath: { type: String, required: true, default: '' },
        sendMessageImg: { type: String, required: true, default: '' },
        appParameter: { type: String, required: true, default: '' },
        showMessageCard: { type: Boolean, required: true, default: false }
    },
    emits: ['click', 'agreeprivacyauthorization', 'chooseavatar', 'getuserinfo', 'contact', 'getphonenumber', 'error', 'opensetting', 'launchapp'],
    setup(__props): any | null {
        const __ins = getCurrentInstance()!;
        const _ctx = __ins.proxy as InstanceType<typeof __sfc__>;
        const _cache = __ins.renderCache;
        /**
         * Button 按钮组件
         * @description 提供丰富的按钮样式和交互功能，支持多种形态和平台特性
         * <br> 插件类型：LButtonComponentPublicInstance
         * @tutorial https://ext.dcloud.net.cn/plugin?name=lime-button
         *
         * @property {string} ariaLabel 无障碍标签（用于屏幕阅读器）
         * @property {boolean} block 块级布局（占满父容器宽度）
         * @property {boolean} disabled 禁用状态
         * @property {boolean} ghost 幽灵模式（透明背景+边框）
         * @property {string} icon 左侧图标名称/路径
         * @property {string} iconSize 图标尺寸（支持CSS单位）
         * @property {boolean} loading 加载状态（显示加载动画）
         * @property {UTSJSONObject} loadingProps 加载动画配置
         * @property {'rectangle' | 'square' | 'round' | 'circle'} shape 按钮形状
         * @value rectangle 长方形（默认）
         * @value square 正方形
         * @value round 圆角矩形
         * @value circle 圆形
         * @property {SizeEnum} size 按钮尺寸
         * @value mini 小号
         * @value small 小号
         * @value medium 中号（默认）
         * @value large 大号
         * @property {string} suffix 右侧附加内容（图标/文本）
         * @property {'default' | 'primary' | 'danger' | 'warning' | 'success' | 'info'} type 色彩类型
         * @value default
         * @value primary
         * @value danger
         * @value warning
         * @value success
         * @value info
         * @property {'solid' | 'outline' | 'text' | 'light' | 'dashed'} variant 样式变体
         * @value solid
         * @value outline
         * @value text
         * @value light
         * @value dashed
         * @property {string} radius 自定义圆角（覆盖shape设置）
         * @property {string} fontSize 文字字号（支持CSS单位）
         * @property {string} textColor 文字颜色（支持CSS颜色值）
         * @property {string} color 主色（背景/边框色）
         *
         * @platform 微信小程序
         * @property {string} formType 表单类型（submit/reset）
         * @property {string} openType 开放能力（contact/share等）
         * @property {string} lang 用户信息语言（zh_CN/zh_TW/en）
         * @property {string} sessionFrom 会话来源（contact模式有效）
         * @property {string} sendMessageTitle 消息卡片标题（contact模式有效）
         * @property {string} sendMessagePath 消息跳转路径（contact模式有效）
         * @property {string} sendMessageImg 消息卡片图片（contact模式有效）
         * @property {string} appParameter APP启动参数（launchApp模式）
         * @property {boolean} showMessageCard 显示消息卡片提示
         *
         * @property {string} hoverClass 点击态样式类（默认：button-hover）
         * @property {boolean} hoverStopPropagation 阻止祖先点击态
         * @property {number} hoverStartTime 点击态延迟（默认：20ms）
         * @property {number} hoverStayTime 点击态保留时间（默认：70ms）
         * @event {Function} click 点击事件（禁用状态下不触发）
         * @event {Function} getuserinfo 用户信息授权回调
         * @event {Function} contact 客服会话回调
         * @event {Function} agreeprivacyauthorization
         * @event {Function} chooseavatar
         * @event {Function} getphonenumber
         * @event {Function} error
         * @event {Function} opensetting
         * @event {Function} launchapp
         */
        function emit(event: string, ...do_not_transform_spread: Array<any | null>) {
            __ins.emit(event, ...do_not_transform_spread);
        }
        const props = __props;
        const instance = getCurrentInstance();
        // const rootRef = ref<UniElement|null>(null)
        const buttonTextRef = ref<UniTextElement | null>(null);
        const hasContent = computed((): boolean => {
            return props.content != null || instance?.proxy?.$slots?.['default'] != null;
        });
        const variant = computed((): string => props.variant ?? (props.color != null ? 'solid' : (props.type == 'default' ? 'outline' : 'solid')));
        const classes = computed((): Map<string, any> => {
            const cls = new Map<string, any>();
            const name = 'l-button';
            cls.set(`${name}--${props.size}`, true);
            cls.set(`${name}--${props.type}`, true);
            cls.set(`${name}--${variant.value}`, true);
            cls.set(`${name}--${props.shape}`, true);
            cls.set(`${name}--disabled`, props.disabled);
            cls.set(`${name}--loading`, props.loading);
            cls.set(`${name}--ghost`, props.ghost);
            cls.set(`${name}--block`, props.block);
            return cls;
        });
        const styles = computed((): Map<string, any> => {
            const style = new Map<string, any>();
            if (props.radius != null) {
                style.set('border-radius', props.radius!);
            }
            if (props.color != null) {
                if (variant.value == 'solid') {
                    style.set('background', props.color!);
                }
                else if (['outline', 'dashed'].includes(variant.value)) {
                    style.set('border-color', props.color!);
                }
            }
            return style;
        });
        const sizes = new Map<string, string>([
            ['mini', '16px'],
            ['small', '18px'],
            ['medium', '18px'],
            ['large', '24px'],
        ]);
        const innerIconSize = computed((): string | null => {
            return props.iconSize ?? props.fontSize ?? sizes.get(props.size);
        });
        const colors = new Map<string, string>([
        // ['default', 'rgba(0,0,0,0.88)'],
        // ['primary', '#3283ff'],
        // ['danger', '#FF4D4F'],
        // ['warning', '#ffb400'],
        // ['success', '#34c471'],
        // ['info', '#3283ff'],
        ]);
        const loadingColor = computed((): string | null => {
            return props.textColor ?? (variant.value == 'solid' ? 'white' : buttonTextRef.value?.style.getPropertyValue('color') as string | null) ?? ''; //colors.get(props.type))
        });
        const gapClass = computed((): string => {
            return props.loading || props.icon != null ? 'gap' : '';
        });
        const contentStyle = computed((): Map<string, any> => {
            const style = new Map<string, any>();
            if (props.gap != null && (props.loading || props.icon != null)) {
                style.set('margin-left', props.gap!);
            }
            if (props.textColor != null || props.color != null && variant.value != 'solid') {
                style.set('color', (props.textColor ?? props.color)!);
            }
            if (props.fontSize != null) {
                style.set('font-size', props.fontSize!);
            }
            return style;
        });
        const getuserinfo = (e: UniEvent) => {
            emit('getuserinfo', e);
        };
        const contact = (e: UniEvent) => {
            emit('contact', e);
        };
        const getphonenumber = (e: UniEvent) => {
            emit('getphonenumber', e);
        };
        const error = (e: UniEvent) => {
            emit('error', e);
        };
        const opensetting = (e: UniEvent) => {
            emit('opensetting', e);
        };
        const launchapp = (e: UniEvent) => {
            emit('launchapp', e);
        };
        const chooseavatar = (e: UniEvent) => {
            emit('chooseavatar', e);
        };
        const agreeprivacyauthorization = (e: UniEvent) => {
            emit('agreeprivacyauthorization', e);
        };
        const handleTap = (e: UniPointerEvent) => {
            if (props.disabled || props.loading)
                return;
            emit('click', e);
        };
        return (): any | null => {
            const _component_l_loading = resolveEasyComponent("l-loading", _easycom_l_loading);
            const _component_l_icon = resolveEasyComponent("l-icon", _easycom_l_icon);
            return createElementVNode("view", utsMapOf({
                class: normalizeClass(["l-button", unref(classes)]),
                ref: "rootRef",
                "hover-class": _ctx.disabled || _ctx.loading || _ctx.color != null ? '' : _ctx.hoverClass ?? 'hover',
                style: normalizeStyle([unref(styles), _ctx.lStyle]),
                "hover-start-time": _ctx.hoverStartTime,
                "hover-stay-time": _ctx.hoverStayTime,
                "data-disabled": _ctx.disabled || _ctx.loading,
                onClick: withModifiers(handleTap, ["stop"])
            }), [
                isTrue(_ctx.loading)
                    ? createVNode(_component_l_loading, utsMapOf({
                        key: 0,
                        class: "l-button__loading",
                        color: unref(loadingColor)
                    }), null, 8 /* PROPS */, ["color"])
                    : createCommentVNode("v-if", true),
                isTrue(_ctx.icon)
                    ? createVNode(_component_l_icon, utsMapOf({
                        key: 1,
                        class: "l-button__icon",
                        size: unref(innerIconSize),
                        color: unref(loadingColor),
                        name: _ctx.icon
                    }), null, 8 /* PROPS */, ["size", "color", "name"])
                    : createCommentVNode("v-if", true),
                createElementVNode("text", utsMapOf({
                    class: normalizeClass(["l-button__content", unref(gapClass)]),
                    ref_key: "buttonTextRef",
                    ref: buttonTextRef,
                    style: normalizeStyle([unref(contentStyle)])
                }), [
                    renderSlot(_ctx.$slots, "default", {}, (): any[] => [toDisplayString(_ctx.content)])
                ], 6 /* CLASS, STYLE */),
                isTrue(_ctx.formType != null || _ctx.openType != null)
                    ? createElementVNode("button", utsMapOf({
                        key: 2,
                        class: "l-button__button",
                        "hover-class": "none",
                        onAgreeprivacyauthorization: agreeprivacyauthorization,
                        disabled: _ctx.disabled || _ctx.loading,
                        "form-type": _ctx.disabled || _ctx.loading ? '' : _ctx.formType,
                        "open-type": _ctx.disabled || _ctx.loading ? '' : _ctx.openType
                    }), null, 40 /* PROPS, NEED_HYDRATION */, ["disabled", "form-type", "open-type"])
                    : createCommentVNode("v-if", true)
            ], 14 /* CLASS, STYLE, PROPS */, ["hover-class", "hover-start-time", "hover-stay-time", "data-disabled"]);
        };
    }
});
export default __sfc__;
export type LButtonComponentPublicInstance = InstanceType<typeof __sfc__>;
const GenUniModulesLimeButtonComponentsLButtonLButtonStyles = [utsMapOf([["l-button--mini", utsMapOf([["", utsMapOf([["paddingTop", 0], ["paddingRight", "16rpx"], ["paddingBottom", 0], ["paddingLeft", "16rpx"], ["height", "56rpx"]])], [".l-button--square", utsMapOf([["width", "56rpx"], ["paddingLeft", 0], ["paddingRight", 0]])], [".l-button--circle", utsMapOf([["width", "56rpx"], ["paddingLeft", 0], ["paddingRight", 0]])]])], ["l-button__content", utsMapOf([[".l-button--mini ", utsMapOf([["fontSize", 12]])], [".l-button--small ", utsMapOf([["fontSize", 14]])], [".l-button--medium ", utsMapOf([["fontSize", 16]])], [".l-button--large ", utsMapOf([["fontSize", 16]])], [".l-button--default ", utsMapOf([["color", "rgba(0,0,0,0.88)"]])], [".l-button--primary ", utsMapOf([["color", "#3283ff"]])], [".l-button--danger ", utsMapOf([["color", "#FF4D4F"]])], [".l-button--info ", utsMapOf([["color", "#3283ff"]])], [".l-button--warning ", utsMapOf([["color", "#ffb400"]])], [".l-button--success ", utsMapOf([["color", "#34c471"]])], [".l-button--solid ", utsMapOf([["color", "#FFFFFF"]])]])], ["l-button--small", utsMapOf([["", utsMapOf([["paddingTop", 0], ["paddingRight", "24rpx"], ["paddingBottom", 0], ["paddingLeft", "24rpx"], ["height", "64rpx"]])], [".l-button--square", utsMapOf([["width", "64rpx"], ["paddingLeft", 0], ["paddingRight", 0]])], [".l-button--circle", utsMapOf([["width", "64rpx"], ["paddingLeft", 0], ["paddingRight", 0]])]])], ["l-button--medium", utsMapOf([["", utsMapOf([["paddingTop", 0], ["paddingRight", "32rpx"], ["paddingBottom", 0], ["paddingLeft", "32rpx"], ["height", "80rpx"]])], [".l-button--square", utsMapOf([["width", "80rpx"], ["paddingLeft", 0], ["paddingRight", 0]])], [".l-button--circle", utsMapOf([["width", "80rpx"], ["paddingLeft", 0], ["paddingRight", 0]])]])], ["l-button--large", utsMapOf([["", utsMapOf([["paddingTop", 0], ["paddingRight", "48rpx"], ["paddingBottom", 0], ["paddingLeft", "48rpx"], ["height", "96rpx"]])], [".l-button--square", utsMapOf([["width", "96rpx"], ["paddingLeft", 0], ["paddingRight", 0]])], [".l-button--circle", utsMapOf([["width", "96rpx"], ["paddingLeft", 0], ["paddingRight", 0]])]])], ["hover", utsMapOf([[".l-button--default", utsMapOf([["backgroundColor", "#eeeeee"]])], [".l-button--default.l-button--solid", utsMapOf([["backgroundColor", "#000000"]])], [".l-button--default.l-button--light", utsMapOf([["backgroundColor", "#e7e7e7"]])], [".l-button--primary", utsMapOf([["backgroundColor", "#F0F8FF"]])], [".l-button--primary.l-button--solid", utsMapOf([["backgroundColor", "#2164d9"]])], [".l-button--primary.l-button--light", utsMapOf([["backgroundColor", "#d6ecff"]])], [".l-button--danger", utsMapOf([["backgroundColor", "#fff2f0"]])], [".l-button--danger.l-button--solid", utsMapOf([["backgroundColor", "#d9363e"]])], [".l-button--danger.l-button--light", utsMapOf([["backgroundColor", "#ffccc7"]])], [".l-button--info", utsMapOf([["backgroundColor", "#d6ecff"]])], [".l-button--info.l-button--solid", utsMapOf([["backgroundColor", "#2164d9"]])], [".l-button--info.l-button--light", utsMapOf([["backgroundColor", "#add6ff"]])], [".l-button--warning", utsMapOf([["backgroundColor", "#fffce6"]])], [".l-button--warning.l-button--solid", utsMapOf([["backgroundColor", "#d99100"]])], [".l-button--warning.l-button--light", utsMapOf([["backgroundColor", "#fff0a3"]])], [".l-button--success", utsMapOf([["backgroundColor", "#f0fff4"]])], [".l-button--success.l-button--solid", utsMapOf([["backgroundColor", "#239e5a"]])], [".l-button--success.l-button--light", utsMapOf([["backgroundColor", "#e1f7e7"]])]])], ["l-button--default", utsMapOf([[".l-button--solid", utsMapOf([["backgroundColor", "rgba(0,0,0,0.88)"]])], [".l-button--outline", utsMapOf([["borderTopColor", "#c5c5c5"], ["borderRightColor", "#c5c5c5"], ["borderBottomColor", "#c5c5c5"], ["borderLeftColor", "#c5c5c5"]])], [".l-button--dashed", utsMapOf([["borderTopColor", "#c5c5c5"], ["borderRightColor", "#c5c5c5"], ["borderBottomColor", "#c5c5c5"], ["borderLeftColor", "#c5c5c5"]])], [".l-button--light", utsMapOf([["backgroundColor", "#eeeeee"]])], [".l-button--ghost", utsMapOf([["backgroundColor", "rgba(0,0,0,0)"], ["borderTopColor", "#c5c5c5"], ["borderRightColor", "#c5c5c5"], ["borderBottomColor", "#c5c5c5"], ["borderLeftColor", "#c5c5c5"]])]])], ["l-button--primary", utsMapOf([[".l-button--solid", utsMapOf([["backgroundColor", "#3283ff"]])], [".l-button--outline", utsMapOf([["borderTopColor", "#3283ff"], ["borderRightColor", "#3283ff"], ["borderBottomColor", "#3283ff"], ["borderLeftColor", "#3283ff"]])], [".l-button--dashed", utsMapOf([["borderTopColor", "#3283ff"], ["borderRightColor", "#3283ff"], ["borderBottomColor", "#3283ff"], ["borderLeftColor", "#3283ff"]])], [".l-button--light", utsMapOf([["backgroundColor", "#F0F8FF"]])], [".l-button--ghost", utsMapOf([["backgroundColor", "rgba(0,0,0,0)"], ["borderTopColor", "#3283ff"], ["borderRightColor", "#3283ff"], ["borderBottomColor", "#3283ff"], ["borderLeftColor", "#3283ff"]])]])], ["l-button--danger", utsMapOf([[".l-button--solid", utsMapOf([["backgroundColor", "#FF4D4F"]])], [".l-button--outline", utsMapOf([["borderTopColor", "#FF4D4F"], ["borderRightColor", "#FF4D4F"], ["borderBottomColor", "#FF4D4F"], ["borderLeftColor", "#FF4D4F"]])], [".l-button--dashed", utsMapOf([["borderTopColor", "#FF4D4F"], ["borderRightColor", "#FF4D4F"], ["borderBottomColor", "#FF4D4F"], ["borderLeftColor", "#FF4D4F"]])], [".l-button--light", utsMapOf([["backgroundColor", "#fff2f0"]])], [".l-button--ghost", utsMapOf([["backgroundColor", "rgba(0,0,0,0)"], ["borderTopColor", "#FF4D4F"], ["borderRightColor", "#FF4D4F"], ["borderBottomColor", "#FF4D4F"], ["borderLeftColor", "#FF4D4F"]])]])], ["l-button--info", utsMapOf([[".l-button--solid", utsMapOf([["backgroundColor", "#3283ff"]])], [".l-button--outline", utsMapOf([["borderTopColor", "#3283ff"], ["borderRightColor", "#3283ff"], ["borderBottomColor", "#3283ff"], ["borderLeftColor", "#3283ff"]])], [".l-button--dashed", utsMapOf([["borderTopColor", "#3283ff"], ["borderRightColor", "#3283ff"], ["borderBottomColor", "#3283ff"], ["borderLeftColor", "#3283ff"]])], [".l-button--light", utsMapOf([["backgroundColor", "#d6ecff"]])], [".l-button--ghost", utsMapOf([["backgroundColor", "rgba(0,0,0,0)"], ["borderTopColor", "#3283ff"], ["borderRightColor", "#3283ff"], ["borderBottomColor", "#3283ff"], ["borderLeftColor", "#3283ff"]])]])], ["l-button--warning", utsMapOf([[".l-button--solid", utsMapOf([["backgroundColor", "#ffb400"]])], [".l-button--outline", utsMapOf([["borderTopColor", "#ffb400"], ["borderRightColor", "#ffb400"], ["borderBottomColor", "#ffb400"], ["borderLeftColor", "#ffb400"]])], [".l-button--dashed", utsMapOf([["borderTopColor", "#ffb400"], ["borderRightColor", "#ffb400"], ["borderBottomColor", "#ffb400"], ["borderLeftColor", "#ffb400"]])], [".l-button--light", utsMapOf([["backgroundColor", "#fffce6"]])], [".l-button--ghost", utsMapOf([["backgroundColor", "rgba(0,0,0,0)"], ["borderTopColor", "#ffb400"], ["borderRightColor", "#ffb400"], ["borderBottomColor", "#ffb400"], ["borderLeftColor", "#ffb400"]])]])], ["l-button--success", utsMapOf([[".l-button--solid", utsMapOf([["backgroundColor", "#34c471"]])], [".l-button--outline", utsMapOf([["borderTopColor", "#34c471"], ["borderRightColor", "#34c471"], ["borderBottomColor", "#34c471"], ["borderLeftColor", "#34c471"]])], [".l-button--dashed", utsMapOf([["borderTopColor", "#34c471"], ["borderRightColor", "#34c471"], ["borderBottomColor", "#34c471"], ["borderLeftColor", "#34c471"]])], [".l-button--light", utsMapOf([["backgroundColor", "#f0fff4"]])], [".l-button--ghost", utsMapOf([["backgroundColor", "rgba(0,0,0,0)"], ["borderTopColor", "#34c471"], ["borderRightColor", "#34c471"], ["borderBottomColor", "#34c471"], ["borderLeftColor", "#34c471"]])]])], ["l-button", utsMapOf([["", utsMapOf([["opacity", 1], ["position", "relative"], ["alignItems", "center"], ["justifyContent", "center"], ["flexDirection", "row"], ["transitionDuration", "200ms"], ["transitionProperty", "backgroundColor,opacity,borderColor,width,height"], ["borderTopLeftRadius", "6rpx"], ["borderTopRightRadius", "6rpx"], ["borderBottomRightRadius", "6rpx"], ["borderBottomLeftRadius", "6rpx"]])], [".l-button--disabled", utsMapOf([["opacity", 0.6]])]])], ["l-button__button", padStyleMapOf(utsMapOf([["position", "absolute"], ["left", 0], ["right", 0], ["top", 0], ["bottom", 0], ["borderTopWidth", "medium"], ["borderRightWidth", "medium"], ["borderBottomWidth", "medium"], ["borderLeftWidth", "medium"], ["borderTopStyle", "none"], ["borderRightStyle", "none"], ["borderBottomStyle", "none"], ["borderLeftStyle", "none"], ["borderTopColor", "#000000"], ["borderRightColor", "#000000"], ["borderBottomColor", "#000000"], ["borderLeftColor", "#000000"], ["backgroundColor", "rgba(0,0,0,0)"]]))], ["l-button--block", padStyleMapOf(utsMapOf([["width", "100%"], ["alignSelf", "auto"]]))], ["l-button__icon", utsMapOf([[".l-button--solid ", utsMapOf([["color", "#FFFFFF"]])], ["", utsMapOf([["alignSelf", "center"]])]])], ["l-button--outline", padStyleMapOf(utsMapOf([["borderTopStyle", "solid"], ["borderRightStyle", "solid"], ["borderBottomStyle", "solid"], ["borderLeftStyle", "solid"], ["borderTopWidth", 0.71], ["borderRightWidth", 0.71], ["borderBottomWidth", 0.71], ["borderLeftWidth", 0.71]]))], ["l-button--dashed", padStyleMapOf(utsMapOf([["borderTopStyle", "dashed"], ["borderRightStyle", "dashed"], ["borderBottomStyle", "dashed"], ["borderLeftStyle", "dashed"], ["borderTopWidth", 0.71], ["borderRightWidth", 0.71], ["borderBottomWidth", 0.71], ["borderLeftWidth", 0.71]]))], ["l-button__loading", padStyleMapOf(utsMapOf([["alignSelf", "center"]]))], ["l-button--round", padStyleMapOf(utsMapOf([["borderTopLeftRadius", 999], ["borderTopRightRadius", 999], ["borderBottomRightRadius", 999], ["borderBottomLeftRadius", 999]]))], ["l-button--circle", padStyleMapOf(utsMapOf([["borderTopLeftRadius", 999], ["borderTopRightRadius", 999], ["borderBottomRightRadius", 999], ["borderBottomLeftRadius", 999]]))], ["gap", utsMapOf([[".l-button ", utsMapOf([["marginLeft", 4]])]])], ["@TRANSITION", utsMapOf([["l-button", utsMapOf([["duration", "200ms"], ["property", "backgroundColor,opacity,borderColor,width,height"]])]])]])];
//# sourceMappingURL=l-button.uvue.map