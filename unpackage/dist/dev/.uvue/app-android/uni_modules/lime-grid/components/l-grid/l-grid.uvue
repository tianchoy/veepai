import { GridProps, GridProvide } from './type';
const __sfc__ = defineComponent({
    __name: 'l-grid',
    __props: GridProps,
    props: {
        align: { type: String, required: true, default: 'center' },
        border: { type: Boolean, required: true, default: false },
        column: { type: Number, required: true, default: 4 },
        gutter: { type: Number, required: true, default: 0 },
        hover: { type: Boolean, required: true, default: false },
        inset: { type: Boolean, required: true, default: false },
        gridWidth: { type: String, required: false },
        padding: { type: String, required: false },
        bgColor: { type: String, required: false },
        wrap: { type: Boolean, required: true, default: true }
    },
    setup(__props) {
        const __ins = getCurrentInstance()!;
        const _ctx = __ins.proxy as InstanceType<typeof __sfc__>;
        const _cache = __ins.renderCache;
        /**
         * Grid 栅格布局组件
         * @description 用于实现瀑布流、等分等网格布局场景
         * <br> 插件类型：LGridComponentPublicInstance
         * @tutorial https://ext.dcloud.net.cn/plugin?name=lime-grid
         *
         * @property {'left'|'center'} align 内容对齐方式
         * @value left 左对齐
         * @value center 居中对齐
         * @property {boolean} border 是否显示边框
         * @property {number} column 列数（0表示使用固定尺寸布局）
         * @property {number} gutter 网格间隔（单位px/rpx）
         * @property {boolean} hover 是否启用点击反馈效果
         * @property {boolean} inset 卡片式圆角风格
         * @property {string} [gridWidth] 固定尺寸布局时的网格宽度（支持CSS单位）
         * @property {string} [padding] 内边距（支持CSS简写格式）
         * @property {string} [bgColor] 背景颜色（卡片式布局生效）
         * @property {boolean} wrap 超出是否换行
         */
        const props = __props;
        const clsses = computed((): Map<string, any> => {
            const cls = new Map<string, any>();
            cls.set(`l-grid--wrap`, props.wrap);
            cls.set(`l-grid--inset`, props.inset);
            cls.set(`l-grid--bordered`, props.border && props.gutter == 0);
            return cls;
        });
        const resizeRef = ref<UniElement | null>(null);
        const width = ref<number>(0);
        const children = ref<number[]>([]);
        const resizeObserver = new UniResizeObserver((entries: Array<UniResizeObserverEntry>) => {
            const rect = entries[0].target.getBoundingClientRect();
            width.value = rect.width;
        });
        const stopWatch = watch((): UniElement | null => resizeRef.value, (el: UniElement | null) => {
            if (el == null)
                return;
            resizeObserver.observe(el);
        });
        onUnmounted(() => {
            stopWatch();
            resizeObserver.disconnect();
        });
        provide('limeGrid', {
            children,
            props,
            width
        } as GridProvide);
        return (): any | null => {
            return _cE("view", _uM({
                class: _nC(["l-grid", unref(clsses)]),
                ref_key: "resizeRef",
                ref: resizeRef
            }), [
                renderSlot(_ctx.$slots, "default")
            ], 2 /* CLASS */);
        };
    }
});
export default __sfc__;
export type LGridComponentPublicInstance = InstanceType<typeof __sfc__>;
const GenUniModulesLimeGridComponentsLGridLGridStyles = [_uM([["l-grid", _pS(_uM([["position", "relative"], ["overflow", "visible"], ["flexDirection", "row"]]))], ["l-grid--wrap", _pS(_uM([["flexWrap", "wrap"]]))], ["l-grid--inset", _pS(_uM([["marginTop", 0], ["marginRight", "32rpx"], ["marginBottom", 0], ["marginLeft", "32rpx"], ["borderTopLeftRadius", "18rpx"], ["borderTopRightRadius", "18rpx"], ["borderBottomRightRadius", "18rpx"], ["borderBottomLeftRadius", "18rpx"], ["overflow", "hidden"]]))]])];
//# sourceMappingURL=l-grid.uvue.map