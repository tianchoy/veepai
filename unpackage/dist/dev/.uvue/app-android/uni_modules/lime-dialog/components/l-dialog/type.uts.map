{"version":3,"file":"type.uts","sourceRoot":"","sources":["uni_modules/lime-dialog/components/l-dialog/type.ts"],"names":[],"mappings":"AAAA,cAAc;AACd,MAAM,WAAW,WAAW;IAC3B;;OAEG;IACH,OAAO,CAAC,EAAE,aAAa,EAAE,CAAC;IAC1B;;OAEG;IACH,YAAY,EAAE,YAAY,GAAG,UAAU,CAAC;IACxC;;OAEG;IACH,SAAS,CAAC,EAAE,GAAG,CAAC;IAChB,kCAAkC;IAClC;;OAEG;IACH,QAAQ,CAAC,EAAE,OAAO,CAAC;IACnB,uBAAuB;IACvB,sBAAsB;IACrB;;QAEI;IACL,mBAAmB,EAAE,OAAO,CAAC;IAC7B;;SAEK;IACL,UAAU,CAAC,EAAE,GAAG,CAAC;IACjB,mCAAmC;IACnC;;SAEK;IACL,OAAO,CAAC,EAAE,MAAM,CAAC;IACjB;;SAEK;IACL,gCAAgC;IAChC,YAAY,CAAC,EAAE,MAAM,CAAC;IACrB;;QAEI;IACL,oBAAoB,EAAE,OAAO,CAAC;IAC9B;;SAEK;IACL,OAAO,EAAE,OAAO,CAAC;IACjB;;SAEK;IACL,KAAK,CAAC,EAAE,MAAM,CAAC;IACd;;QAEI;IACL,OAAQ,CAAC,EAAE,OAAO,CAAC;IACnB;;SAEK;IACL,MAAM,CAAC,EAAE,MAAM,CAAC;IAChB;;SAEK;IACL,MAAM,CAAC,EAAE,MAAM,CAAC;CAChB;AAED,MAAM,MAAM,aAAa,GAAG;IAC3B;;OAEG;IACH,OAAO,CAAC,EAAE,aAAa,EAAE,CAAC;IAC1B;;OAEG;IACH,YAAY,CAAC,EAAE,YAAY,GAAG,UAAU,CAAC;IACzC;;OAEG;IACH,SAAS,CAAC,EAAE,GAAG,CAAC;IAChB,kCAAkC;IAClC;;OAEG;IACH,QAAQ,CAAC,EAAE,OAAO,CAAC;IACnB,uBAAuB;IACvB,sBAAsB;IACrB;;QAEI;IACL,mBAAmB,CAAC,EAAE,OAAO,CAAC;IAC9B;;SAEK;IACL,UAAU,CAAC,EAAE,GAAG,CAAC;IACjB,mCAAmC;IACnC;;SAEK;IACL,OAAO,CAAC,EAAE,MAAM,CAAC;IACjB;;SAEK;IACL,gCAAgC;IAChC,YAAY,CAAC,EAAE,MAAM,CAAC;IACrB;;QAEI;IACL,oBAAoB,CAAC,EAAE,OAAO,CAAC;IAC/B;;SAEK;IACL,OAAO,CAAC,EAAE,OAAO,CAAC;IAClB;;SAEK;IACL,KAAK,CAAC,EAAE,MAAM,CAAC;IACd;;QAEI;IACL,OAAQ,CAAC,EAAE,OAAO,CAAC;IACnB;;SAEK;IACL,MAAM,CAAC,EAAE,MAAM,CAAC;IAChB;;SAEK;IACL,MAAM,CAAC,EAAE,MAAM,CAAC;CAChB,CAAA;AAED,MAAM,MAAM,WAAW,GAAG,CAAC,MAAM,EAAE,MAAM,KAAK,OAAO,CAAC,OAAO,CAAC,CAAA;AAC9D,MAAM,MAAM,YAAY,GAAG;IAC1B,WAAW,EAAE,WAAW,GAAG,IAAI,CAAC;IAChC,iDAAiD;IACjD,QAAQ,EAAE,CAAC,CAAC,KAAK,EAAC,MAAM,KAAK,IAAI,CAAC,GAAC,IAAI,CAAC;IACxC,SAAS,EAAE,CAAC,CAAC,KAAK,EAAC,MAAM,GAAC,IAAI,KAAK,IAAI,CAAC,GAAC,IAAI,CAAC;IAC9C,2CAA2C;IAC3C,QAAQ,EAAE,CAAC,CAAC,MAAM,EAAE,GAAG,KAAK,IAAI,CAAC,GAAC,IAAI,CAAC;CACvC,CAAA","sourcesContent":["// @ts-nocheck\r\nexport interface DialogProps {\r\n\t/**\r\n\t * 操作栏\r\n\t */\r\n\tactions?: UTSJSONObject[];\r\n\t/**\r\n\t * 多按钮排列方式\r\n\t */\r\n\tbuttonLayout: 'horizontal' | 'vertical';\r\n\t/**\r\n\t * 取消按钮，可自定义。值为 null 则不显示取消按钮。值类型为字符串，则表示自定义按钮文本，值类型为 Object 则表示透传 Button 组件属性。使用 Slot 自定义按钮时，需自行控制取消事件\r\n\t */\r\n\tcancelBtn?: any;\r\n\t// cancelBtnProps?: UTSJSONObject;\r\n\t/**\r\n\t * 是否展示关闭按钮，值为 `true` 显示默认关闭按钮；值为 `false` 则不显示关闭按钮；使用 Object 时透传至图标组件\r\n\t */\r\n\tcloseBtn?: boolean;\r\n\t// closeColor?: string;\r\n\t// closeSize?: string;\r\n\t /**\r\n\t   * 点击蒙层时是否触发关闭事件\r\n\t   */\r\n\tcloseOnClickOverlay: boolean;\r\n\t/**\r\n\t   * 确认按钮。值为 null 则不显示确认按钮。值类型为字符串，则表示自定义按钮文本，值类型为 Object 则表示透传 Button 组件属性。使用 Slot 自定义按钮时，需自行控制确认事件\r\n\t   */\r\n\tconfirmBtn?: any;\r\n\t// confirmBtnProps?: UTSJSONObject;\r\n\t/**\r\n\t   * 内容\r\n\t   */\r\n\tcontent?: string;\r\n\t/**\r\n\t   * 透传至 Overlay 组件\r\n\t   */\r\n\t// overlayProps?: UTSJSONObject;\r\n\toverlayStyle?: string;\r\n\t /**\r\n\t   * 防止滚动穿透\r\n\t   */\r\n\tpreventScrollThrough: boolean;\r\n\t/**\r\n\t   * 是否显示遮罩层\r\n\t   */\r\n\toverlay: boolean;\r\n\t/**\r\n\t   * 标题\r\n\t   */\r\n\ttitle?: string;\r\n\t /**\r\n\t   * 控制对话框是否显示\r\n\t   */\r\n\tvisible ?: boolean;\r\n\t/**\r\n\t   * 对话框层级，Web 侧样式默认为 998\r\n\t   */\r\n\tzIndex?: number;\r\n\t/**\r\n\t   * 自定义组件样式\r\n\t   */\r\n\tlStyle?: string;\r\n}\r\n\r\nexport type DialogOptions = {\r\n\t/**\r\n\t * 操作栏\r\n\t */\r\n\tactions?: UTSJSONObject[];\r\n\t/**\r\n\t * 多按钮排列方式\r\n\t */\r\n\tbuttonLayout?: 'horizontal' | 'vertical';\r\n\t/**\r\n\t * 取消按钮，可自定义。值为 null 则不显示取消按钮。值类型为字符串，则表示自定义按钮文本，值类型为 Object 则表示透传 Button 组件属性。使用 Slot 自定义按钮时，需自行控制取消事件\r\n\t */\r\n\tcancelBtn?: any;\r\n\t// cancelBtnProps?: UTSJSONObject;\r\n\t/**\r\n\t * 是否展示关闭按钮，值为 `true` 显示默认关闭按钮；值为 `false` 则不显示关闭按钮；使用 Object 时透传至图标组件\r\n\t */\r\n\tcloseBtn?: boolean;\r\n\t// closeColor?: string;\r\n\t// closeSize?: string;\r\n\t /**\r\n\t   * 点击蒙层时是否触发关闭事件\r\n\t   */\r\n\tcloseOnClickOverlay?: boolean;\r\n\t/**\r\n\t   * 确认按钮。值为 null 则不显示确认按钮。值类型为字符串，则表示自定义按钮文本，值类型为 Object 则表示透传 Button 组件属性。使用 Slot 自定义按钮时，需自行控制确认事件\r\n\t   */\r\n\tconfirmBtn?: any;\r\n\t// confirmBtnProps?: UTSJSONObject;\r\n\t/**\r\n\t   * 内容\r\n\t   */\r\n\tcontent?: string;\r\n\t/**\r\n\t   * 透传至 Overlay 组件\r\n\t   */\r\n\t// overlayProps?: UTSJSONObject;\r\n\toverlayStyle?: string;\r\n\t /**\r\n\t   * 防止滚动穿透\r\n\t   */\r\n\tpreventScrollThrough?: boolean;\r\n\t/**\r\n\t   * 是否显示遮罩层\r\n\t   */\r\n\toverlay?: boolean;\r\n\t/**\r\n\t   * 标题\r\n\t   */\r\n\ttitle?: string;\r\n\t /**\r\n\t   * 控制对话框是否显示\r\n\t   */\r\n\tvisible ?: boolean;\r\n\t/**\r\n\t   * 对话框层级，Web 侧样式默认为 998\r\n\t   */\r\n\tzIndex?: number;\r\n\t/**\r\n\t   * 自定义组件样式\r\n\t   */\r\n\tlStyle?: string;\r\n}\r\n\r\nexport type BeforeClose = (action: string) => Promise<boolean>\r\nexport type DialogExpose = {\r\n\tbeforeClose: BeforeClose | null,\r\n\t// onConfirm: ((value: any | null) => void)|null,\r\n\tonAction: ((index:number) => void)|null,\r\n\tonConfirm: ((value:number|null) => void)|null,\r\n\t// onCancel: ((reason?: any) => void)|null,\r\n\tonCancel: ((reason: any) => void)|null,\r\n}"]}