{"version":3,"file":"generate.uts","sourceRoot":"","sources":["uni_modules/lime-color/common/generate.uts"],"names":[],"mappings":"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","sourcesContent":["// https://github.com/ant-design/ant-design-colors/blob/main/src/generate.ts\r\nimport { inputToRGB } from './format-input';\r\nimport { rgbToHex, rgbToHsv } from './conversion';\r\nimport { HSV, LColorInfo, LGenerateOptions} from '../utssdk/interface.uts';\r\n\r\ntype DarkColorMapItem = {\r\n\tindex : number;\r\n\topacity : number;\r\n};\r\nconst hueStep = 2; // 色相阶梯\r\nconst saturationStep = 0.16; // 饱和度阶梯，浅色部分\r\nconst saturationStep2 = 0.05; // 饱和度阶梯，深色部分\r\nconst brightnessStep1 = 0.05; // 亮度阶梯，浅色部分\r\nconst brightnessStep2 = 0.15; // 亮度阶梯，深色部分\r\nconst lightColorCount = 5; // 浅色数量，主色上\r\nconst darkColorCount = 4; // 深色数量，主色下\r\n// 暗色主题颜色映射关系表\r\nconst darkColorMap = [\r\n\t{ index: 7, opacity: 0.15 },\r\n\t{ index: 6, opacity: 0.25 },\r\n\t{ index: 5, opacity: 0.3 },\r\n\t{ index: 5, opacity: 0.45 },\r\n\t{ index: 5, opacity: 0.65 },\r\n\t{ index: 5, opacity: 0.85 },\r\n\t{ index: 4, opacity: 0.9 },\r\n\t{ index: 3, opacity: 0.95 },\r\n\t{ index: 2, opacity: 0.97 },\r\n\t{ index: 1, opacity: 0.98 },\r\n] as DarkColorMapItem[];\r\n\r\n\r\n// 从 TinyColor.toHsv 移植的包装函数\r\n// 保留这里，因为有 `hsv.h * 360`\r\nfunction toHsv({ r, g, b } : LColorInfo) : HSV {\r\n\t// 将 RGB 值转换为 HSV 值\r\n\tconst hsv = rgbToHsv(r, g, b);\r\n\t// 返回一个 HsvObject，其中 h 值乘以 360\r\n\treturn { h: hsv.h * 360, s: hsv.s, v: hsv.v } as HSV;\r\n}\r\n\r\n// 从 TinyColor.toHexString 移植的包装函数\r\n// 保留这里，因为有前缀 `#`\r\nfunction toHex({ r, g, b }: LColorInfo) : string {\r\n\t// 将 RGB 值转换为十六进制字符串，并添加前缀 `#`\r\n\treturn `#${rgbToHex(r, g, b, false)}`;\r\n}\r\n\r\n\r\n// 从 TinyColor.mix 移植的包装函数，无法进行 tree-shaking\r\n// 数量范围为 [0, 1]\r\n// 假设 color1 和 color2 没有透明度，因为以下源代码也是如此\r\nfunction mix(rgb1 : LColorInfo, rgb2 : LColorInfo, amount : number) : LColorInfo {\r\n\t// 将 amount 除以 100，得到一个范围为 [0, 1] 的值\r\n\tconst p = amount / 100;\r\n\t// 计算混合后的 RGB 值\r\n\tconst rgb = {\r\n\t\tr: (rgb2.r - rgb1.r) * p + rgb1.r,\r\n\t\tg: (rgb2.g - rgb1.g) * p + rgb1.g,\r\n\t\tb: (rgb2.b - rgb1.b) * p + rgb1.b,\r\n\t\ta: 1\r\n\t} as LColorInfo;\r\n\t// 返回混合后的 RGB 对象\r\n\treturn rgb;\r\n}\r\n\r\n// 根据给定的 HSV 对象和索引值计算新的色相值\r\n// 如果 light 参数为 true，则色相向左转动；否则向右转动\r\nfunction getHue(hsv : HSV, i : number, light : boolean = false) : number {\r\n\tlet hue : number;\r\n\t// 根据色相不同，色相转向不同\r\n\tif (Math.round(hsv.h) >= 60 && Math.round(hsv.h) <= 240) {\r\n\t\t// 如果色相在 60 到 240 之间，向左转动\r\n\t\thue = light ? Math.round(hsv.h) - hueStep * i : Math.round(hsv.h) + hueStep * i;\r\n\t} else {\r\n\t\thue = light ? Math.round(hsv.h) + hueStep * i : Math.round(hsv.h) - hueStep * i;\r\n\t}\r\n\r\n\tif (hue < 0) {\r\n\t\t// 如果新的色相值小于 0，则加上 360\r\n\t\thue += 360;\r\n\t} else if (hue >= 360) {\r\n\t\t// 如果新的色相值大于等于 360，则减去 360\r\n\t\thue -= 360;\r\n\t}\r\n\treturn hue;\r\n}\r\n\r\n\r\n// 根据给定的 HSV 对象和索引值计算新的饱和度值\r\n// 如果 light 参数为 true，则饱和度减小；否则增加\r\nfunction getSaturation(hsv : HSV, i : number, light : boolean = false) : number {\r\n\t// grey color don't change saturation\r\n\t// 如果颜色是灰色（色相和饱和度都为 0），则饱和度不变\r\n\tif (hsv.h == 0 && hsv.s == 0) {\r\n\t\treturn hsv.s;\r\n\t}\r\n\tlet saturation : number;\r\n\t// 如果 light 参数为 true，则饱和度减小\r\n\tif (light) {\r\n\t\tsaturation = hsv.s - saturationStep * i;\r\n\t}\r\n\t// 如果 i 等于 darkColorCount，则饱和度增加\r\n\telse if (i == darkColorCount) {\r\n\t\tsaturation = hsv.s + saturationStep;\r\n\t}\r\n\t// 否则，饱和度增加\r\n\telse {\r\n\t\tsaturation = hsv.s + saturationStep2 * i;\r\n\t}\r\n\t// 边界值修正\r\n\tif (saturation > 1) {\r\n\t\tsaturation = 1;\r\n\t}\r\n\t// 第一格的 s 限制在 0.06-0.1 之间\r\n\tif (light && i == lightColorCount && saturation > 0.1) {\r\n\t\tsaturation = 0.1;\r\n\t}\r\n\tif (saturation < 0.06) {\r\n\t\tsaturation = 0.06;\r\n\t}\r\n\treturn parseFloat(saturation.toFixed(2))\r\n}\r\n\r\n// 根据给定的 HSV 对象和索引值计算新的亮度值\r\n// 如果 light 参数为 true，则亮度增加；否则减少\r\nfunction getValue(hsv : HSV, i : number, light : boolean = false) : number {\r\n\tlet value : number;\r\n\t// 如果 light 参数为 true，则亮度增加\r\n\tif (light) {\r\n\t\tvalue = hsv.v + brightnessStep1 * i;\r\n\t} else {\r\n\t\tvalue = hsv.v - brightnessStep2 * i;\r\n\t}\r\n\tif (value > 1) {\r\n\t\tvalue = 1;\r\n\t}\r\n\t// 返回保留两位小数的亮度值\r\n\treturn parseFloat(value.toFixed(2));\r\n}\r\n\r\n\r\n\r\n\r\n/**\n * generate 函数用于生成一组基于给定颜色的色彩模式。\n * 它可以生成亮色、暗色和深色主题颜色模式。\n *\n * @param {string} color - 输入的颜色值，可以是十六进制、RGB、RGBA、HSL、HSLA或颜色名称。\n * @param {LGenerateOptions} [opts] - 可选的生成选项。\n * @returns {string[]} - 返回一个包含生成的颜色模式的字符串数组。\n */\r\nexport function generate(color : string, opts : LGenerateOptions = {} as LGenerateOptions) : string[] {\r\n\tconst patterns : string[] = [];\r\n\tconst pColor = inputToRGB(color);\r\n\r\n\t// 生成亮色模式\r\n\tfor (let i = lightColorCount; i > 0; i -= 1) {\r\n\t\tconst hsv = toHsv(pColor);\r\n\t\tconst colorString : string = toHex(\r\n\t\t\tinputToRGB({\r\n\t\t\t\th: getHue(hsv, i, true),\r\n\t\t\t\ts: getSaturation(hsv, i, true),\r\n\t\t\t\tv: getValue(hsv, i, true),\r\n\t\t\t}),\r\n\t\t);\r\n\t\tpatterns.push(colorString);\r\n\t}\r\n\r\n\t// 添加原始颜色\r\n\tpatterns.push(toHex(pColor));\r\n\r\n\t// 生成暗色模式\r\n\tfor (let i = 1; i <= darkColorCount; i += 1) {\r\n\t\tconst hsv = toHsv(pColor);\r\n\t\tconst colorString : string = toHex(\r\n\t\t\tinputToRGB({\r\n\t\t\t\th: getHue(hsv, i),\r\n\t\t\t\ts: getSaturation(hsv, i),\r\n\t\t\t\tv: getValue(hsv, i),\r\n\t\t\t}),\r\n\t\t);\r\n\t\tpatterns.push(colorString);\r\n\t}\r\n\r\n\t// 如果选项中指定了 dark 主题，则生成深色主题颜色模式\r\n\tif (opts.theme == 'dark') {\r\n\t\treturn darkColorMap.map(({ index, opacity }, _):string => {\r\n\t\t\tconst darkColorString : string = toHex(\r\n\t\t\t\tmix(\r\n\t\t\t\t\tinputToRGB(opts.backgroundColor ?? '#141414'),\r\n\t\t\t\t\tinputToRGB(patterns[index]),\r\n\t\t\t\t\topacity * 100,\r\n\t\t\t\t),\r\n\t\t\t);\r\n\t\t\treturn darkColorString;\r\n\t\t});\r\n\t}\r\n\r\n\t// 返回默认颜色模式\r\n\treturn patterns;\r\n}\r\n\r\n"]}