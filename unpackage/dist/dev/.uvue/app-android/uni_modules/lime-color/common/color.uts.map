{"version":3,"file":"color.uts","sourceRoot":"","sources":["uni_modules/lime-color/common/color.uts"],"names":[],"mappings":"AAAA,cAAc;AACd,OAAO,EAAE,mBAAmB,EAAE,SAAS,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,MAAM,cAAc,CAAC;AAC5F,OAAO,EAAE,KAAK,EAAE,MAAM,mBAAmB,CAAC;AAC1C,OAAO,EAAE,UAAU,EAAE,MAAM,gBAAgB,CAAC;AAC5C,OAAO,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,UAAU,EAAE,UAAU,EAAE,aAAa,EAAE,aAAa,EAAE,WAAW,EAAE,MAAM,yBAAyB,CAAC;AACnJ,OAAO,EAAE,OAAO,EAAE,UAAU,EAAE,OAAO,EAAE,SAAS,EAAE,QAAQ,EAAE,MAAM,QAAQ,CAAC;AAE3E,MAAM,OAAO,SAAS;IACrB,CAAC,EAAG,MAAM,CAAC;IACX,CAAC,EAAG,MAAM,CAAC;IACX,CAAC,EAAG,MAAM,CAAC;IACX,CAAC,EAAG,MAAM,CAAC;IACX,2BAA2B;IAC3B,MAAO,CAAC,EAAE,aAAa,CAAC;IACxB,iCAAiC;IACjC,aAAa,EAAG,WAAW,CAAC;IAC5B,eAAe;IACf,OAAO,EAAG,OAAO,CAAC;IAElB,YAAa,CAAC,EAAE,MAAM,CAAC;IAEvB,oBAAoB;IACpB,MAAM,EAAG,MAAM,CAAC;IAEhB,aAAa,EAAG,GAAG,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;IAEpC,YAAY,KAAK,EAAG,WAAW,GAAG,EAAE,EAAE,IAAI,EAAG,aAAa,GAAG,EAAE,IAAI,aAAa;QAC/E,IAAI,MAAM,EAAG,GAAG,GAAG,KAAK,CAAA;QACxB,kCAAkC;QAClC,6BAA6B;QAC7B,KAAK;QACL,IAAI,QAAQ,CAAC,KAAK,CAAC,EAAE;YACpB,MAAM,GAAG,mBAAmB,CAAC,KAAK,IAAI,MAAM,CAAC,CAAC;SAC9C;QACD,IAAI,CAAC,aAAa,GAAG,MAAM,CAAC;QAC5B,MAAM,GAAG,GAAG,UAAU,CAAC,MAAM,CAAC,CAAC;QAC/B,IAAI,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC;QACf,IAAI,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC;QACf,IAAI,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC;QACf,IAAI,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC;QACf,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;QAC7C,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,IAAI,GAAG,CAAC,MAAM,CAAC;QACxC,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC;QAEtC,gCAAgC;QAChC,uBAAuB;QACvB,2BAA2B;QAC3B,yDAAyD;QACzD,IAAI,IAAI,CAAC,CAAC,GAAG,CAAC,EAAE;YACf,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;SAC5B;QAED,IAAI,IAAI,CAAC,CAAC,GAAG,CAAC,EAAE;YACf,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;SAC5B;QAED,IAAI,IAAI,CAAC,CAAC,GAAG,CAAC,EAAE;YACf,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;SAC5B;QAED,IAAI,CAAC,OAAO,GAAG,GAAG,CAAC,EAAE,IAAI,KAAK,CAAC;QAG/B,IAAI,CAAC,aAAa,GAAG,IAAI,GAAG,CAAC,MAAM,EAAE,MAAM,GAAG,CAAA;QAC9C,KAAK,CAAC,OAAO,CAAC,CAAC,KAAK,EAAG,MAAM,EAAE,GAAG,EAAG,MAAM,EAAE,EAAE;YAC9C,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,KAAK,EAAE,GAAG,CAAC,CAAA;QACnC,CAAC,CAAC,CAAA;IAEH,CAAC;IACD;;;OAGG;IACH,MAAM,IAAK,OAAO;QACjB,OAAO,IAAI,CAAC,aAAa,EAAE,GAAG,GAAG,CAAC;IACnC,CAAC;IACD;;;OAGG;IACH,OAAO,IAAK,OAAO;QAClB,OAAO,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC;IACvB,CAAC;IAED;;;;OAIG;IACH,aAAa,IAAK,MAAM;QACvB,2CAA2C;QAC3C,MAAM,GAAG,GAAG,IAAI,CAAC,KAAK,EAAE,CAAC;QACzB,OAAO,CAAC,GAAG,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC,GAAG,IAAI,CAAC;IACzD,CAAC;IACD;;;;OAIG;IACH,YAAY,IAAK,MAAM;QACtB,sEAAsE;QACtE,MAAM,GAAG,GAAG,IAAI,CAAC,KAAK,EAAE,CAAC;QACzB,IAAI,CAAC,EAAG,MAAM,CAAC;QACf,IAAI,CAAC,EAAG,MAAM,CAAC;QACf,IAAI,CAAC,EAAG,MAAM,CAAC;QACf,MAAM,KAAK,EAAG,MAAM,GAAG,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC;QACnC,MAAM,KAAK,EAAG,MAAM,GAAG,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC;QACnC,MAAM,KAAK,EAAG,MAAM,GAAG,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC;QAEnC,IAAI,KAAK,IAAI,OAAO,EAAE;YACrB,CAAC,GAAG,KAAK,GAAG,KAAK,CAAC;SAClB;aAAM;YACN,0DAA0D;YAC1D,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,KAAK,GAAG,KAAK,CAAC,GAAG,KAAK,EAAE,GAAG,CAAC,CAAC;SAC3C;QAED,IAAI,KAAK,IAAI,OAAO,EAAE;YACrB,CAAC,GAAG,KAAK,GAAG,KAAK,CAAC;SAClB;aAAM;YACN,0DAA0D;YAC1D,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,KAAK,GAAG,KAAK,CAAC,GAAG,KAAK,EAAE,GAAG,CAAC,CAAC;SAC3C;QAED,IAAI,KAAK,IAAI,OAAO,EAAE;YACrB,CAAC,GAAG,KAAK,GAAG,KAAK,CAAC;SAClB;aAAM;YACN,0DAA0D;YAC1D,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,KAAK,GAAG,KAAK,CAAC,GAAG,KAAK,EAAE,GAAG,CAAC,CAAC;SAC3C;QAED,OAAO,MAAM,GAAG,CAAC,GAAG,MAAM,GAAG,CAAC,GAAG,MAAM,GAAG,CAAC,CAAC;IAC7C,CAAC;IAED;;;;OAIG;IACH,QAAQ,IAAK,MAAM;QAClB,OAAO,IAAI,CAAC,CAAC,CAAC;IACf,CAAC;IAED;;;;OAIG;IACH,QAAQ,CAAC,KAAM,CAAC,EAAE,MAAM,GAAI,SAAS,CAAA;IACrC,QAAQ,CAAC,KAAM,CAAC,EAAE,MAAM,GAAI,SAAS,CAAA;IACrC,QAAQ,CAAC,KAAM,CAAC,EAAE,GAAG,GAAI,SAAS;QACjC,IAAI,CAAC,CAAC,GAAG,UAAU,CAAC,KAAK,CAAC,CAAC;QAC3B,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;QAC7C,OAAO,IAAI,CAAC;IACb,CAAC;IACD;;;;OAIG;IACH,YAAY,IAAK,OAAO;QACvB,MAAM,EAAE,CAAC,EAAE,GAAG,IAAI,CAAC,KAAK,EAAE,CAAC;QAC3B,OAAO,CAAC,IAAI,CAAC,CAAC;IACf,CAAC;IAED;;;OAGG;IACH,KAAK,IAAK,IAAI;QACb,MAAM,GAAG,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;QAC7C,OAAO,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC,EAAE,IAAI,IAAI,CAAC;IAClE,CAAC;IAED;;;OAGG;IACH,WAAW,IAAK,MAAM;QACrB,MAAM,GAAG,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;QAC7C,MAAM,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC;QAClC,MAAM,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC;QAClC,MAAM,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC;QAClC,OAAO,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,IAAI,CAAC,MAAM,GAAG,CAAC;IAC7F,CAAC;IAED;;;OAGG;IACH,KAAK,IAAK,IAAI;QACb,MAAM,GAAG,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;QAC7C,OAAO,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC,EAAE,IAAI,IAAI,CAAC;IAClE,CAAC;IACD;;;OAGG;IACH,WAAW,IAAK,MAAM;QACrB,MAAM,GAAG,GAAG,IAAI,CAAC,KAAK,EAAE,CAAC;QACzB,MAAM,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAC5B,MAAM,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC;QAClC,MAAM,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC;QAClC,OAAO,IAAI,CAAC,CAAC,IAAI,CAAC;YACjB,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI;YAC3B,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,IAAI,CAAC,MAAM,GAAG,CAAC;IAC/C,CAAC;IACD;;;OAGG;IACH,KAAK,IAAK,IAAI;QACb,MAAM,GAAG,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;QAC7C,OAAO,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC,EAAE,IAAI,IAAI,CAAC;IAClE,CAAC;IAED;;;OAGG;IACH,WAAW,IAAK,MAAM;QACrB,MAAM,GAAG,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;QAC7C,MAAM,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC;QAClC,MAAM,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC;QAClC,MAAM,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC;QAClC,OAAO,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,IAAI,CAAC,MAAM,GAAG,CAAC;IAC7F,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,UAAU,GAAG,KAAK,GAAI,MAAM;QACjC,OAAO,QAAQ,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC;IACrD,CAAC;IACD;;;;OAIG;IACH,WAAW,CAAC,UAAU,GAAG,KAAK,GAAI,MAAM;QACvC,OAAO,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;IACrC,CAAC;IACD;;;OAGG;IACH,MAAM,CAAC,UAAU,GAAG,KAAK,GAAI,MAAM;QAClC,OAAO,SAAS,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC;IAC9D,CAAC;IACD;;;OAGG;IACH,YAAY,CAAC,UAAU,GAAG,KAAK,GAAI,MAAM;QACxC,OAAO,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;IACtC,CAAC;IACD;;;OAGG;IACH,gBAAgB,CAAC,cAAc,GAAG,KAAK,GAAI,MAAM;QAChD,OAAO,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,cAAc,CAAC,CAAC;IAC3F,CAAC;IACD;;;OAGG;IACH,KAAK,IAAK,IAAI;QACb,OAAO;YACN,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;YACrB,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;YACrB,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;YACrB,CAAC,EAAE,IAAI,CAAC,CAAC;SACT,IAAI,IAAI,CAAC;IACX,CAAC;IAED;;;OAGG;IACH,WAAW,IAAK,MAAM;QACrB,MAAM,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAC7B,MAAM,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAC7B,MAAM,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAC7B,OAAO,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,IAAI,CAAC,MAAM,GAAG,CAAC;IACzF,CAAC;IACD;;;OAGG;IACH,eAAe,IAAK,UAAU;QAC7B,yBAAyB;QACzB,MAAM,GAAG,GAAG,CAAC,CAAC,EAAG,MAAM,GAAI,MAAM,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC;QAC7E,4BAA4B;QAC5B,OAAO;YACN,CAAC,EAAE,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;YACd,CAAC,EAAE,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;YACd,CAAC,EAAE,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;YACd,CAAC,EAAE,IAAI,CAAC,CAAC;SACT,IAAI,UAAU,CAAC;IACjB,CAAC;IACD;;OAEG;IACH,qBAAqB,IAAK,MAAM;QAC/B,6BAA6B;QAC7B,MAAM,GAAG,GAAG,CAAC,CAAC,EAAG,MAAM,GAAI,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC;QACvE,qBAAqB;QACrB,OAAO,IAAI,CAAC,CAAC,IAAI,CAAC;YACjB,CAAC,CAAC,OAAO,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI;YAC1D,CAAC,CAAC,QAAQ,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,IAAI,CAAC,MAAM,GAAG,CAAC;IAC9E,CAAC;IACD;;OAEG;IACH,MAAM,IAAK,MAAM,GAAG,IAAI;QACvB,IAAI,IAAI,CAAC,CAAC,IAAI,CAAC,EAAE;YAChB,OAAO,aAAa,CAAC;SACrB;QAED,IAAI,IAAI,CAAC,CAAC,GAAG,CAAC,EAAE;YACf,OAAO,IAAI,CAAC;SACZ;QACD,MAAM,GAAG,GAAG,IAAI,CAAC,WAAW,EAAE,CAAA,CAAA,gDAAgD;QAa9E,OAAO,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,GAAG,CAAC,CAAA;IAEnC,CAAC;IACD;;;;OAIG;IACH,mDAAmD;IACnD,2DAA2D;IAG3D,QAAQ,CAAC,QAAQ,IAAK,MAAM;QAC3B,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAA;IAC3B,CAAC;IAED,QAAQ,CAAC,MAAO,CAAC,EAAE,aAAa,GAAI,MAAM;QACzC,MAAM,SAAS,GAAG,SAAS,CAAC,MAAM,CAAC,CAAC;QACpC,IAAI,OAAO,GAAG,MAAM,IAAI,IAAI,CAAC,MAAM,CAAC;QAEpC,IAAI,eAAe,EAAG,MAAM,GAAG,IAAI,GAAG,IAAI,CAAC;QAC3C,MAAM,QAAQ,GAAG,IAAI,CAAC,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC;QAC3C,MAAM,gBAAgB,GAAG,CAAC,SAAS,IAAI,QAAQ,IAAI,CAAC,OAAO,IAAI,IAAI,IAAI,OAAO,CAAC,UAAU,CAAC,KAAK,CAAC,IAAI,OAAO,IAAI,MAAM,CAAC,CAAC;QAEvH,IAAI,gBAAgB,EAAE;YACrB,qCAAqC;YACrC,2BAA2B;YAC3B,IAAI,OAAO,IAAI,MAAM,IAAI,IAAI,CAAC,CAAC,IAAI,CAAC,EAAE;gBACrC,OAAO,IAAI,CAAC,MAAM,EAAE,IAAI,aAAa,CAAC;aACtC;YACD,OAAO,IAAI,CAAC,WAAW,EAAE,CAAC;SAC1B;QAED,IAAI,OAAO,IAAI,KAAK,EAAE;YACrB,eAAe,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;SACrC;QAED,IAAI,OAAO,IAAI,MAAM,EAAE;YACtB,eAAe,GAAG,IAAI,CAAC,qBAAqB,EAAE,CAAC;SAC/C;QAED,IAAI,OAAO,IAAI,KAAK,IAAI,OAAO,IAAI,MAAM,EAAE;YAC1C,eAAe,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;SACrC;QAED,IAAI,OAAO,IAAI,MAAM,EAAE;YACtB,eAAe,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;SACzC;QAED,IAAI,OAAO,IAAI,MAAM,EAAE;YACtB,eAAe,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;SAC1C;QAED,IAAI,OAAO,IAAI,MAAM,EAAE;YACtB,eAAe,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC;SACtC;QAED,IAAI,OAAO,IAAI,MAAM,EAAE;YACtB,eAAe,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC;SAChC;QAED,IAAI,OAAO,IAAI,KAAK,EAAE;YACrB,eAAe,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;SACrC;QAED,IAAI,OAAO,IAAI,KAAK,EAAE;YACrB,eAAe,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;SACrC;QACD,IAAI,OAAO,IAAI,KAAK,EAAE;YACrB,eAAe,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;SACrC;QACD,OAAO,eAAe,IAAI,IAAI,CAAC,WAAW,EAAE,CAAC;IAC9C,CAAC;IACD,QAAQ,IAAK,MAAM;QAClB,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IACpF,CAAC;IACD,KAAK,IAAK,SAAS;QAClB,OAAO,IAAI,SAAS,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;IACvC,CAAC;IACD;;;OAGG;IACH,OAAO,CAAC,MAAM,GAAG,EAAE,GAAI,SAAS;QAC/B,MAAM,GAAG,GAAG,IAAI,CAAC,KAAK,EAAE,CAAC;QACzB,GAAG,CAAC,CAAC,IAAI,MAAM,GAAG,GAAG,CAAC;QACtB,GAAG,CAAC,CAAC,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACvB,OAAO,IAAI,SAAS,CAAC,GAAG,EAAE,EAAE,MAAM,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,aAAa,CAAC,CAAC;IACrE,CAAC;IACD;;;OAGG;IACH,QAAQ,CAAC,MAAM,GAAG,EAAE,GAAI,SAAS;QAChC,MAAM,GAAG,GAAG,IAAI,CAAC,KAAK,EAAE,CAAC;QACzB,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC,CAAC,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QAC9E,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC,CAAC,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QAC9E,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC,CAAC,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QAC9E,OAAO,IAAI,SAAS,CAAC,GAAG,EAAE,EAAE,MAAM,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,aAAa,CAAC,CAAC;IACrE,CAAC;IACD;;;;OAIG;IACH,MAAM,CAAC,MAAM,GAAG,EAAE,GAAI,SAAS;QAC9B,MAAM,GAAG,GAAG,IAAI,CAAC,KAAK,EAAE,CAAC;QACzB,GAAG,CAAC,CAAC,IAAI,MAAM,GAAG,GAAG,CAAC;QACtB,GAAG,CAAC,CAAC,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACvB,OAAO,IAAI,SAAS,CAAC,GAAG,EAAE,EAAE,MAAM,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,aAAa,CAAC,CAAC;IACrE,CAAC;IACD;;;;OAIG;IACH,IAAI,CAAC,MAAM,GAAG,EAAE,GAAI,SAAS;QAC5B,OAAO,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;IAClC,CAAC;IACD;;;;OAIG;IACH,KAAK,CAAC,MAAM,GAAG,EAAE,GAAI,SAAS;QAC7B,OAAO,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;IAClC,CAAC;IACD;;;;OAIG;IACH,UAAU,CAAC,MAAM,GAAG,EAAE,GAAI,SAAS;QAClC,MAAM,GAAG,GAAG,IAAI,CAAC,KAAK,EAAE,CAAC;QACzB,GAAG,CAAC,CAAC,IAAI,MAAM,GAAG,GAAG,CAAC;QACtB,GAAG,CAAC,CAAC,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACvB,OAAO,IAAI,SAAS,CAAC,GAAG,EAAE,EAAE,MAAM,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,aAAa,CAAC,CAAC;IACrE,CAAC;IACD;;;OAGG;IACH,QAAQ,CAAC,MAAM,GAAG,EAAE,GAAI,SAAS;QAChC,MAAM,GAAG,GAAG,IAAI,CAAC,KAAK,EAAE,CAAC;QACzB,GAAG,CAAC,CAAC,IAAI,MAAM,GAAG,GAAG,CAAC;QACtB,GAAG,CAAC,CAAC,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACvB,OAAO,IAAI,SAAS,CAAC,GAAG,EAAE,EAAE,MAAM,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,aAAa,CAAC,CAAC;IACrE,CAAC;IACD;;;OAGG;IACH,SAAS,IAAK,SAAS;QACtB,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;IAC7B,CAAC;IACD;;;OAGG;IACH,IAAI,CAAC,MAAM,EAAG,MAAM,GAAI,SAAS;QAChC,MAAM,GAAG,GAAG,IAAI,CAAC,KAAK,EAAE,CAAC;QACzB,MAAM,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM,CAAC,GAAG,GAAG,CAAC;QACnC,GAAG,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;QAClC,OAAO,IAAI,SAAS,CAAC,GAAG,EAAE,EAAE,MAAM,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,aAAa,CAAC,CAAC;IACrE,CAAC;IACD;;;OAGG;IACH,GAAG,CAAC,KAAK,EAAG,WAAW,EAAE,MAAM,GAAG,EAAE,GAAI,SAAS;QAChD,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,EAAE,CAAC;QAC1B,MAAM,IAAI,GAAG,IAAI,SAAS,CAAC,KAAK,CAAC,CAAC,KAAK,EAAE,CAAC;QAE1C,MAAM,CAAC,GAAG,MAAM,GAAG,GAAG,CAAC;QACvB,MAAM,IAAI,GAAG;YACZ,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,CAAC;YACjC,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,CAAC;YACjC,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,CAAC;YACjC,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,CAAC;SACjC,iBAAA,CAAC;QAEF,OAAO,IAAI,SAAS,CAAC,IAAI,EAAE,EAAE,MAAM,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,aAAa,CAAC,CAAC;IACtE,CAAC;IACD;;;;;;OAMG;IACH,SAAS,CAAC,OAAO,GAAG,CAAC,EAAE,MAAM,GAAG,EAAE,GAAI,SAAS,EAAE;QAChD,MAAM,GAAG,GAAG,IAAI,CAAC,KAAK,EAAE,CAAC;QACzB,MAAM,IAAI,GAAG,GAAG,GAAG,MAAM,CAAC;QAC1B,MAAM,GAAG,EAAG,SAAS,EAAE,GAAG,CAAC,IAAI,CAAC,CAAC;QACjC,IAAI,QAAQ,GAAG,OAAO,CAAA;QACtB,4EAA4E;QAC5E,iCAAiC;QACjC,iCAAiC;QACjC,IAAI;QACJ,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC;QACvD,OAAO,QAAQ,GAAG,CAAC,EAAE;YACpB,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,GAAG,CAAC;YAC7B,GAAG,CAAC,IAAI,CAAC,IAAI,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC;YAC7B,QAAQ,EAAE,CAAC;SACX;QACD,OAAO,GAAG,CAAC;IACZ,CAAC;IACD;;;;;OAKG;IACH,UAAU,IAAK,SAAS;QACvB,MAAM,GAAG,GAAG,IAAI,CAAC,KAAK,EAAE,CAAC;QACzB,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC;QAC5B,OAAO,IAAI,SAAS,CAAC,GAAG,EAAE,EAAE,MAAM,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,aAAa,CAAC,CAAC;IACrE,CAAC;IACD;;;;;OAKG;IACH,aAAa,CAAC,OAAO,GAAG,CAAC,GAAI,SAAS,EAAE;QACvC,MAAM,GAAG,GAAG,IAAI,CAAC,KAAK,EAAE,CAAC;QACzB,MAAM,EAAE,CAAC,EAAE,GAAG,GAAG,CAAC;QAClB,MAAM,EAAE,CAAC,EAAE,GAAG,GAAG,CAAC;QAClB,IAAI,EAAE,CAAC,EAAE,GAAG,GAAG,CAAC;QAChB,MAAM,GAAG,EAAG,SAAS,EAAE,GAAG,EAAE,CAAC;QAC7B,MAAM,YAAY,GAAG,CAAC,GAAG,OAAO,CAAC;QACjC,IAAI,QAAQ,GAAG,OAAO,CAAA;QACtB,sBAAsB;QACtB,yCAAyC;QACzC,+BAA+B;QAC/B,IAAI;QACJ,OAAO,QAAQ,GAAG,CAAC,EAAE;YACpB,GAAG,CAAC,IAAI,CAAC,IAAI,SAAS,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YACrC,CAAC,GAAG,CAAC,CAAC,GAAG,YAAY,CAAC,GAAG,CAAC,CAAC;YAC3B,QAAQ,EAAE,CAAA;SACV;QACD,OAAO,GAAG,CAAC;IACZ,CAAC;IACD;;;;OAIG;IACH,eAAe,IAAK,SAAS,EAAE;QAC9B,MAAM,GAAG,GAAG,IAAI,CAAC,KAAK,EAAE,CAAC;QACzB,MAAM,EAAE,CAAC,EAAE,GAAG,GAAG,CAAC;QAClB,OAAO;YACN,IAAI;YACJ,IAAI,SAAS,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC;YACxD,IAAI,SAAS,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC;SACzD,IAAI,SAAS,EAAE,CAAC;IAClB,CAAC;IACD;;;;OAIG;IACH,YAAY,CAAC,UAAU,EAAG,WAAW,GAAI,SAAS;QACjD,MAAM,EAAE,GAAG,IAAI,CAAC,KAAK,EAAE,CAAC;QACxB,MAAM,EAAE,GAAG,IAAI,SAAS,CAAC,UAAU,CAAC,CAAC,KAAK,EAAE,CAAC;QAC7C,MAAM,KAAK,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC;QAEvC,OAAO,IAAI,SAAS,CAAC;YACpB,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,KAAK;YACnD,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,KAAK;YACnD,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,KAAK;YACnD,CAAC,EAAE,KAAK;SACR,CAAC,CAAC;IACJ,CAAC;IACD;;;;;OAKG;IACH,KAAK,IAAK,SAAS,EAAE;QACpB,OAAO,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;IACvB,CAAC;IACD;;;;;OAKG;IACH,MAAM,IAAK,SAAS,EAAE;QACrB,OAAO,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;IACvB,CAAC;IACD;;;;;;;OAOG;IACH,MAAM,CAAC,CAAC,EAAG,MAAM,GAAI,SAAS,EAAE;QAC/B,MAAM,GAAG,GAAG,IAAI,CAAC,KAAK,EAAE,CAAC;QACzB,MAAM,EAAE,CAAC,EAAE,GAAG,GAAG,CAAC;QAElB,MAAM,MAAM,EAAG,SAAS,EAAE,GAAG,CAAC,IAAI,CAAC,CAAC;QACpC,MAAM,SAAS,GAAG,GAAG,GAAG,CAAC,CAAC;QAC1B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;YAC3B,MAAM,CAAC,IAAI,CAAC,IAAI,SAAS,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,SAAS,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;SACjF;QAED,OAAO,MAAM,CAAC;IACf,CAAC;IACD;;;;OAIG;IAaH,QAAQ,CAAC,MAAM,CAAC,KAAM,CAAC,EAAE,WAAW,GAAI,OAAO;QAC9C,IAAI,KAAK,IAAI,IAAI,EAAE;YAClB,OAAO,KAAK,CAAA;SACZ;aAAM,IAAI,KAAK,YAAY,SAAS,EAAE;YACtC,OAAO,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,KAAK,IAAI,SAAS,CAAC,CAAC,WAAW,EAAE,CAAA;SAC/D;QACD,OAAO,IAAI,CAAC,WAAW,EAAE,IAAI,IAAI,SAAS,CAAC,KAAK,CAAC,CAAC,WAAW,EAAE,CAAC;IACjE,CAAC;CAED;AAED,MAAM,UAAU,SAAS,CAAC,KAAK,EAAG,WAAW,GAAG,EAAE,EAAE,IAAI,EAAG,aAAa,GAAG,EAAE,IAAI,aAAa,GAAI,SAAS;IAC1G,OAAO,IAAI,SAAS,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;AACnC,CAAC","sourcesContent":["// @ts-nocheck\r\nimport { numberInputToObject, rgbaToHex, rgbToHex, rgbToHsl, rgbToHsv } from './conversion';\r\nimport { names } from './css-color-names';\r\nimport { inputToRGB } from './format-input';\r\nimport { HSL, HSLA, HSV, HSVA, HSBA, RGB, RGBA, RGBAString, LColorInfo, LColorFormats, LColorOptions, LColorInput } from '../utssdk/interface.uts';\r\nimport { bound01, boundAlpha, clamp01, toBoolean, isNumber } from './util';\r\n\r\nexport class TinyColor {\r\n\tr : number;\r\n\tg : number;\r\n\tb : number;\r\n\ta : number;\r\n\t/** 用于创建 limeColor 实例的格式 */\r\n\tformat ?: LColorFormats;\r\n\t/** 传递给构造函数以创建 limeColor 实例的输入 */\r\n\toriginalInput : LColorInput;\r\n\t/** 颜色已被成功解析 */\r\n\tisValid : boolean;\r\n\r\n\tgradientType ?: string;\r\n\r\n\t/** rounded alpha */\r\n\troundA : number;\r\n\r\n\treversedNames : Map<string, string>;\r\n\r\n\tconstructor(color : LColorInput = '', opts : LColorOptions = {} as LColorOptions) {\r\n\t\tlet _color : any = color\r\n\t\t// if(color instanceof TinyColor){\r\n\t\t// \treturn color as TinyColor\r\n\t\t// } \r\n\t\tif (isNumber(color)) {\r\n\t\t\t_color = numberInputToObject(color as number);\r\n\t\t}\r\n\t\tthis.originalInput = _color;\r\n\t\tconst rgb = inputToRGB(_color);\r\n\t\tthis.r = rgb.r;\r\n\t\tthis.g = rgb.g;\r\n\t\tthis.b = rgb.b;\r\n\t\tthis.a = rgb.a;\r\n\t\tthis.roundA = Math.round(100 * this.a) / 100;\r\n\t\tthis.format = opts.format ?? rgb.format;\r\n\t\tthis.gradientType = opts.gradientType;\r\n\r\n\t\t// 不要让范围在 [0,255] 中的值返回成 [0,1]。 \r\n\t\t// 这里可能会失去一些精度，但可以解决原来 \r\n\t\t// .5 被解释为总数的半数，而不是1的一半的问题 \r\n\t\t// 如果本来应该是128，那么这个已经在 inputToRgb 中处理过了\t\tif (this.r < 1) {\r\n\t\tif (this.r < 1) {\r\n\t\t\tthis.r = Math.round(this.r);\r\n\t\t}\r\n\r\n\t\tif (this.g < 1) {\r\n\t\t\tthis.g = Math.round(this.g);\r\n\t\t}\r\n\r\n\t\tif (this.b < 1) {\r\n\t\t\tthis.b = Math.round(this.b);\r\n\t\t}\r\n\r\n\t\tthis.isValid = rgb.ok ?? false;\r\n\r\n\r\n\t\tthis.reversedNames = new Map<string, string>()\r\n\t\tnames.forEach((value : string, key : string) => {\r\n\t\t\tthis.reversedNames.set(value, key)\r\n\t\t})\r\n\r\n\t}\r\n\t/**\r\n\t * 判断当前颜色是否为暗色。\r\n\t * @returns 一个布尔值，表示当前颜色是否为暗色。\r\n\t */\r\n\tisDark() : boolean {\r\n\t\treturn this.getBrightness() < 128;\r\n\t}\r\n\t/**\r\n\t * 判断当前颜色是否为亮色。\r\n\t * @returns 一个布尔值，表示当前颜色是否为亮色。\r\n\t */\r\n\tisLight() : boolean {\r\n\t\treturn !this.isDark();\r\n\t}\r\n\r\n\t/**\r\n\t * 计算当前颜色的亮度值。\r\n\t * 亮度值是根据 RGB 颜色空间中的红、绿、蓝三个通道的值计算得出的，计算公式为：(r * 299 + g * 587 + b * 114) / 1000。\r\n\t * @returns 返回颜色的感知亮度，范围从0-255。\r\n\t */\r\n\tgetBrightness() : number {\r\n\t\t// http://www.w3.org/TR/AERT#color-contrast\r\n\t\tconst rgb = this.toRgb();\r\n\t\treturn (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000;\r\n\t}\r\n\t/**\r\n\t * 计算当前颜色的相对亮度值。\r\n\t * 相对亮度值是根据 RGB 颜色空间中的红、绿、蓝三个通道的值计算得出的，计算公式为：0.2126 * R + 0.7152 * G + 0.0722 * B。\r\n\t * @returns 返回颜色的感知亮度，范围从0-1。\r\n\t */\r\n\tgetLuminance() : number {\r\n\t\t// http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef\r\n\t\tconst rgb = this.toRgb();\r\n\t\tlet R : number;\r\n\t\tlet G : number;\r\n\t\tlet B : number;\r\n\t\tconst RsRGB : number = rgb.r / 255;\r\n\t\tconst GsRGB : number = rgb.g / 255;\r\n\t\tconst BsRGB : number = rgb.b / 255;\r\n\r\n\t\tif (RsRGB <= 0.03928) {\r\n\t\t\tR = RsRGB / 12.92;\r\n\t\t} else {\r\n\t\t\t// eslint-disable-next-line prefer-exponentiation-operator\r\n\t\t\tR = Math.pow((RsRGB + 0.055) / 1.055, 2.4);\r\n\t\t}\r\n\r\n\t\tif (GsRGB <= 0.03928) {\r\n\t\t\tG = GsRGB / 12.92;\r\n\t\t} else {\r\n\t\t\t// eslint-disable-next-line prefer-exponentiation-operator\r\n\t\t\tG = Math.pow((GsRGB + 0.055) / 1.055, 2.4);\r\n\t\t}\r\n\r\n\t\tif (BsRGB <= 0.03928) {\r\n\t\t\tB = BsRGB / 12.92;\r\n\t\t} else {\r\n\t\t\t// eslint-disable-next-line prefer-exponentiation-operator\r\n\t\t\tB = Math.pow((BsRGB + 0.055) / 1.055, 2.4);\r\n\t\t}\r\n\r\n\t\treturn 0.2126 * R + 0.7152 * G + 0.0722 * B;\r\n\t}\r\n\r\n\t/**\r\n\t * 获取当前颜色的透明度值。\r\n\t * 透明度值的范围是 0 到 1，其中 0 表示完全透明，1 表示完全不透明。\r\n\t * @returns 一个数字，表示当前颜色的透明度值。\r\n\t */\r\n\tgetAlpha() : number {\r\n\t\treturn this.a;\r\n\t}\r\n\r\n\t/**\r\n\t * 设置当前颜色的透明度值。\r\n\t * @param alpha - 要设置的透明度值。透明度值的范围是 0 到 1，其中 0 表示完全透明，1 表示完全不透明。\r\n\t * @returns 一个 `TinyColor` 对象，表示设置透明度后的颜色。\r\n\t */\r\n\tsetAlpha(alpha ?: string) : TinyColor\r\n\tsetAlpha(alpha ?: number) : TinyColor\r\n\tsetAlpha(alpha ?: any) : TinyColor {\r\n\t\tthis.a = boundAlpha(alpha);\r\n\t\tthis.roundA = Math.round(100 * this.a) / 100;\r\n\t\treturn this;\r\n\t}\r\n\t/**\r\n\t * 判断当前颜色是否为单色。\r\n\t * 单色是指颜色的饱和度（S）为 0 的颜色，这些颜色只有明度（L）变化，没有颜色变化。\r\n\t * @returns 一个布尔值，表示当前颜色是否为单色。\r\n\t */\r\n\tisMonochrome() : boolean {\r\n\t\tconst { s } = this.toHsl();\r\n\t\treturn s == 0;\r\n\t}\r\n\r\n\t/**\r\n\t * 将当前颜色转换为 HSV（色相、饱和度、亮度）颜色空间。\r\n\t * @returns 一个对象，包含四个属性：`h`（色相）、`s`（饱和度）、`v`（亮度）和 `a`（透明度）。\r\n\t */\r\n\ttoHsv() : HSVA {\r\n\t\tconst hsv = rgbToHsv(this.r, this.g, this.b);\r\n\t\treturn { h: hsv.h * 360, s: hsv.s, v: hsv.v, a: this.a } as HSVA;\r\n\t}\r\n\r\n\t/**\r\n\t * 将当前颜色转换为 HSV（色相、饱和度、亮度）颜色空间的字符串表示。\r\n\t * @returns 一个字符串，表示当前颜色的 HSV 或 HSVA 格式 hsva(xxx, xxx, xxx, xx)。\r\n\t */\r\n\ttoHsvString() : string {\r\n\t\tconst hsv = rgbToHsv(this.r, this.g, this.b);\r\n\t\tconst h = Math.round(hsv.h * 360);\r\n\t\tconst s = Math.round(hsv.s * 100);\r\n\t\tconst v = Math.round(hsv.v * 100);\r\n\t\treturn this.a == 1 ? `hsv(${h}, ${s}%, ${v}%)` : `hsva(${h}, ${s}%, ${v}%, ${this.roundA})`;\r\n\t}\r\n\r\n\t/**\r\n\t * 将当前颜色对象转换为HSBA颜色空间,即Hue（色相）、Saturation（饱和度）、Brightness（亮度）和Alpha（透明度\r\n\t * @returns {HSBA} 返回一个HSBA对象，表示当前颜色对象在HSBA颜色空间中的值\r\n\t */\r\n\ttoHsb() : HSBA {\r\n\t\tconst hsv = rgbToHsv(this.r, this.g, this.b);\r\n\t\treturn { h: hsv.h * 360, s: hsv.s, b: hsv.v, a: this.a } as HSBA;\r\n\t}\r\n\t/**\r\n\t * 将当前颜色对象转换为CSS风格的HSB或HSVA字符串\r\n\t * @returns {string} 返回一个CSS风格的HSB或HSVA字符串，表示当前颜色对象的颜色值\r\n\t */\r\n\ttoHsbString() : string {\r\n\t\tconst hsb = this.toHsb();\r\n\t\tconst h = Math.round(hsb.h);\r\n\t\tconst s = Math.round(hsb.s * 100);\r\n\t\tconst b = Math.round(hsb.b * 100);\r\n\t\treturn this.a == 1\r\n\t\t\t? `hsb(${h}, ${s}%, ${b}%)`\r\n\t\t\t: `hsva(${h}, ${s}%, ${b}%, ${this.roundA})`;\r\n\t}\r\n\t/**\r\n\t * 将当前颜色转换为 HSL（色相、饱和度、明度）颜色空间。\r\n\t * @returns 一个对象，包含四个属性：`h`（色相）、`s`（饱和度）、`l`（明度）和 `a`（透明度）。\r\n\t */\r\n\ttoHsl() : HSLA {\r\n\t\tconst hsl = rgbToHsl(this.r, this.g, this.b);\r\n\t\treturn { h: hsl.h * 360, s: hsl.s, l: hsl.l, a: this.a } as HSLA;\r\n\t}\r\n\r\n\t/**\r\n\t * 将当前颜色转换为 HSL（色相、饱和度、明度）颜色空间的字符串表示。\r\n\t * @returns 一个字符串，表示当前颜色的 HSL 或 HSLA 格式 hsla(xxx, xxx, xxx, xx)。\r\n\t */\r\n\ttoHslString() : string {\r\n\t\tconst hsl = rgbToHsl(this.r, this.g, this.b);\r\n\t\tconst h = Math.round(hsl.h * 360);\r\n\t\tconst s = Math.round(hsl.s * 100);\r\n\t\tconst l = Math.round(hsl.l * 100);\r\n\t\treturn this.a == 1 ? `hsl(${h}, ${s}%, ${l}%)` : `hsla(${h}, ${s}%, ${l}%, ${this.roundA})`;\r\n\t}\r\n\r\n\t/**\r\n\t * 将当前颜色转换为十六进制颜色表示。\r\n\t * @param allow3Char 是否允许返回简写的十六进制颜色表示（如果可能）。默认值为 `false`。\r\n\t * @returns 一个字符串，表示当前颜色的十六进制格式。\r\n\t */\r\n\ttoHex(allow3Char = false) : string {\r\n\t\treturn rgbToHex(this.r, this.g, this.b, allow3Char);\r\n\t}\r\n\t/**\r\n\t * 将当前颜色转换为带有井号（`#`）前缀的十六进制颜色表示。\r\n\t * @param allow3Char 是否允许返回简写的十六进制颜色表示（如果可能）。默认值为 `false`。\r\n\t * @returns 一个字符串，表示当前颜色的带有井号前缀的十六进制格式。\r\n\t */\r\n\ttoHexString(allow3Char = false) : string {\r\n\t\treturn '#' + this.toHex(allow3Char);\r\n\t}\r\n\t/**\r\n\t * 返回颜色的八位十六进制值.\r\n\t * @param allow4Char 如果可能的话，将十六进制值缩短为4个字符\r\n\t */\r\n\ttoHex8(allow4Char = false) : string {\r\n\t\treturn rgbaToHex(this.r, this.g, this.b, this.a, allow4Char);\r\n\t}\r\n\t/**\r\n\t * 返回颜色的八位十六进制值，并且值前面带有#符号.\r\n\t * @param allow4Char 如果可能的话，将十六进制值缩短为4个字符\r\n\t */\r\n\ttoHex8String(allow4Char = false) : string {\r\n\t\treturn '#' + this.toHex8(allow4Char);\r\n\t}\r\n\t/**\r\n\t * 根据颜色的透明度（Alpha值）返回较短的十六进制值，并且值前面带有#符号。\r\n\t * @param allowShortChar 如果可能的话，将十六进制值缩短至3个或4个字符\r\n\t */\r\n\ttoHexShortString(allowShortChar = false) : string {\r\n\t\treturn this.a == 1 ? this.toHexString(allowShortChar) : this.toHex8String(allowShortChar);\r\n\t}\r\n\t/**\r\n\t * 将当前颜色转换为 RGB（红、绿、蓝）颜色空间的对象表示。\r\n\t * @returns 一个包含 `r`、`g`、`b` 和 `a` 属性的对象，表示当前颜色的 RGB 格式。\r\n\t */\r\n\ttoRgb() : RGBA {\r\n\t\treturn {\r\n\t\t\tr: Math.round(this.r),\r\n\t\t\tg: Math.round(this.g),\r\n\t\t\tb: Math.round(this.b),\r\n\t\t\ta: this.a,\r\n\t\t} as RGBA;\r\n\t}\r\n\r\n\t/**\r\n\t * 将当前颜色对象转换为CSS风格的RGB或RGBA字符串\r\n\t * @returns {string} 返回一个CSS风格的RGB或RGBA字符串，表示当前颜色对象的颜色值\r\n\t */\r\n\ttoRgbString() : string {\r\n\t\tconst r = Math.round(this.r);\r\n\t\tconst g = Math.round(this.g);\r\n\t\tconst b = Math.round(this.b);\r\n\t\treturn this.a == 1 ? `rgb(${r}, ${g}, ${b})` : `rgba(${r}, ${g}, ${b}, ${this.roundA})`;\r\n\t}\r\n\t/**\r\n\t * 将当前颜色转换为百分比表示的 RGB（红、绿、蓝）颜色空间的对象表示。\r\n\t * @returns 一个包含 `r`、`g`、`b` 和 `a` 属性的对象，表示当前颜色的百分比表示的 RGB 格式。\r\n\t */\r\n\ttoPercentageRgb() : RGBAString {\r\n\t\t// 定义一个格式化函数，将颜色值转换为百分比表示\r\n\t\tconst fmt = (x : number) : string => `${Math.round(bound01(x, 255) * 100)}%`;\r\n\t\t// 返回一个RGBA对象，其中颜色值已转换为百分比表示\r\n\t\treturn {\r\n\t\t\tr: fmt(this.r),\r\n\t\t\tg: fmt(this.g),\r\n\t\t\tb: fmt(this.b),\r\n\t\t\ta: this.a,\r\n\t\t} as RGBAString;\r\n\t}\r\n\t/**\r\n\t * 将RGBA相对值插值为一个字符串，颜色值以百分比表示。\r\n\t */\r\n\ttoPercentageRgbString() : string {\r\n\t\t// 定义一个四舍五入函数，将颜色值转换为百分比表示的整数\r\n\t\tconst rnd = (x : number) : number => Math.round(bound01(x, 255) * 100);\r\n\t\t// 根据alpha值返回不同的字符串表示\r\n\t\treturn this.a == 1\r\n\t\t\t? `rgb(${rnd(this.r)}%, ${rnd(this.g)}%, ${rnd(this.b)}%)`\r\n\t\t\t: `rgba(${rnd(this.r)}%, ${rnd(this.g)}%, ${rnd(this.b)}%, ${this.roundA})`;\r\n\t}\r\n\t/**\r\n\t * 返回这个颜色的'真实'名称,不存在返回null\r\n\t */\r\n\ttoName() : string | null {\r\n\t\tif (this.a == 0) {\r\n\t\t\treturn 'transparent';\r\n\t\t}\r\n\r\n\t\tif (this.a < 1) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\tconst hex = this.toHexString()//'#' + rgbToHex(this.r, this.g, this.b, false);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\t\treturn this.reversedNames.get(hex)\r\n\r\n\t}\r\n\t/**\r\n\t * 将颜色转换为字符串表示。\r\n\t *\r\n\t * @param format - 用于显示字符串表示的格式。\r\n\t */\r\n\t// toString<T extends 'name'>(format : T) : string;\r\n\t// toString<T extends LColorFormats>(format ?: T) : string;\r\n\r\n\r\n\toverride toString() : string {\r\n\t\treturn this.toString(null)\r\n\t}\r\n\r\n\ttoString(format ?: LColorFormats) : string {\r\n\t\tconst formatSet = toBoolean(format);\r\n\t\tlet _format = format ?? this.format;\r\n\r\n\t\tlet formattedString : string | null = null;\r\n\t\tconst hasAlpha = this.a < 1 && this.a >= 0;\r\n\t\tconst needsAlphaFormat = !formatSet && hasAlpha && (_format != null && _format.startsWith('hex') || _format == 'name');\r\n\r\n\t\tif (needsAlphaFormat) {\r\n\t\t\t// 特殊情况：透明度，所有其他非透明度格式都会在有透明度时返回rgba。\r\n\t\t\t// 当透明度为0时，返回\"transparent\"。\r\n\t\t\tif (_format == 'name' && this.a == 0) {\r\n\t\t\t\treturn this.toName() ?? 'transparent';\r\n\t\t\t}\r\n\t\t\treturn this.toRgbString();\r\n\t\t}\r\n\r\n\t\tif (_format == 'rgb') {\r\n\t\t\tformattedString = this.toRgbString();\r\n\t\t}\r\n\r\n\t\tif (_format == 'prgb') {\r\n\t\t\tformattedString = this.toPercentageRgbString();\r\n\t\t}\r\n\r\n\t\tif (_format == 'hex' || _format == 'hex6') {\r\n\t\t\tformattedString = this.toHexString();\r\n\t\t}\r\n\r\n\t\tif (_format == 'hex3') {\r\n\t\t\tformattedString = this.toHexString(true);\r\n\t\t}\r\n\r\n\t\tif (_format == 'hex4') {\r\n\t\t\tformattedString = this.toHex8String(true);\r\n\t\t}\r\n\r\n\t\tif (_format == 'hex8') {\r\n\t\t\tformattedString = this.toHex8String();\r\n\t\t}\r\n\r\n\t\tif (_format == 'name') {\r\n\t\t\tformattedString = this.toName();\r\n\t\t}\r\n\r\n\t\tif (_format == 'hsl') {\r\n\t\t\tformattedString = this.toHslString();\r\n\t\t}\r\n\r\n\t\tif (_format == 'hsv') {\r\n\t\t\tformattedString = this.toHsvString();\r\n\t\t}\r\n\t\tif (_format == 'hsb') {\r\n\t\t\tformattedString = this.toHsbString();\r\n\t\t}\r\n\t\treturn formattedString ?? this.toHexString();\r\n\t}\r\n\ttoNumber() : number {\r\n\t\treturn (Math.round(this.r) << 16) + (Math.round(this.g) << 8) + Math.round(this.b);\r\n\t}\r\n\tclone() : TinyColor {\r\n\t\treturn new TinyColor(this.toString());\r\n\t}\r\n\t/**\r\n\t * 将颜色变浅指定的量。提供100将始终返回白色。\r\n\t * @param amount - 有效值介于1-100之间\r\n\t */\r\n\tlighten(amount = 10) : TinyColor {\r\n\t\tconst hsl = this.toHsl();\r\n\t\thsl.l += amount / 100;\r\n\t\thsl.l = clamp01(hsl.l);\r\n\t\treturn new TinyColor(hsl, { format: this.format } as LColorOptions);\r\n\t}\r\n\t/**\r\n\t * 将颜色变亮一定的量，范围从0到100。\r\n\t * @param amount - 有效值在1-100之间\r\n\t */\r\n\tbrighten(amount = 10) : TinyColor {\r\n\t\tconst rgb = this.toRgb();\r\n\t\trgb.r = Math.max(0, Math.min(255, rgb.r - Math.round(255 * -(amount / 100))));\r\n\t\trgb.g = Math.max(0, Math.min(255, rgb.g - Math.round(255 * -(amount / 100))));\r\n\t\trgb.b = Math.max(0, Math.min(255, rgb.b - Math.round(255 * -(amount / 100))));\r\n\t\treturn new TinyColor(rgb, { format: this.format } as LColorOptions);\r\n\t}\r\n\t/**\r\n\t * 将颜色变暗一定的量，范围从0到100。\r\n\t * 提供100将始终返回黑色。\r\n\t * @param amount - 有效值在1-100之间\r\n\t */\r\n\tdarken(amount = 10) : TinyColor {\r\n\t\tconst hsl = this.toHsl();\r\n\t\thsl.l -= amount / 100;\r\n\t\thsl.l = clamp01(hsl.l);\r\n\t\treturn new TinyColor(hsl, { format: this.format } as LColorOptions);\r\n\t}\r\n\t/**\r\n\t * 将颜色与纯白色混合，范围从0到100。\r\n\t * 提供0将什么都不做，提供100将始终返回白色。\r\n\t * @param amount - 有效值在1-100之间\r\n\t */\r\n\ttint(amount = 10) : TinyColor {\r\n\t\treturn this.mix('white', amount);\r\n\t}\r\n\t/**\r\n\t * 将颜色与纯黑色混合，范围从0到100。\r\n\t * 提供0将什么都不做，提供100将始终返回黑色。\r\n\t * @param amount - 有效值在1-100之间\r\n\t */\r\n\tshade(amount = 10) : TinyColor {\r\n\t\treturn this.mix('black', amount);\r\n\t}\r\n\t/**\r\n\t * 将颜色的饱和度降低一定的量，范围从0到100。\r\n\t * 提供100与调用greyscale相同\r\n\t * @param amount - 有效值在1-100之间\r\n\t */\r\n\tdesaturate(amount = 10) : TinyColor {\r\n\t\tconst hsl = this.toHsl();\r\n\t\thsl.s -= amount / 100;\r\n\t\thsl.s = clamp01(hsl.s);\r\n\t\treturn new TinyColor(hsl, { format: this.format } as LColorOptions);\r\n\t}\r\n\t/**\r\n\t * 将颜色饱和度提高一定数量，范围从 0 到 100。\r\n\t * @param amount - 有效值介于 1 到 100 之间。\r\n\t */\r\n\tsaturate(amount = 10) : TinyColor {\r\n\t\tconst hsl = this.toHsl();\r\n\t\thsl.s += amount / 100;\r\n\t\thsl.s = clamp01(hsl.s);\r\n\t\treturn new TinyColor(hsl, { format: this.format } as LColorOptions);\r\n\t}\r\n\t/**\r\n\t * 将颜色完全去饱和为灰度。\r\n\t * 等同于调用 `desaturate(100)`。\r\n\t */\r\n\tgreyscale() : TinyColor {\r\n\t\treturn this.desaturate(100);\r\n\t}\r\n\t/**\r\n\t * spin 方法接收一个正数或负数作为参数，表示色相的变化量，变化范围在 [-360, 360] 之间。\r\n\t * 如果提供的值超出此范围，它将被限制在此范围内。\r\n\t */\r\n\tspin(amount : number) : TinyColor {\r\n\t\tconst hsl = this.toHsl();\r\n\t\tconst hue = (hsl.h + amount) % 360;\r\n\t\thsl.h = hue < 0 ? 360 + hue : hue;\r\n\t\treturn new TinyColor(hsl, { format: this.format } as LColorOptions);\r\n\t}\r\n\t/**\r\n\t * 将当前颜色与另一种颜色按给定的比例混合，范围从0到100。\r\n\t * 0表示不混合（返回当前颜色）\r\n\t */\r\n\tmix(color : LColorInput, amount = 50) : TinyColor {\r\n\t\tconst rgb1 = this.toRgb();\r\n\t\tconst rgb2 = new TinyColor(color).toRgb();\r\n\r\n\t\tconst p = amount / 100;\r\n\t\tconst rgba = {\r\n\t\t\tr: (rgb2.r - rgb1.r) * p + rgb1.r,\r\n\t\t\tg: (rgb2.g - rgb1.g) * p + rgb1.g,\r\n\t\t\tb: (rgb2.b - rgb1.b) * p + rgb1.b,\r\n\t\t\ta: (rgb2.a - rgb1.a) * p + rgb1.a,\r\n\t\t};\r\n\r\n\t\treturn new TinyColor(rgba, { format: this.format } as LColorOptions);\r\n\t}\r\n\t/**\r\n\t * 生成一组与当前颜色相似的颜色。\r\n\t * 这些颜色在色相环上是相邻的，形成一个类似于彩虹的颜色序列。\r\n\t * @param results - 要生成的相似颜色的数量，默认值为 6。\r\n\t * @param slices - 将色相环划分为多少个部分，默认值为 30。\r\n\t * @returns 一个包含当前颜色及其相似颜色的 TinyColor 对象数组。\r\n\t */\r\n\tanalogous(results = 6, slices = 30) : TinyColor[] {\r\n\t\tconst hsl = this.toHsl();\r\n\t\tconst part = 360 / slices;\r\n\t\tconst ret : TinyColor[] = [this];\r\n\t\tlet _results = results\r\n\t\t// for (hsl.h = (hsl.h - ((part * results) >> 1) + 720) % 360; --results;) {\r\n\t\t// \thsl.h = (hsl.h + part) % 360;\r\n\t\t// \tret.push(new TinyColor(hsl));\r\n\t\t// }\r\n\t\thsl.h = (hsl.h - ((part * _results) >> 1) + 720) % 360;\r\n\t\twhile (_results > 0) {\r\n\t\t\thsl.h = (hsl.h + part) % 360;\r\n\t\t\tret.push(new TinyColor(hsl));\r\n\t\t\t_results--;\r\n\t\t}\r\n\t\treturn ret;\r\n\t}\r\n\t/**\r\n\t * 计算当前颜色的补色。\r\n\t * 补色是指在色相环上相对位置的颜色，它们的色相差为 180°。\r\n\t * taken from https://github.com/infusion/jQuery-xcolor/blob/master/jquery.xcolor.js\r\n\t * @returns 一个 TinyColor 对象，表示当前颜色的补色。\r\n\t */\r\n\tcomplement() : TinyColor {\r\n\t\tconst hsl = this.toHsl();\r\n\t\thsl.h = (hsl.h + 180) % 360;\r\n\t\treturn new TinyColor(hsl, { format: this.format } as LColorOptions);\r\n\t}\r\n\t/**\r\n\t * 生成一组与当前颜色具有相同色相和饱和度的颜色。\r\n\t * 这些颜色的亮度值不同，形成一个单色调的颜色序列。\r\n\t * @param results - 要生成的单色调颜色的数量，默认值为 6。\r\n\t * @returns 一个包含当前颜色及其单色调颜色的 TinyColor 对象数组。\r\n\t */\r\n\tmonochromatic(results = 6) : TinyColor[] {\r\n\t\tconst hsv = this.toHsv();\r\n\t\tconst { h } = hsv;\r\n\t\tconst { s } = hsv;\r\n\t\tlet { v } = hsv;\r\n\t\tconst res : TinyColor[] = [];\r\n\t\tconst modification = 1 / results;\r\n\t\tlet _results = results\r\n\t\t// while (results--) {\r\n\t\t// \tres.push(new TinyColor({ h, s, v }));\r\n\t\t// \tv = (v + modification) % 1;\r\n\t\t// }\r\n\t\twhile (_results > 0) {\r\n\t\t\tres.push(new TinyColor({ h, s, v }));\r\n\t\t\tv = (v + modification) % 1;\r\n\t\t\t_results--\r\n\t\t}\r\n\t\treturn res;\r\n\t}\r\n\t/**\r\n\t * 生成当前颜色的分裂补色。\r\n\t * 分裂补色是指在色相环上位于当前颜色的两侧的颜色，它们的色相差为 180°。\r\n\t * @returns 一个包含当前颜色及其分裂补色的 TinyColor 对象数组。\r\n\t */\r\n\tsplitcomplement() : TinyColor[] {\r\n\t\tconst hsl = this.toHsl();\r\n\t\tconst { h } = hsl;\r\n\t\treturn [\r\n\t\t\tthis,\r\n\t\t\tnew TinyColor({ h: (h + 72) % 360, s: hsl.s, l: hsl.l }),\r\n\t\t\tnew TinyColor({ h: (h + 216) % 360, s: hsl.s, l: hsl.l }),\r\n\t\t] as TinyColor[];\r\n\t}\r\n\t/**\r\n\t * 计算当前颜色在给定背景颜色上的显示效果。\r\n\t * @param background - 背景颜色，可以是任何 LColorInput 类型的值。\r\n\t * @returns 一个 TinyColor 对象，表示当前颜色在给定背景颜色上的显示效果。\r\n\t */\r\n\tonBackground(background : LColorInput) : TinyColor {\r\n\t\tconst fg = this.toRgb();\r\n\t\tconst bg = new TinyColor(background).toRgb();\r\n\t\tconst alpha = fg.a + bg.a * (1 - fg.a);\r\n\r\n\t\treturn new TinyColor({\r\n\t\t\tr: (fg.r * fg.a + bg.r * bg.a * (1 - fg.a)) / alpha,\r\n\t\t\tg: (fg.g * fg.a + bg.g * bg.a * (1 - fg.a)) / alpha,\r\n\t\t\tb: (fg.b * fg.a + bg.b * bg.a * (1 - fg.a)) / alpha,\r\n\t\t\ta: alpha,\r\n\t\t});\r\n\t}\r\n\t/**\r\n\t * 生成当前颜色的三色调。\r\n\t * 三色调是指在色相环上位于当前颜色的两侧的颜色，它们的色相差为 120°。\r\n\t * 这是 `polyad(3)` 方法的别名。\r\n\t * @returns 一个包含当前颜色及其三色调颜色的 TinyColor 对象数组。\r\n\t */\r\n\ttriad() : TinyColor[] {\r\n\t\treturn this.polyad(3);\r\n\t}\r\n\t/**\r\n\t * 生成当前颜色的四色调。\r\n\t * 四色调是指在色相环上位于当前颜色的两侧的颜色，它们的色相差为 90°。\r\n\t * 这是 `polyad(4)` 方法的别名。\r\n\t * @returns 一个包含当前颜色及其四色调颜色的 TinyColor 对象数组。\r\n\t */\r\n\ttetrad() : TinyColor[] {\r\n\t\treturn this.polyad(4);\r\n\t}\r\n\t/**\r\n\t * 生成当前颜色的 n 色调。\r\n\t * n 色调是指在色相环上位于当前颜色的两侧的颜色，它们的色相差为 360° / n。\r\n\t * Get polyad colors, like (for 1, 2, 3, 4, 5, 6, 7, 8, etc...)\r\n\t * monad, dyad, triad, tetrad, pentad, hexad, heptad, octad, etc...\r\n\t * @param n - 一个整数，表示要生成的色调数量。\r\n\t * @returns 一个包含当前颜色及其 n 色调颜色的 TinyColor 对象数组。\r\n\t */\r\n\tpolyad(n : number) : TinyColor[] {\r\n\t\tconst hsl = this.toHsl();\r\n\t\tconst { h } = hsl;\r\n\r\n\t\tconst result : TinyColor[] = [this];\r\n\t\tconst increment = 360 / n;\r\n\t\tfor (let i = 1; i < n; i++) {\r\n\t\t\tresult.push(new TinyColor({ h: (h + i * increment) % 360, s: hsl.s, l: hsl.l }));\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t}\r\n\t/**\r\n\t * 比较当前颜色与给定颜色是否相等。\r\n\t * @param color - 一个 LColorInput 类型的值，表示要比较的颜色。\r\n\t * @returns 一个布尔值，表示当前颜色与给定颜色是否相等。\r\n\t */\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\toverride equals(other ?: LColorInput) : boolean {\r\n\t\tif (other == null) {\r\n\t\t\treturn false\r\n\t\t} else if (other instanceof TinyColor) {\r\n\t\t\treturn this.toRgbString() == (other as TinyColor).toRgbString()\r\n\t\t}\r\n\t\treturn this.toRgbString() == new TinyColor(other).toRgbString();\r\n\t}\r\n\r\n}\r\n\r\nexport function tinyColor(color : LColorInput = '', opts : LColorOptions = {} as LColorOptions) : TinyColor {\r\n\treturn new TinyColor(color, opts);\r\n}"]}