{"version":3,"file":"utils.uts","sourceRoot":"","sources":["uni_modules/lime-upload/components/l-upload/utils.ts"],"names":[],"mappings":"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","sourcesContent":["// @ts-nocheck\nimport { UploadFile, ChooseFileOptions, Oversize } from './type'\n// import { chooseFile, ChooseFileOption, ChooseFileSuccessCallbackResult } from '@/uni_modules/lime-choose-file'\n/**\n * 由于小程序暂时在ios上不支持返回上传文件的fileType，这里用文件的后缀来判断\n * @param mediaType\n * @param tempFilePath\n * @returns string\n * @link https://developers.weixin.qq.com/community/develop/doc/00042820b28ee8fb41fc4d0c254c00\n */\nexport function getFileType(tempFilePath : string, fileType ?: string) : string {\n\tif (fileType != null) return fileType.replace(/\\/.+/,''); // 如果有返回fileType就直接用\n\t\n\t// 否则根据文件后缀进行判读\n\tconst videoType = ['avi', 'wmv', 'mkv', 'mp4', 'mov', 'rm', '3gp', 'flv', 'mpg', 'rmvb'];\n\tconst temp = tempFilePath.split('.');\n\tconst postfix = temp[temp.length - 1];\n\tif (videoType.includes(postfix.toLocaleLowerCase())) {\n\t\treturn 'video';\n\t}\n\treturn 'image';\n}\n\n// 选中文件之后，计算一个随机的短文件名\n// export function getRandFileName(filePath: string):string {\n// \tconst extIndex = filePath.lastIndexOf('.');\n// \tconst extName = extIndex === -1 ? '' : filePath.substr(extIndex);\n// \treturn parseInt(`${Date.now()}${Math.floor(Math.random() * 900 + 100)}`, 10).toString(36) + extName;\n// }\nexport function getFileName(filePath: string): string {\n\treturn filePath.substring(filePath.lastIndexOf('/') + 1)\n}\n\nexport const isOverSize = (size:number, sizeLimit:number|null):boolean => {\n  if (sizeLimit == null) return false;\n\n  const base = 1000;\n  // const unitMap = {\n  //   B: 1,\n  //   KB: base,\n  //   MB: base * base,\n  //   GB: base * base * base,\n  // };\n  const computedSize =  sizeLimit * base \n  // const computedSize = typeof sizeLimit == 'number' ? sizeLimit * base : sizeLimit?.size * unitMap[sizeLimit?.unit ?? 'KB']; // 单位 KB\n\n  return size > computedSize;\n};\n\n\n\nexport function chooseImage(opts : ChooseFileOptions) {\n\n\n\n\n\n\n\n\tuni.chooseImage({\n\t\tcount: opts.count,\n\t\tsizeType: opts.sizeType,\n\t\tsourceType: opts.sourceType,\n\t\textension: opts.extension,\n\t\tsuccess(res){\n\t\t\topts.success?.(res)\n\t\t},\n\t\tfail(err) {\n\t\t\topts.fail?.(err)\n\t\t}\n\t})\n\n}\n\nexport function chooseVideo(opts : ChooseFileOptions) {\n\n\n\n\n\n\n\n\n\tuni.chooseVideo({\n\t\tsourceType: opts.sourceType,\n\n\n\n\n\n\n\t\tsuccess(res){\n\t\t\topts.success?.(res)\n\t\t},\n\t\tfail(err) {\n\t\t\topts.fail?.(err)\n\t\t}\n\t})\n\n}\n\nexport function chooseMedia(opts : ChooseFileOptions) {\n\n\n\tuni.chooseMedia({\n\t\tcount: opts.count,\n\t\tmediaType: ['image', 'video'],\n\t\tsourceType: opts.sourceType,\n\t\tmaxDuration: opts.maxDuration ?? 10,\n\t\tcamera: opts.camera ?? 'back',\n\t\tsuccess(res) {\n\t\t\topts.success?.(res)\n\t\t},\n\t\tfail(err) {\n\t\t\topts.fail?.(err)\n\t\t}\n\t} as ChooseMediaOptions)\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n}\n\nexport function chooseAll(opts : ChooseFileOptions) {\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\n\tuni.chooseFile({\n\t\tcount: opts.count,\n\t\ttype: 'all',\n\t\tsuccess(res) {\n\t\t\topts.success?.(res)\n\t\t},\n\t\tfail(err) {\n\t\t\topts.fail?.(err)\n\t\t}\n\t})\n\n\n\n\n}\n\n\nfunction normalizeChooseFiles(\n\ttype: string, \n\ttempFiles: UTSJSONObject[], //ChooseImageTempFile\n\ttempFilePaths:string[], \n\tsizeLimit:number|null,\n\toversize: Oversize | null\n\t):UploadFile[]{\n\tconst files : UploadFile[] = [];\n\n\ttempFiles.forEach((temp, index) =>{\n\t\tconst tempFilePath = (temp['tempFilePath'] as string | null) ?? tempFilePaths[index]\n\t\tconst name = (temp['name'] as string | null) ?? getFileName(tempFilePath);\n\t\tconst size = (temp['size'] as number | null) ?? 0;\n\t\tconst width = (temp['width'] as number | null);\n\t\tconst height = (temp['height'] as number | null)\n\t\tconst duration = (temp['duration'] as number | null);\n\t\tconst path = (temp['path'] as string | null) ?? tempFilePath;\n\t\tconst thumb = (temp['thumbTempFilePath'] as string | null);\n\t\tconst _type = (type == 'all' ? getFileType(tempFilePath, temp['type'] as string | null) : type) as \"video\" | \"image\"; \n\t\t\n\t\t\n\t\tif (isOverSize(size, sizeLimit)) {\n\t\t\toversize?.(temp)\n\t\t\treturn\n\t\t};\n\t\t\n\t\tfiles.push({\n\t\t\tname,\n\t\t\ttype: _type,\n\t\t\turl: path,\n\t\t\tpath,\n\t\t\tsize,\n\t\t\twidth,\n\t\t\theight,\n\t\t\tduration,\n\t\t\tthumb,\n\t\t\tpercent: 0,\n\t\t\t// status: 'done'\n\t\t} as UploadFile)\n\t})\n\treturn files\n}\n\nexport function chooseFiles(opts: ChooseFileOptions):Promise<UploadFile[]> {\n\treturn new Promise((resolve, reject)=>{\n\t\tif(opts.mediaType == 'image') {\n\t\t\tchooseImage({\n\t\t\t\tcount: opts.count,\n\t\t\t\tmediaType: opts.mediaType,\n\t\t\t\tsizeType: opts.sizeType,\n\t\t\t\tsourceType: opts.sourceType,\n\t\t\t\tsuccess(result: any){\n\t\t\t\t\tconst res = result as ChooseImageSuccess\n\n\n\n\n\n\t\t\t\t\tconst tempFilePaths = res.tempFilePaths\n\t\t\t\t\tconst tempFiles = res.tempFiles.map((item):UTSJSONObject => {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tname: item.name, \n\t\t\t\t\t\t\tpath: item.path, \n\t\t\t\t\t\t\tsize: item.size, \n\t\t\t\t\t\t\ttype: item.type\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\n\t\t\t\t\tconst files = normalizeChooseFiles('image', tempFiles, tempFilePaths, opts.sizeLimit, opts.oversize)\n\t\t\t\t\tresolve(files)\n\t\t\t\t}\n\t\t\t} as ChooseFileOptions)\n\t\t} else if(opts.mediaType == 'video') {\n\t\t\tchooseVideo({\n\t\t\t\tcount: opts.count,\n\t\t\t\tmediaType: opts.mediaType,\n\t\t\t\tsourceType: opts.sourceType,\n\t\t\t\tsizeType: opts.sizeType,\n\t\t\t\tmaxDuration: opts.maxDuration,\n\t\t\t\tsuccess(result) {\n\t\t\t\t\tconst res = result as ChooseVideoSuccess \n\n\n\n\n\n\t\t\t\t\tconst tempFilePaths = [res.tempFilePath] as string[]\n\t\t\t\t\tconst {tempFilePath, duration, size, height, width} = res\n\t\t\t\t\tconst tempFiles = [{path: tempFilePath, duration, duration, size, height, width}] as UTSJSONObject[]\n\n\t\t\t\t\tconst files = normalizeChooseFiles('video', tempFiles, tempFilePaths, opts.sizeLimit, opts.oversize)\n\t\t\t\t\t\n\t\t\t\t\tresolve(files)\n\t\t\t\t}\n\t\t\t} as ChooseFileOptions)\n\t\t} else if(opts.mediaType == 'media') {\n\t\t\tchooseMedia({\n\t\t\t\tcount: opts.count,\n\t\t\t\tmediaType: 'media',\n\t\t\t\tsourceType: opts.sourceType,\n\t\t\t\tmaxDuration: opts.maxDuration ?? 10,\n\t\t\t\tcamera: opts.camera ?? 'back',\n\t\t\t\tsizeType: opts.sizeType,\n\t\t\t\tsuccess(result: any) {\n\n\t\t\t\t\tconst res = result as  ChooseMediaSuccess\n\n\n\n\n\n\t\t\t\t\tconst tempFilePaths = res.tempFiles.map((it):string => it.tempFilePath)\n\t\t\t\t\tconst tempFiles = res.tempFiles.map((it):UTSJSONObject => ({path: it.tempFilePath, size: it.size, type: it.fileType}));\n\n\t\t\t\t\t\n\t\t\t\t\tconst files = normalizeChooseFiles('all', tempFiles, tempFilePaths, opts.sizeLimit, opts.oversize)\n\t\t\t\t\tresolve(files)\n\n\n\n\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t} as ChooseFileOptions)\n\t\t} else {\n\t\t\tchooseAll({\n\t\t\t\tcount: opts.count,\n\t\t\t\tmediaType: opts.mediaType,\n\t\t\t\tsourceType: opts.sourceType,\n\t\t\t\tsizeType: opts.sizeType,\n\t\t\t\tsuccess(result: any){\n\n\n\n\n\n\n\n\t\t\t\t\t\n\n\t\t\t\t\t\n\t\t\t\t\tconst res = result as ChooseFileSuccess\n\t\t\t\t\tconst tempFilePaths = res.tempFilePaths//.map((it):string => it.tempFilePath)\n\t\t\t\t\tconst tempFiles = res.tempFiles.map((it):UTSJSONObject => ({path: it.path, size: it.size, type: it.type, name: it.name}));\n\t\t\t\t\tconst files = normalizeChooseFiles('all', tempFiles, tempFilePaths, opts.sizeLimit, opts.oversize)\n\t\t\t\t\tresolve(files)\n\t\t\t\t\t\n\n\n\n\n\t\t\t\t\t\n\n\n\n\n\n\n\n\t\t\t\t\t\n\t\t\t\t\t// const res = result as  ChooseMediaSuccess // ChooseFileSuccess\n\t\t\t\t\t// const tempFilePaths = res.tempFiles.map((it):string => it.tempFilePath)\n\t\t\t\t\t// const tempFiles = res.tempFiles.map((it):UTSJSONObject => ({path: it.tempFilePath, size: it.size}));\n\t\t\t\t\t// const files = normalizeChooseFiles('all', tempFiles, tempFilePaths, opts.sizeLimit, opts.oversize)\n\t\t\t\t\t// resolve(files)\n\n\n\t\t\t\t}\n\t\t\t} as ChooseFileOptions)\n\t\t\t\n\t\t}\n\t})\n}"]}