import { SetClipboardDataOption as SetClipboardDataOption_1 } from "../../../uni_modules/lime-clipboard/utssdk/interface";
import _easycom_fui_icon from '@/uni_modules/firstui-unix/components/fui-icon/fui-icon.uvue';
import _easycom_l_progress from '@/uni_modules/lime-progress/components/l-progress/l-progress.uvue';
import _easycom_fui_button from '@/uni_modules/firstui-unix/components/fui-button/fui-button.uvue';
import _easycom_fui_radio from '@/uni_modules/firstui-unix/components/fui-radio/fui-radio.uvue';
import _easycom_fui_list_cell from '@/uni_modules/firstui-unix/components/fui-list-cell/fui-list-cell.uvue';
import _easycom_fui_label from '@/uni_modules/firstui-unix/components/fui-label/fui-label.uvue';
import _easycom_fui_radio_group from '@/uni_modules/firstui-unix/components/fui-radio-group/fui-radio-group.uvue';
import _easycom_fui_bottom_popup from '@/uni_modules/firstui-unix/components/fui-bottom-popup/fui-bottom-popup.uvue';
import { ref, onMounted } from 'vue';
import { setClipboardData, getClipboardData, SetClipboardDataOption, GetClipboardDataOption, GetClipboardDataSuccessCallbackOption } from '@/uni_modules/lime-clipboard';
type RadioItem = {
    __$originalPosition?: UTSSourceMapPosition<"RadioItem", "pages/mine/rechargeDataTraffic/rechargeDataTraffic.uvue", 94, 7>;
    deviceTitle: string;
    iccid: string;
    cardid: string;
    cardState: string;
    currentPackage: string;
    useDate: string;
    percent: number;
    total: string;
    checked?: boolean;
};
const __sfc__ = defineComponent({
    __name: 'rechargeDataTraffic',
    setup(__props): any | null {
        const __ins = getCurrentInstance()!;
        const _ctx = __ins.proxy as InstanceType<typeof __sfc__>;
        const _cache = __ins.renderCache;
        const totalDevice = ref<number>(4);
        const percent = ref<number>(50);
        const isShow = ref<boolean>(false);
        const currentDeviceInfo = ref<RadioItem>({
            deviceTitle: '',
            iccid: '',
            cardid: '',
            cardState: '',
            currentPackage: '',
            useDate: '',
            percent: 0,
            total: '',
            checked: true,
        } as RadioItem);
        const radioItems = ref<RadioItem[]>([{
                deviceTitle: '设备信息',
                iccid: '1123456667777887',
                cardid: '13000001111',
                cardState: '在用',
                currentPackage: '店长推荐【终身流量】',
                useDate: '2025-07-07',
                percent: 50,
                total: '100',
            } as RadioItem, {
                deviceTitle: '设备信息1',
                iccid: '1123456667777888',
                cardid: '13000001111',
                cardState: '停机',
                currentPackage: '店长推荐【100G流量】',
                useDate: '2025-07-08',
                percent: 70,
                total: '200',
            } as RadioItem, {
                deviceTitle: '设备信息2',
                cardid: '13000001111',
                iccid: '310203030443',
                cardState: '注销',
                currentPackage: '加油包',
                useDate: '2025-07-09',
                percent: 100,
                total: '300',
            } as RadioItem]);
        const getValue = (e: string) => {
            const selectedItem = radioItems.value.find((item): boolean => item.iccid == e);
            if (selectedItem != null) {
                console.log(selectedItem, " at pages/mine/rechargeDataTraffic/rechargeDataTraffic.uvue:141");
                selectedItem.checked = true;
                currentDeviceInfo.value = selectedItem;
            }
            uni.showToast({
                title: '更换成功',
                icon: 'none'
            });
        };
        const currentInfo = () => {
            radioItems.value.forEach(item => {
                item.checked = false;
            });
            radioItems.value[0].checked = true;
            currentDeviceInfo.value = radioItems.value[0];
        };
        const showPopup = () => {
            isShow.value = true;
        };
        const closePopup = () => {
            isShow.value = false;
        };
        const submit = () => {
            uni.showToast({
                title: '去充值',
                icon: 'none'
            });
        };
        const copyRight = () => {
            setClipboardData({
                data: currentDeviceInfo.value.iccid,
                success: function (_res) {
                    uni.showToast({
                        title: '复制成功',
                        icon: 'none'
                    });
                }
            } as SetClipboardDataOption_1);
        };
        onMounted(() => {
            currentInfo();
        });
        return (): any | null => {
            const _component_fui_icon = resolveEasyComponent("fui-icon", _easycom_fui_icon);
            const _component_l_progress = resolveEasyComponent("l-progress", _easycom_l_progress);
            const _component_fui_button = resolveEasyComponent("fui-button", _easycom_fui_button);
            const _component_fui_radio = resolveEasyComponent("fui-radio", _easycom_fui_radio);
            const _component_fui_list_cell = resolveEasyComponent("fui-list-cell", _easycom_fui_list_cell);
            const _component_fui_label = resolveEasyComponent("fui-label", _easycom_fui_label);
            const _component_fui_radio_group = resolveEasyComponent("fui-radio-group", _easycom_fui_radio_group);
            const _component_fui_bottom_popup = resolveEasyComponent("fui-bottom-popup", _easycom_fui_bottom_popup);
            return createElementVNode("view", utsMapOf({ class: "container" }), [
                createElementVNode("view", utsMapOf({ class: "device-total" }), [
                    createElementVNode("view", utsMapOf({ class: "device-total-title" }), [
                        createElementVNode("text", null, "充值设备"),
                        createElementVNode("text", utsMapOf({ class: "device-total-title-color" }), "（共" + toDisplayString(totalDevice.value) + "台设备）", 1 /* TEXT */)
                    ]),
                    createElementVNode("view", utsMapOf({ class: "device-total-title" }), [
                        createElementVNode("text", utsMapOf({ onClick: showPopup }), "更换设备"),
                        createVNode(_component_fui_icon, utsMapOf({
                            name: "arrowright",
                            size: 50
                        }))
                    ])
                ]),
                createElementVNode("view", utsMapOf({ class: "device-info-box" }), [
                    createElementVNode("text", utsMapOf({ class: "device-title" }), "设备信息"),
                    createElementVNode("view", utsMapOf({ class: "device-info-item" }), [
                        createElementVNode("text", null, "ICCID"),
                        createElementVNode("view", utsMapOf({ class: "iccid-info" }), [
                            createElementVNode("text", null, toDisplayString(currentDeviceInfo.value.iccid), 1 /* TEXT */),
                            createVNode(_component_fui_icon, utsMapOf({
                                name: "info",
                                size: 40,
                                onOnclick: copyRight
                            }))
                        ])
                    ]),
                    createElementVNode("view", utsMapOf({ class: "device-info-item" }), [
                        createElementVNode("text", null, "卡号"),
                        createElementVNode("text", null, toDisplayString(currentDeviceInfo.value.cardid), 1 /* TEXT */)
                    ]),
                    createElementVNode("view", utsMapOf({ class: "device-info-item" }), [
                        createElementVNode("text", null, "卡片状态"),
                        createElementVNode("text", null, toDisplayString(currentDeviceInfo.value.cardState), 1 /* TEXT */)
                    ]),
                    createElementVNode("view", utsMapOf({ class: "device-info-item" }), [
                        createElementVNode("text", null, "当前套餐"),
                        createElementVNode("text", null, toDisplayString(currentDeviceInfo.value.currentPackage), 1 /* TEXT */)
                    ]),
                    createElementVNode("view", utsMapOf({ class: "device-info-item add-style" }), [
                        createElementVNode("text", null, "生效日期"),
                        createElementVNode("text", null, toDisplayString(currentDeviceInfo.value.useDate), 1 /* TEXT */)
                    ]),
                    createElementVNode("text", null, "流量"),
                    createElementVNode("view", utsMapOf({ class: "progess" }), [
                        createVNode(_component_l_progress, utsMapOf({
                            percent: currentDeviceInfo.value.percent,
                            "show-info": true
                        }), null, 8 /* PROPS */, ["percent"])
                    ]),
                    createElementVNode("view", utsMapOf({ class: "device-info-item" }), [
                        createElementVNode("text", null, "已用50G(50%)"),
                        createElementVNode("text", null, "可用50G(共100G)")
                    ])
                ]),
                createElementVNode("view", utsMapOf({ class: "btn-box" }), [
                    createVNode(_component_fui_button, utsMapOf({
                        color: "#fff",
                        text: "去充值",
                        background: "#1296db",
                        height: "80rpx",
                        onOnclick: submit
                    }))
                ]),
                createVNode(_component_fui_bottom_popup, utsMapOf({
                    visible: isShow.value,
                    onClose: closePopup
                }), utsMapOf({
                    default: withSlotCtx((): any[] => [
                        createElementVNode("view", utsMapOf({ class: "fui-scroll__wrap" }), [
                            createElementVNode("view", utsMapOf({ class: "popup-title" }), [
                                createElementVNode("text", null, "设备列表"),
                                createElementVNode("view", utsMapOf({ onClick: closePopup }), [
                                    createVNode(_component_fui_icon, utsMapOf({
                                        name: "close",
                                        size: 40
                                    }))
                                ])
                            ]),
                            createVNode(_component_fui_radio_group, utsMapOf({ onChange: getValue }), utsMapOf({
                                default: withSlotCtx((): any[] => [
                                    createElementVNode(Fragment, null, RenderHelpers.renderList(radioItems.value, (item, index, __index, _cached): any => {
                                        return createVNode(_component_fui_label, utsMapOf({ key: index }), utsMapOf({
                                            default: withSlotCtx((): any[] => [
                                                createVNode(_component_fui_list_cell, null, utsMapOf({
                                                    default: withSlotCtx((): any[] => [
                                                        createElementVNode("view", utsMapOf({ class: "fui-list__cell" }), [
                                                            createElementVNode("text", null, toDisplayString(item.deviceTitle), 1 /* TEXT */),
                                                            createVNode(_component_fui_radio, utsMapOf({
                                                                checked: item.checked,
                                                                value: item.iccid
                                                            }), null, 8 /* PROPS */, ["checked", "value"])
                                                        ])
                                                    ]),
                                                    _: 2 /* DYNAMIC */
                                                }), 1024 /* DYNAMIC_SLOTS */)
                                            ]),
                                            _: 2 /* DYNAMIC */
                                        }), 1024 /* DYNAMIC_SLOTS */);
                                    }), 128 /* KEYED_FRAGMENT */)
                                ]),
                                _: 1 /* STABLE */
                            }))
                        ])
                    ]),
                    _: 1 /* STABLE */
                }), 8 /* PROPS */, ["visible"])
            ]);
        };
    }
});
export default __sfc__;
const GenPagesMineRechargeDataTrafficRechargeDataTrafficStyles = [utsMapOf([["container", padStyleMapOf(utsMapOf([["height", "100%"], ["backgroundColor", "#f5f5f5"], ["paddingTop", "30rpx"], ["paddingRight", "20rpx"], ["paddingBottom", "30rpx"], ["paddingLeft", "20rpx"]]))], ["device-total", utsMapOf([[".container ", utsMapOf([["display", "flex"], ["flexDirection", "row"], ["justifyContent", "space-between"]])]])], ["device-total-title", utsMapOf([[".container .device-total ", utsMapOf([["display", "flex"], ["flexDirection", "row"], ["justifyContent", "center"], ["alignItems", "center"]])]])], ["device-total-title-color", utsMapOf([[".container .device-total .device-total-title ", utsMapOf([["color", "#999999"]])]])], ["device-info-box", utsMapOf([[".container ", utsMapOf([["backgroundColor", "#ffffff"], ["borderTopLeftRadius", "20rpx"], ["borderTopRightRadius", "20rpx"], ["borderBottomRightRadius", "20rpx"], ["borderBottomLeftRadius", "20rpx"], ["paddingTop", "30rpx"], ["paddingRight", "40rpx"], ["paddingBottom", "30rpx"], ["paddingLeft", "40rpx"], ["marginTop", "20rpx"], ["marginRight", 0], ["marginBottom", "20rpx"], ["marginLeft", 0], ["display", "flex"], ["flexDirection", "column"]])]])], ["device-title", utsMapOf([[".container .device-info-box ", utsMapOf([["fontSize", "35rpx"]])]])], ["device-info-item", utsMapOf([[".container .device-info-box ", utsMapOf([["display", "flex"], ["flexDirection", "row"], ["justifyContent", "space-between"], ["marginTop", "20rpx"]])]])], ["iccid-info", utsMapOf([[".container .device-info-box .device-info-item ", utsMapOf([["display", "flex"], ["flexDirection", "row"], ["justifyContent", "space-between"], ["alignItems", "center"]])]])], ["add-style", utsMapOf([[".container .device-info-box ", utsMapOf([["paddingBottom", "60rpx"], ["borderBottomWidth", "1rpx"], ["borderBottomStyle", "solid"], ["borderBottomColor", "#999999"], ["marginBottom", "60rpx"]])]])], ["progess", utsMapOf([[".container .device-info-box ", utsMapOf([["marginTop", "10rpx"], ["marginRight", 0], ["marginBottom", "10rpx"], ["marginLeft", 0]])]])], ["btn-box", utsMapOf([[".container ", utsMapOf([["marginTop", "60rpx"]])]])], ["popup-title", utsMapOf([[".container ", utsMapOf([["display", "flex"], ["flexDirection", "row"], ["justifyContent", "space-between"], ["paddingTop", 0], ["paddingRight", "40rpx"], ["paddingBottom", 0], ["paddingLeft", "40rpx"]])]])], ["fui-scroll__wrap", utsMapOf([[".container ", utsMapOf([["width", "100%"], ["paddingTop", "30rpx"], ["paddingRight", 0], ["paddingBottom", "30rpx"], ["paddingLeft", 0], ["position", "relative"]])]])], ["fui-sub__title", utsMapOf([[".container ", utsMapOf([["textAlign", "center"], ["fontSize", "24rpx"], ["color", "#7F7F7F"], ["transform", "scale(0.9)"]])]])], ["fui-scroll__view", utsMapOf([[".container ", utsMapOf([["width", "100%"], ["height", "50%"]])]])], ["fui-list__cell", utsMapOf([[".container ", utsMapOf([["flex", 1], ["display", "flex"], ["flexDirection", "row"], ["alignItems", "center"], ["justifyContent", "space-between"]])]])]])];
//# sourceMappingURL=rechargeDataTraffic.uvue.map