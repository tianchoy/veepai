{"version":3,"sources":["pages/index/deviceReplay.uvue"],"names":[],"mappings":"AAyEA,MAAM,OAAO,GAAG,eAAe,CAAC,EAAE,CAAC,CAAA;AACnC,eAAe,OAAO,CAAA;AACtB,SAAA,+BAAA,CAAA,IAAA,EAAA,YAAA,CAAA,OAAA,OAAA,CAAA,GAAA,GAAA,GAAA,IAAA,GAAA,OAAA,IAAA,CAAA,CAAA,CAAA;AACA,MAAM,+BAAC,GAAA,EAAA,CAAA","sourcesContent":["<template>\n  <view class=\"video-monitor\">\n    <!-- 日期导航 -->\n    <view class=\"date-nav\">\n      <button @tap=\"changeDate(-1)\">◀</button>\n      <text class=\"date-text\">{{ formattedDate }}</text>\n      <button @tap=\"changeDate(1)\">▶</button>\n    </view>\n\n    <!-- 视频容器（安全封装） -->\n    <view v-if=\"videoReady\" class=\"video-container\">\n      <video\n        id=\"videoPlayer\"\n        :src=\"safeVideoUrl\"\n        :autoplay=\"false\"\n        controls\n        @error=\"handleVideoError\"\n        @timeupdate=\"updateTimeline\"\n        @loadedmetadata=\"initTimeline\"\n      ></video>\n    </view>\n    <view v-else class=\"video-error\">\n      <text>视频加载失败</text>\n    </view>\n\n    <!-- 混合模式时间轴 -->\n    <scroll-view\n      scroll-x\n      class=\"timeline-scroll\"\n      :scroll-left=\"scrollPosition\"\n      @scroll=\"handleTimelineScroll\"\n      :scroll-with-animation=\"true\"\n    >\n      <view class=\"timeline\" :style=\"{ width: timelineTotalWidth + 'px' }\">\n        <!-- 背景基准线 -->\n        <view class=\"baseline\"></view>\n\n        <!-- 动态渲染标记 -->\n        <block v-for=\"mark in visibleMarks\" :key=\"mark.timestamp\">\n          <!-- 普通标记 -->\n          <view\n            v-if=\"!mark.hasEvent\"\n            class=\"time-mark\"\n            :style=\"{ left: mark.position + 'px' }\"\n            @tap=\"seekTo(mark.timestamp)\"\n          >\n            <text class=\"mark-label\">{{ mark.label }}</text>\n          </view>\n\n          <!-- 事件标记（波浪式） -->\n          <view\n            v-else\n            class=\"event-mark\"\n            :style=\"getEventMarkStyle(mark)\"\n            @tap=\"seekTo(mark.timestamp)\"\n          >\n            <view class=\"wave-line\"></view>\n            <text class=\"mark-label\">{{ mark.label }}</text>\n            <view class=\"event-badge\"></view>\n          </view>\n        </block>\n\n        <!-- 当前进度指示器 -->\n        <view\n          class=\"progress-indicator\"\n          :style=\"{ left: currentPosition + 'px' }\"\n        ></view>\n      </view>\n    </scroll-view>\n  </view>\n</template>\n\n<script setup>\nimport { ref, computed, onMounted } from 'vue'\nimport { calculateTimeline } from '@/uts/timelineEngine.uts'\n\n// 视频状态\nconst videoContext = ref(null)\nconst videoReady = ref(false)\nconst safeVideoUrl = ref('')\nconst currentTime = ref(0)\nconst duration = ref(0)\n\n// 时间轴状态\nconst timelineTotalWidth = ref(86400) // 24小时基准宽度\nconst scrollPosition = ref(0)\nconst visibleRange = ref({ start: 0, end: 7200 }) // 默认显示2小时\nconst markDensity = ref(5) // 5分钟间隔\n\n// 日期控制\nconst currentDate = ref(new Date())\nconst formattedDate = computed(() => {\n  const d = currentDate.value\n  return `${d.getFullYear()}-${(d.getMonth()+1).toString().padStart(2,'0')}-${d.getDate().toString().padStart(2,'0')}`\n})\n\n// 事件数据\nconst eventMarkers = ref([])\n\n// 初始化视频系统\nconst initVideoSystem = () => {\n  try {\n    videoContext.value = uni.createVideoContext('videoPlayer', this)\n    // iOS特殊初始化\n\n\n\n\n  } catch (e) {\n    console.error(\"播放器初始化失败:\", e)\n  }\n}\n\n// 加载视频数据\nconst loadVideoData = async () => {\n  // videoReady.value = false\n  // try {\n  //   const res = await uni.request({\n  //     url: `https://your-api.com/video?date=${formattedDate.value}`,\n  //     timeout: 10000\n  //   })\n    \n  //   // URL安全验证\n  //   if (!res.data.url || !res.data.url.startsWith('http')) {\n  //     throw new Error(\"无效视频URL\")\n  //   }\n    \n  //   safeVideoUrl.value = res.data.url\n  //   duration.value = res.data.duration || 86400\n  //   eventMarkers.value = res.data.events || []\n  //   timelineTotalWidth.value = duration.value > 86400 ? duration.value : 86400\n  //   videoReady.value = true\n    \n  // } catch (e) {\n  //   uni.showToast({ title: `加载失败: ${e.message}`, icon: 'none' })\n  // }\n  safeVideoUrl.value = 'https://qiniu-web-assets.dcloud.net.cn/video/sample/2minute-demo.mp4'\n  duration.value =  86400\n  eventMarkers.value = []\n  timelineTotalWidth.value = duration.value > 86400 ? duration.value : 86400\n  videoReady.value = true\n}\n\n// 时间轴计算\nconst visibleMarks = computed(() => {\n  return calculateTimeline({\n    duration: duration.value,\n    width: timelineTotalWidth.value,\n    density: markDensity.value,\n    events: eventMarkers.value,\n    visibleRange: visibleRange.value\n  })\n})\n\n// 事件标记样式\nconst getEventMarkStyle = (mark) => {\n  const waveHeight = 10 * Math.sin(mark.timestamp * Math.PI / 180)\n  return {\n    left: `${mark.position}px`,\n    top: `${waveHeight}px`,\n    opacity: 0.7 + 0.3 * (mark.level / 3) // 根据事件级别调整透明度\n  }\n}\n\n// 当前播放位置\nconst currentPosition = computed(() => {\n  if (!duration.value) return 0\n  return (currentTime.value / duration.value) * timelineTotalWidth.value\n})\n\n// 跳转到指定时间\nconst seekTo = (time) => {\n  if (videoContext.value) {\n    videoContext.value.seek(time)\n    currentTime.value = time\n  }\n}\n\n// 日期切换\nconst changeDate = (offset) => {\n  const newDate = new Date(currentDate.value)\n  newDate.setDate(newDate.getDate() + offset)\n  currentDate.value = newDate\n  loadVideoData()\n}\n\n// 初始化\nonMounted(() => {\n  initVideoSystem()\n  loadVideoData()\n})\n</script>\n\n<style>\n.video-monitor {\n  display: flex;\n  flex-direction: column;\n  height: 100vh;\n  background: #f0f2f5;\n}\n\n.date-nav {\n  display: flex;\n  justify-content: space-between;\n  padding: 12px;\n  background: #2c3e50;\n}\n\n.date-nav button {\n  color: white;\n  background: transparent;\n  border: none;\n  font-size: 16px;\n}\n\n.date-text {\n  color: white;\n  font-weight: bold;\n}\n\n.video-container {\n  width: 100%;\n  height: 240px;\n  background: black;\n}\n\nvideo {\n  width: 100%;\n  height: 100%;\n}\n\n.video-error {\n  width: 100%;\n  height: 240px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background: #ffecec;\n  color: #ff4757;\n}\n\n.timeline-scroll {\n  width: 100%;\n  height: 80px;\n  background: white;\n  border-top: 1px solid #e8e8e8;\n}\n\n.timeline {\n  position: relative;\n  height: 100%;\n}\n\n.baseline {\n  position: absolute;\n  bottom: 30px;\n  left: 0;\n  right: 0;\n  height: 1px;\n  background: #e8e8e8;\n}\n\n.time-mark {\n  position: absolute;\n  bottom: 30px;\n  width: 1px;\n  height: 15px;\n  background: #999;\n  transform: translateX(-50%);\n}\n\n.mark-label {\n  position: absolute;\n  top: -25px;\n  left: 50%;\n  transform: translateX(-50%);\n  font-size: 10px;\n  white-space: nowrap;\n}\n\n.event-mark {\n  position: absolute;\n  width: 30px;\n  transform: translateX(-50%);\n  transition: all 0.3s ease;\n}\n\n.wave-line {\n  position: absolute;\n  bottom: 0;\n  left: 50%;\n  width: 1px;\n  background: #ff4757;\n  transform: translateX(-50%);\n}\n\n.event-badge {\n  position: absolute;\n  bottom: 0;\n  left: 50%;\n  width: 8px;\n  height: 8px;\n  border-radius: 50%;\n  background: #ff4757;\n  transform: translateX(-50%) translateY(50%);\n}\n\n.progress-indicator {\n  position: absolute;\n  bottom: 0;\n  top: 0;\n  width: 2px;\n  background: #1890ff;\n  transform: translateX(-50%);\n  z-index: 10;\n}\n\n/* 平台特定样式 */\n\n\n\n\n\n\n\n\n\n\n\n</style>\n<!-- <template>\n  <view class=\"video-container\">\n    <video \n      id=\"myVideo\"\n      class=\"video-player\"\n      :src=\"videoSrc\"\n      :controls=\"false\"\n      @timeupdate=\"onTimeUpdate\"\n      @play=\"onPlay\"\n      @pause=\"onPause\"\n      @ended=\"onEnded\"\n      @loadedmetadata=\"onLoadedMetadata\"\n    ></video>\n    \n    <view class=\"video-controls\">\n      <button @tap=\"togglePlay\">{{ isPlaying ? '暂停' : '播放' }}</button>\n      <view class=\"time-display\">{{ formatTime(currentTime) }} / {{ formatTime(duration) }}</view>\n      <button @tap=\"addPlaybackMarker\">添加标记</button>\n    </view>\n    \n    <view \n      class=\"waveform-container\"\n      @touchstart=\"onTouchStart\"\n      @touchmove=\"onTouchMove\"\n      @touchend=\"onTouchEnd\"\n      @click=\"onWaveformClick\"\n    >\n      <view class=\"waveform-background\">\n        <view \n          v-for=\"(wave, index) in waveformData\" \n          :key=\"'bg-'+index\"\n          class=\"wave-bar bg-wave\"\n          :style=\"{\n            height: `${wave.height}px`,\n            left: `${wave.position}%`\n          }\"\n        ></view>\n      </view>\n      \n      <view class=\"waveform-foreground\" :style=\"{ width: `${playbackProgress}%` }\">\n        <view \n          v-for=\"(wave, index) in waveformData\" \n          :key=\"'fg-'+index\"\n          class=\"wave-bar fg-wave\"\n          :style=\"{\n            height: `${wave.height}px`,\n            left: `${wave.position}%`\n          }\"\n        ></view>\n      </view>\n      \n      <view \n        class=\"playhead\"\n        :style=\"{ left: `${playbackProgress}%` }\"\n      ></view>\n      \n      <view \n        v-for=\"(marker, index) in playbackMarkers\"\n        :key=\"'marker-'+index\"\n        class=\"playback-marker\"\n        :style=\"{ left: `${(marker.time / duration) * 100}%` }\"\n        @tap.stop=\"jumpToMarker(marker.time)\"\n      >\n        <view class=\"marker-tooltip\">{{ formatTime(marker.time) }}</view>\n      </view>\n    </view>\n    \n    <view class=\"playback-controls\">\n      <button @tap=\"startPlayback\" :disabled=\"playbackMarkers.length === 0\">开始回放</button>\n      <button @tap=\"stopPlayback\">停止回放</button>\n      <button @tap=\"clearMarkers\">清除标记</button>\n    </view>\n  </view>\n</template>\n\n<script setup lang=\"uts\">\nimport { ref, onMounted } from 'vue'\nimport { onReady } from '@dcloudio/uni-app'\n\ninterface WaveformPoint {\n  height: number\n  position: number\n  time: number\n}\n\ninterface PlaybackMarker {\n  time: number\n}\n\nconst videoSrc = ref(\"https://qiniu-web-assets.dcloud.net.cn/video/sample/2minute-demo.mp4\")\n\nconst isPlaying = ref(false)\nconst currentTime = ref(0)\nconst duration = ref(0)\nconst playbackProgress = ref(0)\n\nconst isDragging = ref(false)\nconst wasPlayingBeforeDrag = ref(false)\n\nconst waveformData = ref<Array<WaveformPoint>>(new Array<WaveformPoint>())\n\nconst playbackMarkers = ref<Array<PlaybackMarker>>(new Array<PlaybackMarker>())\n\nlet videoContext = uni.createVideoContext('myVideo')\nlet waveformContainer = uni.createSelectorQuery().in(this).select('.waveform-container')\n\nconst generateWaveform = () => {\n  const waves = new Array<WaveformPoint>()\n  const pointCount = 150 \n  \n  const totalDuration = duration.value > 0 ? duration.value : 120\n  \n  for (let i = 0; i <= pointCount; i++) {\n    const position = (i / pointCount) * 100\n    const time = (i / pointCount) * totalDuration\n    \n    const baseHeight = 8 + Math.sin(i / 8) * 8\n    const randomFactor = 1 + Math.random() * 0.5\n    const height = baseHeight * randomFactor\n    \n    waves.push({\n      height: height,\n      position: position,\n      time: time\n    } as WaveformPoint)\n  }\n  \n  waveformData.value = waves\n}\n\nconst onLoadedMetadata = (e: UniVideoTimeUpdateEvent) => {\n  duration.value = e.detail.duration\n\tgenerateWaveform()\n  \n}\n\nconst formatTime = (time: number): string => {\n  const minutes = Math.floor(time / 60)\n  const seconds = Math.floor(time % 60)\n  return `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`\n}\n\nconst onTimeUpdate = (e: UniVideoTimeUpdateEvent) => {\n  if (!isDragging.value) {\n    currentTime.value = e.detail.currentTime\n    duration.value = e.detail.duration\n    playbackProgress.value = (currentTime.value / duration.value) * 100\n  }\n}\n\nconst updateCurrentTime = (e: UniTouchEvent) => {\n  if (e.touches.length === 0) return\n  \n  waveformContainer?.boundingClientRect((rect: UniApp.BoundingClientRect) => {\n    if (!rect?.width) return\n    \n    const touchX = Math.max(0, Math.min(e.touches[0]?.clientX - rect.left, rect.width))\n    const percent = touchX / rect.width\n    currentTime.value = percent * duration.value\n    playbackProgress.value = percent * 100\n  }).exec()\n}\n\nconst onTouchStart = (e: UniTouchEvent) => {\n  isDragging.value = true\n  wasPlayingBeforeDrag.value = isPlaying.value\n  if (isPlaying.value) {\n    videoContext?.pause()\n  }\n  updateCurrentTime(e)\n}\n\nconst onTouchMove = (e: UniTouchEvent) => {\n  if (!isDragging.value) return\n  e.stopPropagation()\n  e.preventDefault()\n  updateCurrentTime(e)\n}\n\nconst onTouchEnd = (e: UniTouchEvent) => {\n  if (!isDragging.value) return\n  e.stopPropagation()\n  e.preventDefault()\n  \n  updateCurrentTime(e)\n  videoContext?.seek(currentTime.value)\n  \n  setTimeout(() => {\n    if (wasPlayingBeforeDrag.value) {\n      videoContext?.play()\n    }\n    isDragging.value = false\n  }, 50)\n}\n\nconst onWaveformClick = (e: UniTouchEvent) => {\n  updateCurrentTime(e)\n  videoContext?.seek(currentTime.value)\n}\n\nconst togglePlay = () => {\n  if (isPlaying.value) {\n    videoContext?.pause()\n  } else {\n    videoContext?.play()\n  }\n}\n\nconst onPlay = () => {\n  isPlaying.value = true\n}\n\nconst onPause = () => {\n  isPlaying.value = false\n}\n\nconst onEnded = () => {\n  isPlaying.value = false\n  currentTime.value = 0\n  playbackProgress.value = 0\n}\n\nconst addPlaybackMarker = () => {\n  if (duration.value <= 0) return\n  \n  const existingMarker = playbackMarkers.value.find(\n    marker => Math.abs(marker.time - currentTime.value) < 0.5\n  )\n  \n  if (!existingMarker) {\n    playbackMarkers.value.push({\n      time: currentTime.value\n    } as PlaybackMarker)\n  }\n}\n\nconst jumpToMarker = (time: number) => {\n  videoContext?.seek(time)\n  currentTime.value = time\n  playbackProgress.value = (time / duration.value) * 100\n}\n\nconst startPlayback = () => {\n  if (playbackMarkers.value.length === 0) return\n  \n  playbackMarkers.value.sort((a, b) => a.time - b.time)\n  \n  let nextMarkerIndex = playbackMarkers.value.findIndex(marker => marker.time > currentTime.value)\n  if (nextMarkerIndex === -1) nextMarkerIndex = 0\n  \n  const playToMarker = (index: number) => {\n    if (index >= playbackMarkers.value.length) {\n      videoContext?.pause()\n      return\n    }\n    \n    const marker = playbackMarkers.value[index]\n    videoContext?.seek(marker.time)\n    videoContext?.play()\n    \n    setTimeout(() => {\n      videoContext?.pause()\n      currentTime.value = marker.time\n      playbackProgress.value = (marker.time / duration.value) * 100\n      \n      playToMarker(index + 1)\n    }, (marker.time - currentTime.value) * 1000)\n  }\n  \n  playToMarker(nextMarkerIndex)\n}\n\nconst stopPlayback = () => {\n  videoContext?.pause()\n}\n\nconst clearMarkers = () => {\n  playbackMarkers.value = new Array<PlaybackMarker>()\n}\nonMounted(() => {\n  onReady(() => {\n    videoContext = uni.createVideoContext('myVideo')\n    waveformContainer = uni.createSelectorQuery().in(this).select('.waveform-container')\n    generateWaveform()\n  })\n})\n</script>\n\n<style>\n.video-container {\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  padding: 10px;\n  box-sizing: border-box;\n}\n\n.video-player {\n  width: 100%;\n  height: 300rpx;\n  background-color: #000;\n  border-radius: 8px;\n}\n\n.video-controls {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 10px 0;\n  margin-top: 8px;\n}\n\n.video-controls button {\n  padding: 6px 12px;\n  font-size: 14px;\n  border-radius: 4px;\n  background-color: #f0f0f0;\n  border: 1px solid #ddd;\n}\n\n.time-display {\n  font-size: 14px;\n  color: #333;\n  font-family: monospace;\n}\n\n.waveform-container {\n  position: relative;\n  height: 80px;\n  margin-top: 15px;\n  touch-action: none;\n  background-color: #f8f8f8;\n  border-radius: 8px;\n  overflow: hidden;\n}\n.waveform-background {\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n}\n\n.waveform-foreground {\n  position: absolute;\n  top: 0;\n  left: 0;\n  bottom: 0;\n  overflow: hidden;\n}\n\n.wave-bar {\n  position: absolute;\n  bottom: 0;\n  width: 2px;\n  min-height: 1px;\n  border-radius: 1px;\n  transform: translateX(-50%);\n}\n\n.bg-wave {\n  background-color: #d1d1d1;\n}\n\n.fg-wave {\n  background-color: #FF5500;\n}\n\n.playhead {\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  width: 2px;\n  background-color: #FF0000;\n  transform: translateX(-50%);\n  z-index: 20;\n  pointer-events: none;\n}\n\n.playback-marker {\n  position: absolute;\n  top: 0;\n  width: 10px;\n  height: 10px;\n  border-radius: 50%;\n  background-color: #FF5500;\n  transform: translateX(-50%) translateY(-50%);\n  z-index: 15;\n  border: 2px solid white;\n}\n\n.marker-tooltip {\n  position: absolute;\n  bottom: 100%;\n  left: 50%;\n  transform: translateX(-50%);\n  background-color: rgba(0, 0, 0, 0.7);\n  color: white;\n  padding: 4px 8px;\n  border-radius: 4px;\n  font-size: 12px;\n  white-space: nowrap;\n  opacity: 0;\n  transition: opacity 0.2s;\n  pointer-events: none;\n}\n\n.playback-marker:hover .marker-tooltip {\n  opacity: 1;\n}\n\n.playback-controls {\n  display: flex;\n  justify-content: space-around;\n  margin-top: 15px;\n}\n\n.playback-controls button {\n  padding: 8px 16px;\n  border-radius: 6px;\n  font-size: 14px;\n  background-color: #FF5500;\n  color: white;\n  border: none;\n}\n\n.playback-controls button:disabled {\n  background-color: #ccc;\n  opacity: 0.7;\n}\n</style> -->"]}