{"version":3,"sources":["uni_modules/lime-clipboard/utssdk/app-ios/index.uts","uni_modules/lime-clipboard/utssdk/interface.uts","uni_modules/lime-clipboard/utssdk/unierror.uts"],"sourcesContent":["import { UIPasteboard } from \"UIKit\"\r\nimport { SetClipboardDataOption, GetClipboardDataOption, GetClipboardDataSuccessCallbackOption } from '../interface.uts';\r\nimport { GeneralCallbackResultImpl } from '../unierror.uts';\r\n\r\nexport function setClipboardData(options : SetClipboardDataOption){\r\n\tlet pasteboard = UIPasteboard.general\r\n\tpasteboard.string = options.data\r\n\tconst res = new GeneralCallbackResultImpl(9010001)\r\n\tif(options.showToast != false){\r\n\t\tuni.showToast({\r\n\t\t\ticon: 'success',\r\n\t\t\ttitle: '内容已复制'\r\n\t\t})\r\n\t}\r\n\toptions.success?.(res)\r\n\toptions.complete?.(res)\r\n}\r\n\r\n\r\nexport function getClipboardData(options : GetClipboardDataOption){\r\n\tlet pasteboard = UIPasteboard.general;\r\n\tconst res = new GeneralCallbackResultImpl(9010002, 'get')\r\n\tif(pasteboard.string == null){\r\n\t\toptions.fail?.(res)\r\n\t\toptions.complete?.(res)\r\n\t} else {\r\n\t\toptions.success?.({\r\n\t\t\terrMsg: 'getClipboardData:ok',\r\n\t\t\tdata: `${pasteboard.string!}`\r\n\t\t} as GetClipboardDataSuccessCallbackOption)\r\n\t\toptions.complete?.(res)\r\n\t}\r\n}","\r\n/**\r\n * 错误码\r\n * 根据uni错误码规范要求，建议错误码以90开头，以下是错误码示例：\r\n * - 9010001 错误信息1\r\n * - 9010002 错误信息2\r\n */\r\nexport type LimeClipboardErrorCode = 9010001 | 9010002;\r\n/**\r\n * myApi 的错误回调参数\r\n */\r\nexport interface GeneralCallbackResult extends IUniError {\r\n\terrCode : LimeClipboardErrorCode\r\n};\r\n\r\n\r\n\r\n\r\n// export interface GeneralCallbackResult {\r\n// \t/** 错误信息 */\r\n// \terrMsg : string\r\n// }\r\n\r\n/** 接口调用结束的回调函数（调用成功、失败都会执行） */\r\nexport type SetClipboardDataCompleteCallback = (res : UniError) => void\r\n/** 接口调用失败的回调函数 */\r\nexport type SetClipboardDataFailCallback = (res : UniError) => void\r\n/** 接口调用成功的回调函数 */\r\nexport type SetClipboardDataSuccessCallback = (res : UniError) => void\r\n\r\n\r\nexport type SetClipboardDataOption = {\r\n\tshowToast?: boolean\r\n\t/** 剪贴板的内容 */\r\n\tdata : string\r\n\t/** 接口调用结束的回调函数（调用成功、失败都会执行） */\r\n\tcomplete ?: SetClipboardDataCompleteCallback\r\n\t/** 接口调用失败的回调函数 */\r\n\tfail ?: SetClipboardDataFailCallback\r\n\t/** 接口调用成功的回调函数 */\r\n\tsuccess ?: SetClipboardDataSuccessCallback\r\n}\r\n\r\n\r\nexport type GetClipboardDataSuccessCallbackOption = {\r\n\t/** 剪贴板的内容 */\r\n\tdata : string\r\n\terrMsg : string\r\n}\r\n/** 接口调用结束的回调函数（调用成功、失败都会执行） */\r\nexport type GetClipboardDataCompleteCallback = (res : UniError) => void\r\n/** 接口调用失败的回调函数 */\r\nexport type GetClipboardDataFailCallback = (res : UniError) => void\r\n/** 接口调用成功的回调函数 */\r\nexport type GetClipboardDataSuccessCallback = (\r\n\toption : GetClipboardDataSuccessCallbackOption\r\n) => void\r\n\r\nexport type GetClipboardDataOption = {\r\n\t/** 接口调用结束的回调函数（调用成功、失败都会执行） */\r\n\tcomplete ?: GetClipboardDataCompleteCallback\r\n\t/** 接口调用失败的回调函数 */\r\n\tfail ?: GetClipboardDataFailCallback\r\n\t/** 接口调用成功的回调函数 */\r\n\tsuccess ?: GetClipboardDataSuccessCallback\r\n}","/* 此规范为 uni 规范，可以按照自己的需要选择是否实现 */\r\nimport { LimeClipboardErrorCode, GeneralCallbackResult } from \"./interface.uts\"\r\n/**\r\n * 错误主题\r\n * 注意：错误主题一般为插件名称，每个组件不同，需要使用时请更改。\r\n * [可选实现]\r\n */\r\nexport const UniErrorSubject = 'ClipboardData';\r\n\r\n\r\n/**\r\n * 错误信息\r\n * @UniError\r\n * [可选实现]\r\n */\r\nexport const UniErrors : Map<LimeClipboardErrorCode, string> = new Map([\r\n  /**\r\n   * 错误码及对应的错误信息\r\n   */\r\n  [9010001, 'ClipboardData:ok'],\r\n  [9010002, 'ClipboardData:failed'],\r\n]);\r\n\r\n\r\n/**\r\n * 错误对象实现\r\n */\r\nexport class GeneralCallbackResultImpl extends UniError implements GeneralCallbackResult {\r\n\r\n  /**\r\n   * 错误对象构造函数\r\n   */\r\n  constructor(errCode : LimeClipboardErrorCode, type: string = 'set') {\r\n    super();\r\n    this.errSubject =  type + UniErrorSubject;\r\n    this.errCode = errCode;\r\n    this.errMsg = type + (UniErrors[errCode] ?? \"\");\r\n  }\r\n}"],"names":[],"mappings":";;AAAA,YAAoC;;iBCOxB,yBAAyB,QAAO;gBAI3B,wBAA8B;QAC9C,SAAU;;iBAYC,sCAAoC,KAAM,aAAa,IAAI;iBAE3D,kCAAgC,KAAM,aAAa,IAAI;iBAEvD,qCAAmC,KAAM,aAAa,IAAI;AAGjC;;aAAzB;;;;IACX,sBAAY,IAAO,QAAA;IAEnB,iBAAO,MAAM,CAAA;IAEb,qBAAY,iCAAgC;IAE5C,iBAAQ,6BAA4B;IAEpC,oBAAW,gCAA+B;;;;;;;;;;;;;;;;;;;;;;;;;;+CAR9B,IAAO;oCAEZ,MAAM;4CAED;oCAEJ;0CAEG;;;AAIwC;;aAAxC;;;;IAEX,iBAAO,MAAM,CAAA;IACb,mBAAS,MAAM,CAAA;;;;;;;;;;;;;;;;;;;;oCADR,MAAM;wCACJ,MAAM;;;iBAGJ,sCAAoC,KAAM,aAAa,IAAI;iBAE3D,kCAAgC,KAAM,aAAa,IAAI;iBAEvD,qCACX,QAAS,0CACL,IAAI;AAE4B;;aAAzB;;;;IAEX,qBAAY,iCAAgC;IAE5C,iBAAQ,6BAA4B;IAEpC,oBAAW,gCAA+B;;;;;;;;;;;;;;;;;;;;;;4CAJ9B;oCAEJ;0CAEG;;;ACzDL,WAAM,kBAAkB;AAQxB,WAAM,WAAY,4BAA4B,MAAM,IAAI,AAAI,IAAI;IAIrE;AAAC,eAAO;QAAE;KAAmB;IAC7B;AAAC,eAAO;QAAE;KAAuB;CAClC;AAMK;;aAAO,4BAAkC;IAK7C,YAAY,EAAA,+BAAgC,EAAE,EAAA,MAAM,MAAM,GAAG,KAAK,CAAA;QAChE,KAAK;QACL,IAAI,CAAC,UAAU,GAAI,OAAO;QAC1B,IAAI,CAAC,OAAO,GAAG;QACf,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,SAAS,CAAC,QAAQ,IAAI,EAAE;IAChD;;AFjCI,YAAU,iBAAiB,EAAA,+BAAgC,EAAA;IAChE,IAAI,aAAa,aAAa,OAAO;IACrC,WAAW,MAAM,GAAG,QAAQ,IAAI;IAChC,IAAM,MAAM,0BAA8B,OAAO;IACjD,IAAG,QAAQ,SAAS,IAAI,KAAK,EAAC;QAC7B,gBAAI,SAAS;YACZ,CAAA,OAAM;YACN,CAAA,QAAO;;;IAGT,QAAQ,OAAO,EAAG;IAClB,QAAQ,QAAQ,EAAG;AACpB;AAGM,YAAU,iBAAiB,EAAA,+BAAgC,EAAA;IAChE,IAAI,aAAa,aAAa,OAAO;IACrC,IAAM,MAAM,0BAA8B,OAAO,EAAE;IACnD,IAAG,WAAW,MAAM,IAAI,GAAI,EAAC;QAC5B,QAAQ,IAAI,EAAG;QACf,QAAQ,QAAQ,EAAG;WACb;QACN,QAAQ,OAAO;YACd,CAAA,SAAQ;YACR,CAAA,OAAM;AAAA,EAAG,WAAW,MAAM,EAAC;GAAE;;QAE9B,QAAQ,QAAQ,EAAG;;AAErB;ACDqC;;;IACpC,WAAA,WAAY,IAAO,QAAA;IAEnB,WAAA,MAAO,MAAM,CAAA;IAEb,WAAA,UAAU,YAAkC;IAE5C,WAAA,MAAM,YAA8B;IAEpC,WAAA,SAAS,YAAiC;;AAkBN;;;IAEpC,WAAA,UAAU,YAAkC;IAE5C,WAAA,MAAM,YAA8B;IAEpC,WAAA,SAAS,YAAiC;;iCD5DV,EAAA,yCAAgC;;;;;SCoBjB,KAAM,aAAa,IAAI;0BAAvB;;;SAEJ,KAAM,aAAa,IAAI;sBAAvB;;;SAEG,KAAM,aAAa,IAAI;yBAAvB;;;;iCDTd,EAAA,yCAAgC;;;SC+BjB,KAAM,aAAa,IAAI;0BAAvB;;;SAEJ,KAAM,aAAa,IAAI;sBAAvB;;;SAG3C,QAAS,0CACL,IAAI;yBADR;;;;;;;8CDnDgC,EAAA,yCAAgC;oCAAhC;;8CAeA,EAAA,yCAAgC;oCAAhC"}