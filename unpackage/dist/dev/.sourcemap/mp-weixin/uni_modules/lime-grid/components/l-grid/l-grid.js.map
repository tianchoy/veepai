{"version":3,"file":"l-grid.js","sources":["uni_modules/lime-grid/components/l-grid/l-grid.uvue","/Users/xyhc/Documents/veepai_uniappx/uni_modules/lime-grid/components/l-grid/l-grid.uvue?type=component"],"sourcesContent":["<template>\n\t<view class=\"l-grid\" ref=\"resizeRef\" :class=\"clsses\">\n\t\t<slot></slot>\n\t</view>\n</template>\n<script lang=\"uts\" setup>\n\t/**\n\t * Grid 栅格布局组件\n\t * @description 用于实现瀑布流、等分等网格布局场景\n\t * <br> 插件类型：LGridComponentPublicInstance \n\t * @tutorial https://ext.dcloud.net.cn/plugin?name=lime-grid\n\t * \n\t * @property {'left'|'center'} align 内容对齐方式\n\t * @value left 左对齐\n\t * @value center 居中对齐\n\t * @property {boolean} border 是否显示边框\n\t * @property {number} column 列数（0表示使用固定尺寸布局）\n\t * @property {number} gutter 网格间隔（单位px/rpx）\n\t * @property {boolean} hover 是否启用点击反馈效果\n\t * @property {boolean} inset 卡片式圆角风格\n\t * @property {string} [gridWidth] 固定尺寸布局时的网格宽度（支持CSS单位）\n\t * @property {string} [padding] 内边距（支持CSS简写格式）\n\t * @property {string} [bgColor] 背景颜色（卡片式布局生效）\n\t * @property {boolean} wrap 超出是否换行\n\t */\n\timport { GridProps , GridProvide} from './type';\n\t\n\tconst props = withDefaults(defineProps<GridProps>(), {\n\t\talign: 'center',\n\t\tborder: false,\n\t\tcolumn: 4,\n\t\tgutter: 0,\n\t\thover: false,\n\t\tinset: false,\n\t\twrap: true,\n\t\t// gridWidth: null\n\t})\n\t\n\tconst clsses = computed(():Map<string, any>=>{\n\t\tconst cls = new Map<string, any>();\n\t\t\n\t\tcls.set(`l-grid--wrap`, props.wrap)\n\t\tcls.set(`l-grid--inset`, props.inset)\n\t\tcls.set(`l-grid--bordered`, props.border && props.gutter == 0)\n\t\t\n\t\treturn cls\n\t})\n\tconst resizeRef = ref<UniElement|null>(null)\n\tconst width = ref<number>(0)\n\tconst children = ref<number[]>([])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\tprovide('limeGrid', {\n\t\tchildren,\n\t\tprops,\n\t\twidth\n\t} as GridProvide)\n</script>\n<style lang=\"scss\">\n\t@import './index';\n</style>\n","import Component from '/Users/xyhc/Documents/veepai_uniappx/uni_modules/lime-grid/components/l-grid/l-grid.uvue'\nwx.createComponent(Component)"],"names":["computed","ref","provide","Component"],"mappings":";;;;;;;;;;;;;;;;;AA2BC,UAAM,QAAQ;AAWd,UAAM,SAASA,cAAAA,SAAS,MAAA;AACvB,YAAM,MAAM,oBAAI;AAEhB,UAAI,IAAI,gBAAgB,MAAM,IAAI;AAClC,UAAI,IAAI,iBAAiB,MAAM,KAAK;AACpC,UAAI,IAAI,oBAAoB,MAAM,UAAU,MAAM,UAAU,CAAC;AAE7D,aAAO;AAAA,IACR,CAAC;AACD,UAAM,YAAYC,kBAAqB,IAAI;AAC3C,UAAM,QAAQA,kBAAY,CAAC;AAC3B,UAAM,WAAWA,kBAAc,CAAA,CAAE;AAuBjCC,kBAAAA,QAAQ,YAAY;AAAA,MACnB;AAAA,MACA;AAAA,MACA;AAAA,IACe,CAAA;;;;;;;;;;;;AC3EjB,GAAG,gBAAgBC,SAAS;"}