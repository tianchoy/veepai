{"version":3,"file":"index.js","sources":["uni_modules/lime-dayuts/common/index.ts"],"sourcesContent":["// @ts-nocheck\r\nimport { DayutsConfig, type DayutsLocale, DayutsUnit, DayutsObject } from '../utssdk/interface'\r\nimport { REGEX_FORMAT, REGEX_PARSE, INVALID_DATE_STRING, M, Y, W, D, DATE, H, MIN, S, MS, Q, MILLISECONDS_A_MINUTE, MILLISECONDS_A_HOUR, MILLISECONDS_A_SECOND, MILLISECONDS_A_WEEK, MILLISECONDS_A_DAY, FORMAT_DEFAULT } from './constant'\r\nimport { isNumber, prettyUnit, padStart, padZoneStr, monthDiff, absFloor } from './utils'\r\nimport { dayutsIntl, localeState } from './use'\r\n\r\ntype Threshold = {\r\n\tl : string;\r\n\tr ?: number;\r\n\td ?: DayutsUnit;\r\n}\r\n\r\nfunction parseLocale(preset : string | null) : string | null;\r\nfunction parseLocale(preset : DayutsLocale | null) : string | null;\r\nfunction parseLocale(preset : string, object : DayutsLocale | null, isLocal : boolean) : string | null;\r\nfunction parseLocale(preset : DayutsLocale, object : DayutsLocale, isLocal : boolean) : string | null;\r\nfunction parseLocale(preset : any | null, object : DayutsLocale | null = null, isLocal : boolean = false) : string | null {\r\n\tlet l : string | null = null\r\n\tif (preset == null) return dayutsIntl.locale\r\n\tif (typeof preset == 'string') {\r\n\t\tconst presetLower = (preset as string).toLowerCase()\r\n\t\tif (dayutsIntl.has(presetLower)) {\r\n\t\t\tl = presetLower\r\n\t\t}\r\n\t\tif (object != null) {\r\n\t\t\tdayutsIntl.set(presetLower, object)\r\n\t\t\tl = presetLower\r\n\t\t}\r\n\t\tconst presetSplit = preset.split('-')\r\n\t\tif (l == null && presetSplit.length > 1) {\r\n\t\t\treturn parseLocale(presetSplit[0])\r\n\t\t}\r\n\t} else if (preset instanceof DayutsLocale) {\r\n\t\t// const { name } = preset as DayutsLocale\r\n\t\tdayutsIntl.set(preset.name, preset)\r\n\t\tl = preset.name\r\n\t}\r\n\tif (!isLocal && l != null) {\r\n\t\t// L = l\r\n\t\tdayutsIntl.locale = l\r\n\t}\r\n\t// return l ?? L //(!isLocal && L != null)\r\n\treturn l ?? dayutsIntl.locale //(!isLocal && L != null)\r\n}\r\n\r\nfunction tryParseNumberAtIndex(digits : (any|null)[], index : number) : number | null {\r\n\t// 检查索引是否在数组范围内\r\n\tif (index >= 0 && index < digits.length) {\r\n\t\tif(digits[index] == null) return null\r\n\t\t// 尝试解析索引位置的字符串为数字\r\n\t\tconst parsedNumber = isNumber(digits[index]) ? digits[index] as number : parseInt(`${digits[index]}`, 10);\r\n\r\n\t\t// 检查解析结果是否为有效数字\r\n\t\tif (!isNaN(parsedNumber)) {\r\n\t\t\treturn parsedNumber;\r\n\t\t}\r\n\t}\r\n\treturn null\r\n}\r\n// function createDateFromArray(d: number[]):Date\r\n// function createDateFromArray(d: string[]):Date\r\nfunction createDateFromArray(d : (any|null)[], offset : number = 0) : Date {\r\n\tconst year = tryParseNumberAtIndex(d, 1 - offset) ?? new Date().getFullYear()\r\n\tconst month = (tryParseNumberAtIndex(d, 2 - offset) ?? 1) - 1\r\n\tconst day = tryParseNumberAtIndex(d, 3 - offset) ?? 1\r\n\tconst hour = tryParseNumberAtIndex(d, 4 - offset) ?? 0\r\n\tconst minute = tryParseNumberAtIndex(d, 5 - offset) ?? 0\r\n\tconst second = tryParseNumberAtIndex(d, 6 - offset) ?? 0\r\n\tconst millisecond = (tryParseNumberAtIndex(d, 7 - offset) ?? 0).toString().substring(0, 3) //d.length > 7 ? parseInt((d[7] ?? '0').substring(0, 3)) : 0\r\n\r\n\treturn new Date(\r\n\t\tyear,\r\n\t\tmonth,\r\n\t\tday,\r\n\t\thour,\r\n\t\tminute,\r\n\t\tsecond,\r\n\t\tparseInt(millisecond))\r\n}\r\nfunction parseDate(cfg : DayutsConfig) : Date|null {\r\n\tconst { date } = cfg\r\n\tif (date == null) return new Date()\r\n\tif (date instanceof Date) return date as Date\r\n\t\r\n\ttry {\r\n\t\tif (typeof date == 'string' && /^\\d+$/.test(date as string)) {\r\n\t\t\treturn new Date(parseInt(`${date}`.padEnd(13, '0')))\r\n\t\t}\r\n\t\tif (typeof date == 'string' && !/Z$/i.test(date as string)) {\r\n\t\t\tconst d = date.match(REGEX_PARSE)\r\n\t\t\t// #ifndef APP-ANDROID || APP-IOS\r\n\t\t\tconst isNull = d == null\r\n\t\t\t// #endif\r\n\t\t\t// #ifdef APP-ANDROID || APP-IOS\r\n\t\t\tconst isNull = d == null|| Array.isArray(d) && d.length == 0\r\n\t\t\t// #endif\r\n\t\t\tif (!isNull) {\r\n\t\t\t\treturn createDateFromArray(d as (any|null)[])\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (typeof date == 'string') return new Date(date as string)\r\n\t\tif (Array.isArray(date)) {\r\n\t\t\treturn createDateFromArray(date as (any|null)[], 1)\r\n\t\t}\r\n\t\tif (isNumber(date)) return new Date(date as number)\r\n\t\treturn null//new Date()\r\n\t} catch(err) {\r\n\t\treturn null//new Date()\r\n\t}\r\n}\r\n\r\nfunction wrapper(date : any, instance : Dayuts) : Dayuts {\r\n\treturn dayuts(date, instance.$L)\r\n}\r\n\r\nexport class Dayuts {\r\n\t$L : string\r\n\tprivate valid: boolean = true; \r\n\tprivate $d : Date = new Date()\r\n\tprivate $y : number = 0\r\n\tprivate $M : number = 0\r\n\tprivate $D : number = 0\r\n\tprivate $W : number = 0\r\n\tprivate $H : number = 0\r\n\tprivate $m : number = 0\r\n\tprivate $s : number = 0\r\n\tprivate $ms : number = 0\r\n\tprivate $u : boolean = false\r\n\tconstructor(cfg : DayutsConfig) {\r\n\t\tthis.$L = parseLocale(cfg.locale) ?? dayutsIntl.locale //'en'\r\n\t\tthis.parse(cfg)\r\n\t}\r\n\tparse(cfg : DayutsConfig) {\r\n\t\tconst _d = parseDate(cfg)\r\n\t\tif(_d != null) {\r\n\t\t\tthis.$d = parseDate(cfg)!\r\n\t\t\tthis.init()\r\n\t\t} else {\r\n\t\t\tthis.valid = false\r\n\t\t}\r\n\t}\r\n\tinit() {\r\n\t\tconst { $d } = this\r\n\t\tthis.$y = $d.getFullYear()\r\n\t\tthis.$M = $d.getMonth()\r\n\t\tthis.$D = $d.getDate()\r\n\t\tthis.$W = $d.getDay()\r\n\t\tthis.$H = $d.getHours()\r\n\t\tthis.$m = $d.getMinutes()\r\n\t\tthis.$s = $d.getSeconds()\r\n\t\tthis.$ms = $d.getMilliseconds()\r\n\t}\r\n\t/**\r\n\t * 检查日期对象是否有效。\r\n\t *\r\n\t * @returns {boolean} 如果日期对象有效，则返回true；否则返回false。\r\n\t */\r\n\tisValid() : boolean {\r\n\t\treturn this.valid\r\n\t\t// return !(this.$d.toString() == INVALID_DATE_STRING)\r\n\t}\r\n\t/**\r\n\t * 检查当前日期是否与给定的日期在指定的时间单位内相同。\r\n\t *\r\n\t * @param {string|number|Date} input - 要比较的日期。\r\n\t * @param {string} units - 时间单位，例如'year'、'month'、'day'等。\r\n\t * @returns {boolean} 如果当前日期与给定的日期在指定的时间单位内相同，则返回true；否则返回false。\r\n\t */\r\n\tisSame(input : string) : boolean\r\n\tisSame(input : number) : boolean\r\n\tisSame(input : Date) : boolean\r\n\tisSame(input : Dayuts) : boolean\r\n\tisSame(input : UTSJSONObject) : boolean\r\n\r\n\tisSame(input : string, units : DayutsUnit) : boolean\r\n\tisSame(input : number, units : DayutsUnit) : boolean\r\n\tisSame(input : Date, units : DayutsUnit) : boolean\r\n\tisSame(input : Dayuts, units : DayutsUnit) : boolean\r\n\tisSame(input : UTSJSONObject, units : DayutsUnit) : boolean\r\n\tisSame(input : any, units : DayutsUnit = 'millisecond') : boolean {\r\n\t\tconst other = input instanceof Dayuts ? input : dayuts(input)\r\n\t\tconst date1 = this.startOf(units).valueOf()\r\n\t\tconst date2 = other.valueOf()\r\n\t\tconst date3 = this.endOf(units).valueOf()\r\n\t\treturn date1 <= date2 && date2 <= date3\r\n\t}\r\n\t/**\r\n\t * 检查给定的日期或时间是否在当前 dayuts 对象的指定时间单位之后。\r\n\t *\r\n\t * @param {string | number | Date | Dayuts} input - 要与当前 dayuts 对象进行比较的日期或时间。\r\n\t * @param {string} units - 要比较的时间单位（如 \"year\"、\"month\"、\"day\" 等）。\r\n\t * @returns {boolean} 如果给定的日期或时间在当前 dayuts 对象的指定时间单位之后，则返回 `true`，否则返回 `false`。\r\n\t */\r\n\tisAfter(input : string) : boolean\r\n\tisAfter(input : number) : boolean\r\n\tisAfter(input : Date) : boolean\r\n\tisAfter(input : Dayuts) : boolean\r\n\tisAfter(input : UTSJSONObject) : boolean\r\n\r\n\tisAfter(input : string, units : DayutsUnit) : boolean\r\n\tisAfter(input : number, units : DayutsUnit) : boolean\r\n\tisAfter(input : Date, units : DayutsUnit) : boolean\r\n\tisAfter(input : Dayuts, units : DayutsUnit) : boolean\r\n\tisAfter(input : UTSJSONObject, units : DayutsUnit) : boolean\r\n\tisAfter(input : any, units : DayutsUnit = 'millisecond') : boolean {\r\n\t\tconst other = input instanceof Dayuts ? input : dayuts(input)\r\n\t\tconst date1 = other.valueOf()\r\n\t\tconst date2 = this.startOf(units).valueOf()\r\n\t\treturn date1 < date2;\r\n\t}\r\n\t/**\r\n\t * 检查给定的日期或时间是否在当前 dayuts 对象的指定时间单位之前。\r\n\t *\r\n\t * @param {string | number | Date | Dayuts} input - 要与当前 dayuts 对象进行比较的日期或时间。\r\n\t * @param {string} units - 要比较的时间单位（如 \"year\"、\"month\"、\"day\" 等）。\r\n\t * @returns {boolean} 如果给定的日期或时间在当前 dayuts 对象的指定时间单位之前，则返回 `true`，否则返回 `false`。\r\n\t */\r\n\tisBefore(input : string) : boolean\r\n\tisBefore(input : number) : boolean\r\n\tisBefore(input : Date) : boolean\r\n\tisBefore(input : Dayuts) : boolean\r\n\tisBefore(input : UTSJSONObject) : boolean\r\n\r\n\tisBefore(input : string, units : DayutsUnit) : boolean\r\n\tisBefore(input : number, units : DayutsUnit) : boolean\r\n\tisBefore(input : Date, units : DayutsUnit) : boolean\r\n\tisBefore(input : Dayuts, units : DayutsUnit) : boolean\r\n\tisBefore(input : UTSJSONObject, units : DayutsUnit) : boolean\r\n\tisBefore(input : any, units : DayutsUnit = 'millisecond') : boolean {\r\n\t\tconst other = input instanceof Dayuts ? input : dayuts(input);\r\n\t\tconst date1 = other.valueOf()\r\n\t\tconst date2 = this.endOf(units).valueOf()\r\n\t\treturn date2 < date1;\r\n\t}\r\n\t/**\r\n\t * 判断当前Dayuts对象是否与给定的输入在同一时间或之前，根据指定的时间单位\r\n\t * @param {(string | number | Date | Dayuts | UTSJSONObject)} input - 输入的时间\r\n\t * @param {DayutsUnit} units - 指定的时间单位\r\n\t * @returns {boolean} - 如果当前Dayuts对象与给定的输入在同一时间或之前，则返回true，否则返回false\r\n\t */\r\n\tisSameOrBefore(input : string) : boolean\r\n\tisSameOrBefore(input : number) : boolean\r\n\tisSameOrBefore(input : Date) : boolean\r\n\tisSameOrBefore(input : Dayuts) : boolean\r\n\tisSameOrBefore(input : UTSJSONObject) : boolean\r\n\r\n\tisSameOrBefore(input : string, units : DayutsUnit) : boolean\r\n\tisSameOrBefore(input : number, units : DayutsUnit) : boolean\r\n\tisSameOrBefore(input : Date, units : DayutsUnit) : boolean\r\n\tisSameOrBefore(input : Dayuts, units : DayutsUnit) : boolean\r\n\tisSameOrBefore(input : UTSJSONObject, units : DayutsUnit) : boolean\r\n\tisSameOrBefore(input : any, units : DayutsUnit = 'millisecond') : boolean {\r\n\t\treturn this.isSame(input, units) || this.isBefore(input, units)\r\n\t}\r\n\t/**\r\n\t * 判断当前Dayuts对象是否与给定的输入在同一时间或之后，根据指定的时间单位\r\n\t * @param {(string | number | Date | Dayuts | UTSJSONObject)} input - 输入的时间\r\n\t * @param {DayutsUnit} units - 指定的时间单位\r\n\t * @returns {boolean} - 如果当前Dayuts对象与给定的输入在同一时间或之后，则返回true，否则返回false\r\n\t */\r\n\tisSameOrAfter(input : string) : boolean\r\n\tisSameOrAfter(input : number) : boolean\r\n\tisSameOrAfter(input : Date) : boolean\r\n\tisSameOrAfter(input : Dayuts) : boolean\r\n\tisSameOrAfter(input : UTSJSONObject) : boolean\r\n\r\n\tisSameOrAfter(input : string, units : DayutsUnit) : boolean\r\n\tisSameOrAfter(input : number, units : DayutsUnit) : boolean\r\n\tisSameOrAfter(input : Date, units : DayutsUnit) : boolean\r\n\tisSameOrAfter(input : Dayuts, units : DayutsUnit) : boolean\r\n\tisSameOrAfter(input : UTSJSONObject, units : DayutsUnit) : boolean\r\n\tisSameOrAfter(input : any, units : DayutsUnit = 'millisecond') : boolean {\r\n\t\treturn this.isSame(input, units) || this.isAfter(input, units)\r\n\t}\r\n\t/**\r\n\t * 判断当前Dayuts对象是否在给定的两个时间之间\r\n\t * @param {any} input - 第一个时间输入\r\n\t * @param {any} input2 - 第二个时间输入\r\n\t * @param {DayutsUnit} units - 指定的时间单位\r\n\t * @param {string} interval - 区间符号，表示区间的开闭性，默认为'()'，表示开区间\r\n\t * @returns {boolean} - 如果当前Dayuts对象在给定的两个时间之间，则返回true，否则返回false\r\n\t */\r\n\tisBetween(input : any, input2 : any, units : DayutsUnit = 'millisecond', interval : string = '()') : boolean {\r\n\t\tconst dA = dayuts(input)\r\n\t\tconst dB = dayuts(input2)\r\n\t\tconst dAi = interval.startsWith('(')\r\n\t\tconst dBi = interval.endsWith(')')\r\n\r\n\t\treturn ((dAi ? this.isAfter(dA, units) : !this.isBefore(dA, units)) &&\r\n\t\t\t(dBi ? this.isBefore(dB, units) : !this.isAfter(dB, units)))\r\n\t\t\t|| ((dAi ? this.isBefore(dA, units) : !this.isAfter(dA, units)) &&\r\n\t\t\t\t(dBi ? this.isAfter(dB, units) : !this.isBefore(dB, units)))\r\n\t}\r\n\t/**\r\n\t * 判断当前Dayuts对象所在的年份是否为闰年\r\n\t * @returns {boolean} - 如果当前Dayuts对象所在的年份是闰年，则返回true，否则返回false\r\n\t */\r\n\tisLeapYear():boolean{\r\n\t\t return ((this.$y % 4 == 0) && (this.$y % 100 != 0)) || (this.$y % 400 == 0)\r\n\t}\r\n\tisToday():boolean{\r\n\t\tconst comparisonTemplate = 'YYYY-MM-DD'\r\n\t\tconst now = dayuts()\r\n\t\t\r\n\t\treturn this.format(comparisonTemplate) == now.format(comparisonTemplate)\r\n\t}\r\n\t/**\r\n\t * 获取当前 `dayuts` 对象的 Unix 时间戳（以秒为单位）。\r\n\t *\r\n\t * @returns {number} 返回当前 `dayuts` 对象的 Unix 时间戳（以秒为单位）。\r\n\t */\r\n\tunix() : number {\r\n\t\treturn Math.floor(this.valueOf() / 1000);\r\n\t}\r\n\t/**\r\n\t * 将当前日期设置为指定时间单位的开始或结束。\r\n\t *\r\n\t * @param {string} units - 时间单位，例如'year'、'month'、'day'等。\r\n\t * @param {boolean} startOf - 如果为true，则设置为开始；如果为false，则设置为结束。\r\n\t * @returns {Dayuts} 返回一个新的Dayuts对象，表示调整后的日期。\r\n\t */\r\n\tstartOf(units : DayutsUnit, startOf : boolean = true) : Dayuts {\r\n\t\tconst isStartOf = startOf;\r\n\t\tconst unit = prettyUnit(units)\r\n\t\t// instanceFactory 函数用于创建一个新的 Dayuts 对象，表示给定日期的开始或结束。\r\n\t\t// 参数 d 和 m 分别表示日期和月份。\r\n\t\tconst instanceFactory = (d : number, m : number) : Dayuts => {\r\n\t\t\tconst ins = dayuts(new Date(this.$y, m, d))\r\n\t\t\treturn isStartOf ? ins : ins.endOf(D)\r\n\t\t}\r\n\r\n\t\t// instanceFactorySet 函数用于创建一个新的 Dayuts 对象，表示调整后的时间。\r\n\t\t// 参数 method 表示要调用的 Date 对象的方法（如 'setHours'），slice 表示要调整的时间部分的索引。\r\n\t\tconst instanceFactorySet = (method : string, slice : number) : Dayuts => {\r\n\t\t\t// 定义表示开始和结束时间的参数数组。\r\n\t\t\tconst argumentStart = [0, 0, 0, 0]\r\n\t\t\tconst argumentEnd = [23, 59, 59, 999]\r\n\t\t\t// 根据 isStartOf 的值，选择开始或结束时间的参数数组，并调用 Date 对象的方法。\r\n\t\t\tconst args = (isStartOf ? argumentStart : argumentEnd).slice(slice)\r\n\t\t\tconst date = this.toDate()\r\n\t\t\tif (method == 'setHours') {\r\n\t\t\t\tdate.setHours(args[0]);\r\n\t\t\t\tdate.setMinutes(args[1])\r\n\t\t\t\tdate.setSeconds(args[2])\r\n\t\t\t\tdate.setMilliseconds(args[3])\r\n\t\t\t} else if (method == 'setMinutes') {\r\n\t\t\t\tdate.setMinutes(args[0]);\r\n\t\t\t\tdate.setSeconds(args[1])\r\n\t\t\t\tdate.setMilliseconds(args[2])\r\n\t\t\t} else if (method == 'setSeconds') {\r\n\t\t\t\tdate.setSeconds(args[0])\r\n\t\t\t\tdate.setMilliseconds(args[1])\r\n\t\t\t} else if (method == 'setMilliseconds') {\r\n\t\t\t\tdate.setMilliseconds(args[0])\r\n\t\t\t}\r\n\t\t\treturn dayuts(date)\r\n\t\t}\r\n\t\tconst { $W, $M, $D } = this\r\n\t\tconst utcPad = `set${this.$u ? 'UTC' : ''}`\r\n\t\tif (unit == Y) {\r\n\t\t\treturn isStartOf ? instanceFactory(1, 0) : instanceFactory(31, 11);\r\n\t\t} else if (unit == M) {\r\n\t\t\treturn isStartOf ? instanceFactory(1, $M) : instanceFactory(0, $M + 1);\r\n\t\t} else if (unit == W) {\r\n\t\t\tconst weekStart = this.$locale().weekStart ?? 0;\r\n\t\t\tconst gap = ($W < weekStart ? $W + 7 : $W) - weekStart;\r\n\t\t\treturn instanceFactory(isStartOf ? $D - gap : $D + (6 - gap), $M);\r\n\t\t} else if (unit == D || unit == DATE) {\r\n\t\t\treturn instanceFactorySet(`${utcPad}Hours`, 0);\r\n\t\t} else if (unit == H) {\r\n\t\t\treturn instanceFactorySet(`${utcPad}Minutes`, 1);\r\n\t\t} else if (unit == MIN) {\r\n\t\t\treturn instanceFactorySet(`${utcPad}Seconds`, 2);\r\n\t\t} else if (unit == S) {\r\n\t\t\treturn instanceFactorySet(`${utcPad}Milliseconds`, 3);\r\n\t\t} else {\r\n\t\t\treturn this.clone();\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * 将当前日期设置为指定时间单位的结束。\r\n\t *\r\n\t * @param {string} arg - 时间单位，例如'year'、'month'、'day'等。\r\n\t * @returns {Dayuts} 返回一个新的Dayuts对象，表示调整后的日期。\r\n\t */\r\n\tendOf(units : DayutsUnit) : Dayuts {\r\n\t\treturn this.startOf(units, false)\r\n\t}\r\n\t/**\r\n\t * 设置指定的时间单位的值。\r\n\t *\r\n\t * @param {string} units - 要设置的时间单位（如 \"year\"、\"month\"、\"day\" 等）。\r\n\t * @param {number} int - 要设置的值。\r\n\t * @returns {Dayuts} 返回当前对象。\r\n\t */\r\n\tprivate $set(units : DayutsUnit, int : number) : Dayuts { // private set\r\n\t\tconst unit = prettyUnit(units)\r\n\t\t// const utcPad = `set${this.$u ? 'UTC' : ''}`\r\n\t\tconst arg = unit == D ? this.$D + (int - this.$W) : int\r\n\t\tconst setDateUnit = (date : Dayuts, unit : DayutsUnit, arg : number) => {\r\n\t\t\tif (unit == D || unit == DATE) {\r\n\t\t\t\tdate.$d.setDate(arg);\r\n\t\t\t} else if (unit == M) {\r\n\t\t\t\tdate.$d.setMonth(arg);\r\n\t\t\t} else if (unit == Y) {\r\n\t\t\t\tdate.$d.setFullYear(arg);\r\n\t\t\t} else if (unit == H) {\r\n\t\t\t\tdate.$d.setHours(arg);\r\n\t\t\t} else if (unit == MIN) {\r\n\t\t\t\tdate.$d.setMinutes(arg);\r\n\t\t\t} else if (unit == S) {\r\n\t\t\t\tdate.$d.setSeconds(arg);\r\n\t\t\t} else if (unit == MS) {\r\n\t\t\t\tdate.$d.setMilliseconds(arg);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (unit == M || unit == Y) {\r\n\t\t\t// clone is for badMutable plugin\r\n\t\t\tconst date = this.clone().set(DATE, 1)\r\n\t\t\t// date.$d[name](arg)\r\n\t\t\tsetDateUnit(date, unit, arg)\r\n\t\t\tdate.init()\r\n\t\t\tthis.$d = date.set(DATE, Math.min(this.$D, date.daysInMonth())).$d\r\n\t\t} else {\r\n\t\t\tsetDateUnit(this, unit, arg)\r\n\t\t\t// this.$d[name](arg)\r\n\t\t}\r\n\r\n\t\tthis.init()\r\n\t\treturn this\r\n\t}\r\n\t/**\r\n\t * 创建一个当前对象的副本，并设置指定的时间单位的值。\r\n\t *\r\n\t * @param {string} string - 要设置的时间单位（如 \"year\"、\"month\"、\"day\" 等）。\r\n\t * @param {number} int - 要设置的值。\r\n\t * @returns {Dayuts} 返回一个新的 `dayuts` 对象，其值为当前对象的副本，并设置了指定的时间单位的值。\r\n\t */\r\n\tset(string : DayutsUnit, int : number) : Dayuts {\r\n\t\treturn this.clone().$set(string, int);\r\n\t}\r\n\t/**\r\n\t * 获取当前 `dayuts` 对象的指定时间单位的值。\r\n\t *\r\n\t * @param {string} units - 要获取的时间单位（如 \"year\"、\"month\"、\"day\" 等）。\r\n\t * @returns {number} 返回当前 `dayuts` 对象的指定时间单位的值。\r\n\t */\r\n\tget(units : DayutsUnit) : number {\r\n\t\tconst unit = prettyUnit(units)\r\n\t\tif (unit == D) {\r\n\t\t\treturn this.day()\r\n\t\t} else if (unit == DATE) {\r\n\t\t\treturn this.date()\r\n\t\t} else if (unit == M) {\r\n\t\t\treturn this.month()\r\n\t\t} else if (unit == Y) {\r\n\t\t\treturn this.year()\r\n\t\t} else if (unit == H) {\r\n\t\t\treturn this.hour()\r\n\t\t} else if (unit == MIN) {\r\n\t\t\treturn this.minute()\r\n\t\t} else if (unit == S) {\r\n\t\t\treturn this.second()\r\n\t\t} else if (unit == MS) {\r\n\t\t\treturn this.millisecond()\r\n\t\t}\r\n\t\treturn 0\r\n\t}\r\n\t/**\r\n\t * 获取或设置年份。\r\n\t * @param {number | null} [input] - 要设置的年份。\r\n\t * @returns {number | Dayuts} 年份或 Dayuts 实例。\r\n\t */\r\n\tyear() : number\r\n\tyear(input : number) : Dayuts\r\n\tyear(input : number | null = null) : any {\r\n\t\tif (input == null) return this.$y\r\n\t\treturn this.set(Y, input)\r\n\t}\r\n\t/**\r\n\t * 获取或设置月份。\r\n\t * @param {number | null} [input] - 要设置的月份（0-11）。\r\n\t * @returns {number | Dayuts} 月份或 Dayuts 实例。\r\n\t */\r\n\tmonth() : number\r\n\tmonth(input : number) : Dayuts\r\n\tmonth(input : number | null = null) : any {\r\n\t\tif (input == null) return this.$M\r\n\t\treturn this.set(M, input)\r\n\t}\r\n\t/**\r\n\t * 获取或设置星期几。\r\n\t * @param {number | null} [input] - 要设置的星期几（0-6）。\r\n\t * @returns {number | Dayuts} 星期几或 Dayuts 实例。\r\n\t */\r\n\tday() : number\r\n\tday(input : number) : Dayuts\r\n\tday(input : number | null = null) : any {\r\n\t\tif (input == null) return this.$W\r\n\t\treturn this.set(D, input)\r\n\t}\r\n\t/**\r\n\t * 获取或设置月份中的某一天。\r\n\t * @param {number | null} [input] - 要设置的月份中的某一天（1-31）。\r\n\t * @returns {number | Dayuts} 月份中的某一天或 Dayuts 实例。\r\n\t */\r\n\tdate() : number\r\n\tdate(input : number) : Dayuts\r\n\tdate(input : number | null = null) : any {\r\n\t\tif (input == null) return this.$D\r\n\t\treturn this.set(DATE, input)\r\n\t}\r\n\t/**\r\n\t * 获取或设置小时。\r\n\t * @param {number | null} [input] - 要设置的小时（0-23）。\r\n\t * @returns {number | Dayuts} 小时或 Dayuts 实例。\r\n\t */\r\n\thour() : number\r\n\thour(input : number) : Dayuts\r\n\thour(input : number | null = null) : any {\r\n\t\tif (input == null) return this.$H\r\n\t\treturn this.set(H, input)\r\n\t}\r\n\t/**\r\n\t * 获取或设置分钟。\r\n\t * @param {number | null} [input] - 要设置的分钟（0-59）。\r\n\t * @returns {number | Dayuts} 分钟或 Dayuts 实例。\r\n\t */\r\n\tminute() : number\r\n\tminute(input : number) : Dayuts\r\n\tminute(input : number | null = null) : any {\r\n\t\tif (input == null) return this.$m\r\n\t\treturn this.set(MIN, input)\r\n\t}\r\n\t/**\r\n\t * 获取或设置秒。\r\n\t * @param {number | null} [input] - 要设置的秒（0-59）。\r\n\t * @returns {number | Dayuts} 秒或 Dayuts 实例。\r\n\t */\r\n\tsecond() : number\r\n\tsecond(input : number) : Dayuts\r\n\tsecond(input : number | null = null) : any {\r\n\t\tif (input == null) return this.$s\r\n\t\treturn this.set(S, input)\r\n\t}\r\n\t/**\r\n\t * 获取或设置毫秒。\r\n\t * @param {number | null} [input] - 要设置的毫秒（0-999）。\r\n\t * @returns {number | Dayuts} 毫秒或 Dayuts 实例。\r\n\t */\r\n\tmillisecond() : number\r\n\tmillisecond(input : number) : Dayuts\r\n\tmillisecond(input : number | null = null) : any {\r\n\t\tif (input == null) return this.$ms\r\n\t\treturn this.set(MS, input)\r\n\t}\r\n\r\n\t/**\r\n\t * 在当前 Dayuts 实例上添加指定的时间长度。\r\n\t * @param {number} number - 要添加的时间长度。\r\n\t * @param {string} units - 要添加的时间单位（例如，“years”，“months”，“days”等）。\r\n\t * @returns {Dayuts} 更新的 Dayuts 实例。\r\n\t */\r\n\tadd(number : number, units : DayutsUnit) : Dayuts {\r\n\t\tconst unit = prettyUnit(units)\r\n\t\t// 创建一个新的 Dayuts 实例，并根据给定的 n 值设置日期。\r\n\t\t// n 值乘以 number 参数，然后加到当前日期上，以设置新的日期。\r\n\t\tconst instanceFactorySet = (n : number) : Dayuts => {\r\n\t\t\t// 创建一个新的 Dayuts 实例，它是当前实例的副本\r\n\t\t\tconst d = dayuts(this)\r\n\t\t\t// 设置新的日期并返回更新后的 Dayuts 实例\r\n\t\t\treturn d.date(d.date() + Math.round(n * number)) //Utils.w(d.date(d.date() + Math.round(n * number)), this)\r\n\t\t}\r\n\t\tif (unit == M) {\r\n\t\t\treturn this.set(M, this.$M + number)\r\n\t\t}\r\n\t\tif (unit == Y) {\r\n\t\t\treturn this.set(Y, this.$y + number)\r\n\t\t}\r\n\t\tif (unit == D) {\r\n\t\t\treturn instanceFactorySet(1)\r\n\t\t}\r\n\t\tif (unit == W) {\r\n\t\t\treturn instanceFactorySet(7)\r\n\t\t}\r\n\r\n\t\tconst steps = new Map<string, number>([\r\n\t\t\t[MIN, MILLISECONDS_A_MINUTE],\r\n\t\t\t[H, MILLISECONDS_A_HOUR],\r\n\t\t\t[S, MILLISECONDS_A_SECOND],\r\n\t\t])\r\n\t\tconst step = steps.get(unit) ?? 1;\r\n\t\tconst nextTimeStamp = this.$d.getTime() + (number * step)\r\n\t\treturn wrapper(nextTimeStamp, this)\r\n\t}\r\n\t/**\r\n\t * 从当前 Dayuts 实例中减去指定的时间。\r\n\t * @param {number} number - 要减去的时间。\r\n\t * @param {string} units - 要减去的时间单位（例如，“years”，“months”，“days”等）。\r\n\t * @returns {Dayuts} 更新的 Dayuts 实例。\r\n\t */\r\n\tsubtract(number : number, units : DayutsUnit) : Dayuts {\r\n\t\t// 通过将 number 乘以 -1，然后调用 add 方法来实现减法操作\r\n\t\treturn this.add(number * -1, units);\r\n\t}\r\n\t/**\r\n\t * 日期格式化\r\n\t * @param {string} formatStr - 格式化字符串，包含各种格式化占位符（例如，“YYYY-MM-DD”，“HH:mm:ss”等）。\r\n\t * @returns {string} 格式化后的日期字符串。\r\n\t */\r\n\tformat(formatStr : string | null = null) : string {\r\n\t\tconst locale = this.$locale();\r\n\t\tif (!this.isValid()) return INVALID_DATE_STRING // locale.invalidDate || INVALID_DATE_STRING;\r\n\r\n\t\tconst str = formatStr ?? FORMAT_DEFAULT;\r\n\t\t// @ts-ignore\r\n\t\tconst zoneStr = padZoneStr(this);\r\n\t\tconst { $H, $m, $M } = this;\r\n\t\tconst { weekdays, months, meridiem } = locale;\r\n\t\t/**\r\n\t\t * 从给定的数组中获取缩写或完整的字符串。\r\n\t\t * @param {Array} arr - 包含缩写字符串的数组。\r\n\t\t * @param {number} index - 数组中要获取的元素的索引。\r\n\t\t * @param {Array} full - 包含完整字符串的数组。\r\n\t\t * @param {number} length - 要返回的字符串的长度。\r\n\t\t * @returns {string} 缩写或完整的字符串。\r\n\t\t */\r\n\t\tfunction getShort(arr : string[] | null, index : number, full : string[] = [], length : number = 0) : string {\r\n\t\t\tif (arr != null && arr.length >= index) {\r\n\t\t\t\treturn arr[index]\r\n\t\t\t} else if (full.length >= index) {\r\n\t\t\t\treturn full[index].slice(0, length)\r\n\t\t\t}\r\n\t\t\treturn ''\r\n\t\t};\r\n\t\t/**\r\n\t\t * 获取12小时制的小时数。\r\n\t\t * @param {number} num - 小时数的位数。\r\n\t\t * @returns {string} 12小时制的小时数字符串。\r\n\t\t */\r\n\t\tconst get$H = (num : number) : string => padStart(($H % 12 == 0 ? 12 : $H % 12).toString(), num, '0')\r\n\t\t/**\r\n\t\t * 获取上午或下午的字符串表示。\r\n\t\t * @param {number} hour - 小时数。\r\n\t\t * @param {number} minute - 分钟数。\r\n\t\t * @param {boolean} isLowercase - 是否返回小写字符串。\r\n\t\t * @returns {string} 上午或下午的字符串表示。\r\n\t\t */\r\n\t\tconst meridiemFunc = meridiem ?? ((hour : number, _ : number, isLowercase : boolean) : string => {\r\n\t\t\tconst m = (hour < 12 ? 'AM' : 'PM');\r\n\t\t\treturn isLowercase ? m.toLowerCase() : m;\r\n\t\t});\r\n\t\t// #ifdef APP-ANDROID\r\n\t\treturn str.replace('YYYY', padStart(this.$y.toString(), 4, '0'))\r\n\t\t\t.replace('YY', (this.$y).toString().slice(-2))\r\n\t\t\t.replace('MMMM', getShort(months, $M))\r\n\t\t\t.replace('MM', padStart(($M + 1).toString(), 2, '0'))\r\n\t\t\t.replace('M', ($M + 1).toString())\r\n\t\t\t.replace('DD', padStart(this.$D.toString(), 2, '0'))\r\n\t\t\t.replace('D', this.$D.toString())\r\n\t\t\t.replace('dddd', weekdays[this.$W])\r\n\t\t\t.replace('ddd', getShort(locale.weekdaysShort, this.$W, weekdays, 3))\r\n\t\t\t.replace('dd', getShort(locale.weekdaysMin, this.$W, weekdays, 2))\r\n\t\t\t.replace('d', this.$W.toString())\r\n\t\t\t.replace('HH', padStart($H.toString(), 2, '0'))\r\n\t\t\t.replace('H', $H.toString())\r\n\t\t\t.replace('hh', get$H(2))\r\n\t\t\t.replace('h', get$H(1))\r\n\t\t\t.replace('mm', padStart($m.toString(), 2, '0'))\r\n\t\t\t.replace('m', $m.toString())\r\n\t\t\t.replace('ss', padStart(this.$s.toString(), 2, '0'))\r\n\t\t\t.replace('s', this.$s.toString())\r\n\t\t\t.replace('SSS', padStart(this.$ms.toString(), 3, '0'))\r\n\t\t\t.replace('A', meridiemFunc($H, $m, false))\r\n\t\t\t.replace('a', meridiemFunc($H, $m, true))\r\n\t\t\t.replace('Z', zoneStr)\r\n\t\t// #endif\r\n\t\t// #ifndef APP-ANDROID\r\n\t\tconst matches = (match : string) : string | null => {\r\n\t\t\tif (match == 'YY') {\r\n\t\t\t\treturn (this.$y).toString().slice(-2);\r\n\t\t\t} else if (match == 'YYYY') {\r\n\t\t\t\treturn padStart(this.$y.toString(), 4, '0');\r\n\t\t\t} else if (match == 'M') {\r\n\t\t\t\treturn ($M + 1).toString();\r\n\t\t\t} else if (match == 'MM') {\r\n\t\t\t\treturn padStart(($M + 1).toString(), 2, '0');\r\n\t\t\t} else if (match == 'MMM') {\r\n\t\t\t\treturn getShort(locale.monthsShort, $M, months, 3);\r\n\t\t\t} else if (match == 'MMMM') {\r\n\t\t\t\treturn getShort(months, $M);\r\n\t\t\t} else if (match == 'D') {\r\n\t\t\t\treturn this.$D.toString();\r\n\t\t\t} else if (match == 'DD') {\r\n\t\t\t\treturn padStart(this.$D.toString(), 2, '0');\r\n\t\t\t} else if (match == 'd') {\r\n\t\t\t\treturn this.$W.toString();\r\n\t\t\t} else if (match == 'dd') {\r\n\t\t\t\treturn getShort(locale.weekdaysMin, this.$W, weekdays, 2);\r\n\t\t\t} else if (match == 'ddd') {\r\n\t\t\t\treturn getShort(locale.weekdaysShort, this.$W, weekdays, 3);\r\n\t\t\t} else if (match == 'dddd') {\r\n\t\t\t\treturn weekdays[this.$W];\r\n\t\t\t} else if (match == 'H') {\r\n\t\t\t\treturn $H.toString();\r\n\t\t\t} else if (match == 'HH') {\r\n\t\t\t\treturn padStart($H.toString(), 2, '0');\r\n\t\t\t} else if (match == 'h') {\r\n\t\t\t\treturn get$H(1);\r\n\t\t\t} else if (match == 'hh') {\r\n\t\t\t\treturn get$H(2);\r\n\t\t\t} else if (match == 'a') {\r\n\t\t\t\treturn meridiemFunc($H, $m, true);\r\n\t\t\t} else if (match == 'A') {\r\n\t\t\t\treturn meridiemFunc($H, $m, false);\r\n\t\t\t} else if (match == 'm') {\r\n\t\t\t\treturn $m.toString();\r\n\t\t\t} else if (match == 'mm') {\r\n\t\t\t\treturn padStart($m.toString(), 2, '0');\r\n\t\t\t} else if (match == 's') {\r\n\t\t\t\treturn this.$s.toString();\r\n\t\t\t} else if (match == 'ss') {\r\n\t\t\t\treturn padStart(this.$s.toString(), 2, '0');\r\n\t\t\t} else if (match == 'SSS') {\r\n\t\t\t\treturn padStart(this.$ms.toString(), 3, '0');\r\n\t\t\t} else if (match == 'Z') {\r\n\t\t\t\treturn zoneStr; // 'ZZ' logic below\r\n\t\t\t}\r\n\t\t\treturn null;\r\n\t\t};\r\n\t\treturn str.replace(REGEX_FORMAT, (match : string, $1 : string, offset : number, string : string) : string => {\r\n\t\t\treturn $1 ?? matches(match) ?? zoneStr.replace(':', '')\r\n\t\t})\r\n\t\t// #endif\r\n\t}\r\n\t/**\r\n\t * 获取 Dayuts 实例的 UTC 偏移量（以分钟为单位）。\r\n\t * @returns {number} UTC 偏移量（以分钟为单位）。\r\n\t */\r\n\tutcOffset() : number {\r\n\t\t// Because a bug at FF24, we're rounding the timezone offset around 15 minutes\r\n\t\t// https://github.com/moment/moment/pull/1871\r\n\t\t// #ifndef APP-ANDROID || APP-IOS\r\n\t\treturn -Math.round(this.$d.getTimezoneOffset() / 15) * 15\r\n\t\t// #endif\r\n\t\t// #ifdef APP-ANDROID || APP-IOS\r\n\t\treturn 0\r\n\t\t// #endif\r\n\t}\r\n\t/**\r\n\t * 计算两个日期之间的差值\r\n\t * @param {string|number|Date|Dayuts} input - 要比较的日期\r\n\t * @param {string} units - 要计算的时间单位，如 'years', 'months', 'weeks', 'days', 'hours', 'minutes', 'seconds'\r\n\t * @param {boolean} float - 是否返回浮点数结果\r\n\t * @returns {number} 返回两个日期之间的差值\r\n\t */\r\n\tdiff(input : string) : number\r\n\tdiff(input : number) : number\r\n\tdiff(input : Date) : number\r\n\tdiff(input : Dayuts) : number\r\n\tdiff(input : UTSJSONObject) : number\r\n\r\n\tdiff(input : string, units : DayutsUnit) : number\r\n\tdiff(input : number, units : DayutsUnit) : number\r\n\tdiff(input : Date, units : DayutsUnit) : number\r\n\tdiff(input : Dayuts, units : DayutsUnit) : number\r\n\tdiff(input : UTSJSONObject, units : DayutsUnit) : number\r\n\r\n\tdiff(input : string, units : DayutsUnit, float : boolean) : number\r\n\tdiff(input : number, units : DayutsUnit, float : boolean) : number\r\n\tdiff(input : Date, units : DayutsUnit, float : boolean) : number\r\n\tdiff(input : Dayuts, units : DayutsUnit, float : boolean) : number\r\n\tdiff(input : UTSJSONObject, units : DayutsUnit, float : boolean) : number\r\n\tdiff(input : any, units : DayutsUnit = 'millisecond', float : boolean = false) : number {\r\n\t\tconst unit = prettyUnit(units)\r\n\t\tconst that = dayuts(input)\r\n\t\tconst zoneDelta = (that.utcOffset() - this.utcOffset()) * MILLISECONDS_A_MINUTE\r\n\t\tconst diff = this.valueOf() - that.valueOf()\r\n\t\t// @ts-ignore\r\n\t\tconst getMonth = () : number => monthDiff(this, that)\r\n\t\tlet result : number;\r\n\t\tswitch (unit) {\r\n\t\t\tcase Y:\r\n\t\t\t\tresult = getMonth() / 12\r\n\t\t\t\tbreak\r\n\t\t\tcase M:\r\n\t\t\t\tresult = getMonth()\r\n\t\t\t\tbreak\r\n\t\t\tcase Q:\r\n\t\t\t\tresult = getMonth() / 3\r\n\t\t\t\tbreak\r\n\t\t\tcase W:\r\n\t\t\t\tresult = (diff - zoneDelta) / MILLISECONDS_A_WEEK\r\n\t\t\t\tbreak\r\n\t\t\tcase D:\r\n\t\t\t\tresult = (diff - zoneDelta) / MILLISECONDS_A_DAY\r\n\t\t\t\tbreak\r\n\t\t\tcase H:\r\n\t\t\t\tresult = diff / MILLISECONDS_A_HOUR\r\n\t\t\t\tbreak\r\n\t\t\tcase MIN:\r\n\t\t\t\tresult = diff / MILLISECONDS_A_MINUTE\r\n\t\t\t\tbreak\r\n\t\t\tcase S:\r\n\t\t\t\tresult = diff / MILLISECONDS_A_SECOND\r\n\t\t\t\tbreak\r\n\t\t\tdefault:\r\n\t\t\t\tresult = diff // milliseconds\r\n\t\t\t\tbreak\r\n\t\t}\r\n\r\n\t\treturn float ? result : absFloor(result)\r\n\t}\r\n\t/**\r\n\t * 将当前 Dayuts 对象转换为原生 Date 对象。\r\n\t *\r\n\t * @returns {Date} 返回一个表示当前日期的原生 Date 对象。\r\n\t */\r\n\ttoDate() : Date {\r\n\t\treturn new Date(this.valueOf())\r\n\t}\r\n\t/**\r\n\t * 将 Moment 对象转换为 JSON 字符串\r\n\t * @returns {string | null} 如果 Moment 对象有效，则返回 ISO 8601 格式的字符串，否则返回 null\r\n\t */\r\n\ttoJSON() : string | null {\r\n\t\treturn this.isValid() ? this.toISOString() : null;\r\n\t}\r\n\t/**\r\n\t * 将 Moment 对象转换为 ISO 8601 格式的字符串\r\n\t * @returns {string} 返回 ISO 8601 格式的字符串\r\n\t */\r\n\ttoISOString() : string {\r\n\t\t// #ifndef APP-ANDROID || APP-IOS\r\n\t\treturn this.$d.toISOString();\r\n\t\t// #endif\r\n\t\t// #ifdef APP-ANDROID || APP-IOS\r\n\t\treturn this.$d.toString();\r\n\t\t// #endif\r\n\t}\r\n\ttoObject() : DayutsObject {\r\n\t\treturn {\r\n\t\t\tyears: this.$y,\r\n\t\t\tmonths: this.$M,\r\n\t\t\tdate: this.$D,\r\n\t\t\thours: this.$H,\r\n\t\t\tminutes: this.$m,\r\n\t\t\tseconds: this.$s,\r\n\t\t\tmilliseconds: this.$ms\r\n\t\t} as DayutsObject\r\n\t}\r\n\ttoArray() : number[] {\r\n\t\treturn [\r\n\t\t\tthis.$y,\r\n\t\t\tthis.$M,\r\n\t\t\tthis.$D,\r\n\t\t\tthis.$H,\r\n\t\t\tthis.$m,\r\n\t\t\tthis.$s,\r\n\t\t\tthis.$ms\r\n\t\t]\r\n\t}\r\n\t/**\r\n\t * 获取当前日期的毫秒数。\r\n\t *\r\n\t * @returns {number} 返回一个表示当前日期的毫秒数。\r\n\t */\r\n\tvalueOf() : number {\r\n\t\t// 使用 Date 对象的 getTime 方法获取当前日期的毫秒数。\r\n\t\treturn this.$d.getTime()\r\n\t}\r\n\t/**\r\n\t * 获取当前 `dayuts` 对象所在月份的天数。\r\n\t *\r\n\t * @returns {number} 返回当前 `dayuts` 对象所在月份的天数。\r\n\t */\r\n\tdaysInMonth() : number {\r\n\t\treturn this.endOf(M).$D;\r\n\t}\r\n\r\n\t/**\r\n\t * 获取当前日期的区域设置对象。\r\n\t *\r\n\t * @returns {Object} 区域设置对象。\r\n\t */\r\n\tprivate $locale() : DayutsLocale { // get locale object\r\n\t\t// return Ls.get(this.$L)!\r\n\t\treturn localeState.locales.get(this.$L)!\r\n\t}\r\n\t/**\r\n\t * 设置或获取 Dayuts 实例的本地化配置\r\n\t * @param {string|Object} preset - 本地化预设名称或自定义本地化配置对象\r\n\t * @param {Object} [DayutsLocale] - 可选的自定义本地化配置对象\r\n\t * @returns {Dayuts|string} 如果设置了本地化配置，则返回一个新的 Dayuts 实例；否则返回当前实例的本地化配置名称\r\n\t */\r\n\tlocale(preset : string, object : DayutsLocale) : Dayuts\r\n\tlocale(preset : DayutsLocale, object : DayutsLocale) : Dayuts\r\n\tlocale(preset : any, object : DayutsLocale | null = null) : Dayuts {\r\n\t\t// if (!preset) return this.$L\r\n\t\tconst that = this.clone()\r\n\t\tconst nextLocaleName = parseLocale(preset, object, true)\r\n\t\tif (nextLocaleName != null) that.$L = nextLocaleName\r\n\t\treturn that\r\n\t}\r\n\tclone() : Dayuts {\r\n\t\treturn wrapper(this.$d.getTime(), this)\r\n\t}\r\n\t/**\r\n\t * 返回当前 dayuts 对象的 UTC 字符串表示。\r\n\t *\r\n\t * @returns {string} 当前 dayuts 对象的 UTC 字符串表示。\r\n\t */\r\n\t// #ifdef APP-ANDROID\r\n\toverride toString() : string {\r\n\t\t// return this.$d.toUTCString();\r\n\t\t// const locale = localeState.locales.get('en')!\r\n\t\t// const weekday = locale.weekdays[this.$d.getDay()].substring(0,3);\r\n\t\t// const month = locale.months[this.$d.getMonth()].substring(0,3)\r\n\t\t// const day = `${this.$D}`.padStart(2, '0');\r\n\t\t// const hours = `${this.$H}`.padStart(2, '0');\r\n\t\t// const minutes = `${this.$m}`.padStart(2, '0');\r\n\t\t// const seconds = `${this.$s}`.padStart(2, '0');\r\n\t\t// return `${weekday}, ${day} ${month} ${this.$y} ${hours}:${minutes}:${seconds} GMT`;\r\n\t\treturn this.$d.toString();\r\n\t}\r\n\t// #endif\r\n\t// #ifndef APP-ANDROID\r\n\ttoString() : string {\r\n\t\t// return this.$d.toUTCString();\r\n\t\treturn this.$d.toString();\r\n\t}\r\n\t// #endif\r\n\t/**\r\n\t * 计算给定日期在当年的第几天，或者设置给定日期为当年的第几天。\r\n\t * @param {number} [input] - 如果提供了输入值，则将日期设置为当年的第几天。如果没有提供输入值，则返回当前日期在当年的第几天。\r\n\t * @returns {number} 如果提供了输入值，则返回调整后的日期。如果没有提供输入值，则返回当前日期在当年的第几天。\r\n\t */\r\n\tdayOfYear() : number\r\n\tdayOfYear(input : number) : Dayuts\r\n\tdayOfYear(input : number | null = null) : any {\r\n\t\tconst dayOfYear = Math.round((this.startOf('day').valueOf() - this.startOf('year').valueOf()) / 864e5) + 1\r\n\t\treturn input == null ? dayOfYear : this.add(input - dayOfYear, 'day')\r\n\t}\r\n\t/**\r\n\t * 根据输入的时间计算与当前时间的相对时间差，并以指定的格式返回。\r\n\t * @param {Date|number|string} input - 输入的时间，可以是Date对象、时间戳或符合Date.parse()方法的字符串\r\n\t * @param {boolean} withoutSuffix - 是否省略“未来”或“过去”的后缀\r\n\t * @param {Object} instance - 当前时间的实例\r\n\t * @param {boolean} isFrom - 是否从输入时间计算到当前时间\r\n\t * @param {Function} postFormat - 格式化绝对值后的结果的函数\r\n\t * @returns {string} 相对时间差的格式化字符串\r\n\t */\r\n\t// postFormat\r\n\tfromToBase(input : string, withoutSuffix : boolean, instance : Dayuts, isFrom : boolean) : string\r\n\tfromToBase(input : number, withoutSuffix : boolean, instance : Dayuts, isFrom : boolean) : string\r\n\tfromToBase(input : Date, withoutSuffix : boolean, instance : Dayuts, isFrom : boolean) : string\r\n\tfromToBase(input : Dayuts, withoutSuffix : boolean, instance : Dayuts, isFrom : boolean) : string\r\n\tfromToBase(input : UTSJSONObject, withoutSuffix : boolean, instance : Dayuts, isFrom : boolean) : string\r\n\tfromToBase(input : any, withoutSuffix : boolean, instance : Dayuts, isFrom : boolean) : string {\r\n\t\tconst relObj = localeState.locales.get('en')?.relativeTime\r\n\t\tconst loc = instance.$locale().relativeTime ?? relObj\r\n\t\tif (loc == null) return '';\r\n\t\tconst T : Threshold[] = [\r\n\t\t\t{ l: 's', r: 44, d: S },\r\n\t\t\t{ l: 'm', r: 89 },\r\n\t\t\t{ l: 'mm', r: 44, d: MIN },\r\n\t\t\t{ l: 'h', r: 89 },\r\n\t\t\t{ l: 'hh', r: 21, d: H },\r\n\t\t\t{ l: 'd', r: 35 },\r\n\t\t\t{ l: 'dd', r: 25, d: D },\r\n\t\t\t{ l: 'M', r: 45 },\r\n\t\t\t{ l: 'MM', r: 10, d: M },\r\n\t\t\t{ l: 'y', r: 17 },\r\n\t\t\t{ l: 'yy', d: Y }\r\n\t\t]\r\n\t\tconst Tl = T.length\r\n\t\tlet result : number = 0;\r\n\t\tlet out : string = '';\r\n\t\tlet isFuture : boolean = false\r\n\t\tfor (let i = 0; i < Tl; i += 1) {\r\n\t\t\tlet t = T[i]\r\n\t\t\tif (t.d != null) {\r\n\t\t\t\tresult = isFrom\r\n\t\t\t\t\t? dayuts(input).diff(instance, t.d!, true)\r\n\t\t\t\t\t: instance.diff(input, t.d!, true)\r\n\t\t\t}\r\n\t\t\tlet abs = Math.round(Math.abs(result))\r\n\t\t\tisFuture = result > 0\r\n\t\t\tif (t.r == null || t.r != null && abs <= t.r!) {\r\n\t\t\t\tif (abs <= 1 && i > 0) t = T[i - 1] // 1 minutes -> a minute, 0 seconds -> 0 second\r\n\t\t\t\tconst format = loc[t.l]\r\n\t\t\t\t// if (postFormat) {\r\n\t\t\t\t// \tabs = postFormat(`${abs}`)\r\n\t\t\t\t// }\r\n\t\t\t\tif (typeof format == 'string') {\r\n\t\t\t\t\tout = (format as string).replace('%d', abs.toString())\r\n\t\t\t\t}\r\n\t\t\t\t// else {\r\n\t\t\t\t// \tout = format(abs, withoutSuffix, t.l!, isFuture)\r\n\t\t\t\t// }\r\n\t\t\t\tbreak\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (withoutSuffix) return out\r\n\t\tconst pastOrFuture = isFuture ? loc.future : loc.past\r\n\t\t// if (typeof pastOrFuture == 'function') {\r\n\t\t// \treturn pastOrFuture(out)\r\n\t\t// }\r\n\t\treturn pastOrFuture.replace('%s', out)\r\n\t}\r\n\t/**\r\n\t * 相对指定时间(后)。\r\n\t * @param {string|number|Date|Dayuts|UTSJSONObject} input - 输入的时间，可以是字符串、数字（时间戳）、Date对象、Dayuts对象或UTSJSONObject。\r\n\t * @param {boolean} withoutSuffix - 是否省略“未来”或“过去”的后缀。\r\n\t * @returns {string} 相对时间差的格式化字符串。\r\n\t */\r\n\tto(input : string) : string\r\n\tto(input : number) : string\r\n\tto(input : Date) : string\r\n\tto(input : Dayuts) : string\r\n\tto(input : UTSJSONObject) : string\r\n\r\n\tto(input : string, withoutSuffix : boolean) : string\r\n\tto(input : number, withoutSuffix : boolean) : string\r\n\tto(input : Date, withoutSuffix : boolean) : string\r\n\tto(input : Dayuts, withoutSuffix : boolean) : string\r\n\tto(input : UTSJSONObject, withoutSuffix : boolean) : string\r\n\tto(input : any, withoutSuffix : boolean = false) : string {\r\n\t\treturn this.fromToBase(input, withoutSuffix, this, true)\r\n\t}\r\n\t/**\r\n\t * 将当前时间转换为与输入时间的相对时间差，并以指定的格式返回。\r\n\t * @param {string|number|Date|Dayuts|UTSJSONObject} input - 输入的时间，可以是字符串、数字（时间戳）、Date对象、Dayuts对象或UTSJSONObject。\r\n\t * @param {boolean} withoutSuffix - 是否省略“未来”或“过去”的后缀。\r\n\t * @returns {string} 相对时间差的格式化字符串。\r\n\t */\r\n\tfrom(input : string) : string\r\n\tfrom(input : number) : string\r\n\tfrom(input : Date) : string\r\n\tfrom(input : Dayuts) : string\r\n\tfrom(input : UTSJSONObject) : string\r\n\r\n\tfrom(input : string, withoutSuffix : boolean) : string\r\n\tfrom(input : number, withoutSuffix : boolean) : string\r\n\tfrom(input : Date, withoutSuffix : boolean) : string\r\n\tfrom(input : Dayuts, withoutSuffix : boolean) : string\r\n\tfrom(input : UTSJSONObject, withoutSuffix : boolean) : string\r\n\tfrom(input : any, withoutSuffix : boolean = false) : string {\r\n\t\treturn this.fromToBase(input, withoutSuffix, this, false)\r\n\t}\r\n\t/**\r\n\t * 获取当前时间与实例时间的相对时间差，并以指定的格式返回。\r\n\t * @param {boolean} withoutSuffix - 是否省略“未来”或“过去”的后缀。\r\n\t * @returns {string} 相对时间差的格式化字符串。\r\n\t */\r\n\ttoNow() : string\r\n\ttoNow(withoutSuffix : boolean = false) : string {\r\n\t\treturn this.to(dayuts(), withoutSuffix)\r\n\t}\r\n\t/**\r\n\t * 获取实例时间与当前时间的相对时间差，并以指定的格式返回。\r\n\t * @param {boolean} withoutSuffix - 是否省略“未来”或“过去”的后缀。\r\n\t * @returns {string} 相对时间差的格式化字符串。\r\n\t */\r\n\tfromNow() : string\r\n\tfromNow(withoutSuffix : boolean = false) : string {\r\n\t\treturn this.from(dayuts(), withoutSuffix)\r\n\t}\r\n}\r\n\r\nfunction dayuts() : Dayuts;\r\nfunction dayuts(date : string) : Dayuts;\r\nfunction dayuts(date : any[]) : Dayuts;\r\nfunction dayuts(date : number) : Dayuts;\r\nfunction dayuts(date : UTSJSONObject) : Dayuts;\r\nfunction dayuts(date : Date) : Dayuts;\r\nfunction dayuts(date : Dayuts) : Dayuts;\r\n// #ifndef APP-ANDROID || APP-IOS\r\nfunction dayuts(date : any | null, format : string) : Dayuts;\r\nfunction dayuts(date : any | null, format : string | null, locale : string | null) : Dayuts;\r\n// #endif\r\nfunction dayuts(date : any | null = null, format : string | null = null, locale : string | null = null) : Dayuts {\r\n\tif (date != null && date instanceof Dayuts) return date.clone()\r\n\treturn new Dayuts({\r\n\t\tdate,\r\n\t\tformat,\r\n\t\tlocale\r\n\t} as DayutsConfig)\r\n}\r\n\r\n/**\r\n * 判断给定的对象是否为Dayuts实例\r\n * @param {(any | null)} date - 输入的对象\r\n * @returns {boolean} - 如果给定的对象是Dayuts实例，则返回true，否则返回false\r\n */\r\nfunction isDayuts(date : any | null = null) : boolean {\r\n\treturn date instanceof Dayuts\r\n}\r\n\r\nexport {\r\n\tdayuts,\r\n\tisDayuts\r\n}"],"names":["dayutsIntl","isNumber","REGEX_PARSE","prettyUnit","D","Y","M","W","DATE","H","MIN","S","unit","arg","MS","MILLISECONDS_A_MINUTE","MILLISECONDS_A_HOUR","MILLISECONDS_A_SECOND","INVALID_DATE_STRING","FORMAT_DEFAULT","padZoneStr","padStart","REGEX_FORMAT","_a","monthDiff","Q","MILLISECONDS_A_WEEK","MILLISECONDS_A_DAY","absFloor","localeState"],"mappings":"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"}