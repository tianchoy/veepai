{"version":3,"file":"utils.js","sources":["uni_modules/lime-upload/components/l-upload/utils.ts"],"sourcesContent":["// @ts-nocheck\r\nimport { UploadFile, ChooseFileOptions, Oversize } from './type'\r\n// import { chooseFile, ChooseFileOption, ChooseFileSuccessCallbackResult } from '@/uni_modules/lime-choose-file'\r\n/**\r\n * 由于小程序暂时在ios上不支持返回上传文件的fileType，这里用文件的后缀来判断\r\n * @param mediaType\r\n * @param tempFilePath\r\n * @returns string\r\n * @link https://developers.weixin.qq.com/community/develop/doc/00042820b28ee8fb41fc4d0c254c00\r\n */\r\nexport function getFileType(tempFilePath : string, fileType ?: string) : string {\r\n\tif (fileType != null) return fileType.replace(/\\/.+/,''); // 如果有返回fileType就直接用\r\n\t\r\n\t// 否则根据文件后缀进行判读\r\n\tconst videoType = ['avi', 'wmv', 'mkv', 'mp4', 'mov', 'rm', '3gp', 'flv', 'mpg', 'rmvb'];\r\n\tconst temp = tempFilePath.split('.');\r\n\tconst postfix = temp[temp.length - 1];\r\n\tif (videoType.includes(postfix.toLocaleLowerCase())) {\r\n\t\treturn 'video';\r\n\t}\r\n\treturn 'image';\r\n}\r\n\r\n// 选中文件之后，计算一个随机的短文件名\r\n// export function getRandFileName(filePath: string):string {\r\n// \tconst extIndex = filePath.lastIndexOf('.');\r\n// \tconst extName = extIndex === -1 ? '' : filePath.substr(extIndex);\r\n// \treturn parseInt(`${Date.now()}${Math.floor(Math.random() * 900 + 100)}`, 10).toString(36) + extName;\r\n// }\r\nexport function getFileName(filePath: string): string {\r\n\treturn filePath.substring(filePath.lastIndexOf('/') + 1)\r\n}\r\n\r\nexport const isOverSize = (size:number, sizeLimit:number|null):boolean => {\n  if (sizeLimit == null) return false;\n\n  const base = 1000;\n  // const unitMap = {\n  //   B: 1,\n  //   KB: base,\n  //   MB: base * base,\n  //   GB: base * base * base,\n  // };\n  const computedSize =  sizeLimit * base \r\n  // const computedSize = typeof sizeLimit == 'number' ? sizeLimit * base : sizeLimit?.size * unitMap[sizeLimit?.unit ?? 'KB']; // 单位 KB\n\n  return size > computedSize;\n};\r\n\r\n\r\n\r\nexport function chooseImage(opts : ChooseFileOptions) {\r\n\t// #ifdef MP-WEIXIN\r\n\tuni.chooseMedia({\r\n\t\t...opts,\r\n\t\tmediaType: ['image'],\r\n\t})\r\n\t// #endif\r\n\t// #ifndef MP-WEIXIN\r\n\tuni.chooseImage({\r\n\t\tcount: opts.count,\r\n\t\tsizeType: opts.sizeType,\r\n\t\tsourceType: opts.sourceType,\r\n\t\textension: opts.extension,\r\n\t\tsuccess(res){\r\n\t\t\topts.success?.(res)\r\n\t\t},\r\n\t\tfail(err) {\r\n\t\t\topts.fail?.(err)\r\n\t\t}\r\n\t})\r\n\t// #endif\r\n}\r\n\r\nexport function chooseVideo(opts : ChooseFileOptions) {\r\n\t// #ifdef MP-WEIXIN\r\n\tuni.chooseMedia({\r\n\t\t...opts,\r\n\t\tmediaType: ['video'],\r\n\t\tmaxDuration: opts.maxDuration ?? 10,\r\n\t})\r\n\t// #endif\r\n\t// #ifndef MP-WEIXIN\r\n\tuni.chooseVideo({\r\n\t\tsourceType: opts.sourceType,\r\n\t\t// #ifndef APP-ANDROID || APP-IOS\r\n\t\t// compressed: opts.compressed ?? true,\r\n\t\tmaxDuration: opts.maxDuration ?? 10,\r\n\t\tcamera: opts.camera ?? 'back',\r\n\t\t// extension: opts.extension,\r\n\t\t// #endif\r\n\t\tsuccess(res){\r\n\t\t\topts.success?.(res)\r\n\t\t},\r\n\t\tfail(err) {\r\n\t\t\topts.fail?.(err)\r\n\t\t}\r\n\t})\r\n\t// #endif\r\n}\r\n\r\nexport function chooseMedia(opts : ChooseFileOptions) {\r\n\t// #ifdef APP-ANDROID || APP-IOS\r\n\t// #ifdef uniVersion >= 4.51\r\n\tuni.chooseMedia({\r\n\t\tcount: opts.count,\r\n\t\tmediaType: ['image', 'video'],\r\n\t\tsourceType: opts.sourceType,\r\n\t\tmaxDuration: opts.maxDuration ?? 10,\r\n\t\tcamera: opts.camera ?? 'back',\r\n\t\tsuccess(res) {\r\n\t\t\topts.success?.(res)\r\n\t\t},\r\n\t\tfail(err) {\r\n\t\t\topts.fail?.(err)\r\n\t\t}\r\n\t} as ChooseMediaOptions)\r\n\t// #endif\r\n\t// #ifdef uniVersion < 4.51\r\n\tconsole.warn(\"【lime-upload】chooseMedia 当前环境不支持\")\r\n\t// #endif\r\n\t// #endif\r\n\t\r\n\t// #ifndef APP-ANDROID || APP-IOS\r\n\ttry {\r\n\t\tuni.chooseMedia({\r\n\t\t\t...opts,\r\n\t\t\tmediaType: ['image', 'video'],\r\n\t\t})\r\n\t} catch (error) {\r\n\t\tconsole.error('error', error)\r\n\t\tuni.chooseImage(opts)\r\n\t\t//TODO handle the exception\r\n\t}\r\n\t\r\n\t// #endif\r\n}\r\n\r\nexport function chooseAll(opts : ChooseFileOptions) {\r\n\t// #ifdef MP-WEIXIN\r\n\tuni.chooseMessageFile({\r\n\t\t...opts,\r\n\t\ttype: 'all',\r\n\t})\r\n\t// #endif\r\n\t// #ifndef MP-WEIXIN || APP-IOS || APP-ANDROID\r\n\tuni.chooseFile({\r\n\t\tcount: opts.count,\r\n\t\ttype: 'all',\r\n\t\tsuccess(res) {\r\n\t\t\topts.success?.(res)\r\n\t\t},\r\n\t\tfail(err) {\r\n\t\t\topts.fail?.(err)\r\n\t\t}\r\n\t} as ChooseFileOption)\r\n\t// #endif\r\n\t\r\n\t// #ifdef APP-ANDROID && uniVersion >= 4.51\r\n\tuni.chooseFile({\r\n\t\tcount: opts.count,\r\n\t\ttype: 'all',\r\n\t\tsuccess(res) {\r\n\t\t\topts.success?.(res)\r\n\t\t},\r\n\t\tfail(err) {\r\n\t\t\topts.fail?.(err)\r\n\t\t}\r\n\t})\r\n\t// #endif\r\n\t// #ifdef APP-IOS || APP-ANDROID && uniVersion < 4.51\r\n\tconsole.warn(\"【lime-upload】chooseAll 当前环境不支持\")\r\n\t// #endif\r\n}\r\n\r\n\r\nfunction normalizeChooseFiles(\r\n\ttype: string, \r\n\ttempFiles: UTSJSONObject[], //ChooseImageTempFile\r\n\ttempFilePaths:string[], \r\n\tsizeLimit:number|null,\r\n\toversize: Oversize | null\r\n\t):UploadFile[]{\r\n\tconst files : UploadFile[] = [];\r\n\r\n\ttempFiles.forEach((temp, index) =>{\r\n\t\tconst tempFilePath = (temp['tempFilePath'] as string | null) ?? tempFilePaths[index]\r\n\t\tconst name = (temp['name'] as string | null) ?? getFileName(tempFilePath);\r\n\t\tconst size = (temp['size'] as number | null) ?? 0;\r\n\t\tconst width = (temp['width'] as number | null);\r\n\t\tconst height = (temp['height'] as number | null)\r\n\t\tconst duration = (temp['duration'] as number | null);\r\n\t\tconst path = (temp['path'] as string | null) ?? tempFilePath;\r\n\t\tconst thumb = (temp['thumbTempFilePath'] as string | null);\r\n\t\tconst _type = (type == 'all' ? getFileType(tempFilePath, temp['type'] as string | null) : type) as \"video\" | \"image\"; \r\n\t\t\r\n\t\t\r\n\t\tif (isOverSize(size, sizeLimit)) {\r\n\t\t\toversize?.(temp)\r\n\t\t\treturn\r\n\t\t};\r\n\t\t\r\n\t\tfiles.push({\r\n\t\t\tname,\r\n\t\t\ttype: _type,\r\n\t\t\turl: path,\r\n\t\t\tpath,\r\n\t\t\tsize,\r\n\t\t\twidth,\r\n\t\t\theight,\r\n\t\t\tduration,\r\n\t\t\tthumb,\r\n\t\t\tpercent: 0,\r\n\t\t\t// status: 'done'\r\n\t\t} as UploadFile)\r\n\t})\r\n\treturn files\r\n}\r\n\r\nexport function chooseFiles(opts: ChooseFileOptions):Promise<UploadFile[]> {\r\n\treturn new Promise((resolve, reject)=>{\r\n\t\tif(opts.mediaType == 'image') {\r\n\t\t\tchooseImage({\r\n\t\t\t\tcount: opts.count,\r\n\t\t\t\tmediaType: opts.mediaType,\r\n\t\t\t\tsizeType: opts.sizeType,\r\n\t\t\t\tsourceType: opts.sourceType,\r\n\t\t\t\tsuccess(result: any){\r\n\t\t\t\t\tconst res = result as ChooseImageSuccess\r\n\t\t\t\t\t// #ifndef APP-ANDROID || APP-IOS\r\n\t\t\t\t\tconst tempFiles = res.tempFiles as UTSJSONObject[]\r\n\t\t\t\t\tconst tempFilePaths = (res.tempFilePaths ?? []) as string[]\r\n\t\t\t\t\t// #endif\r\n\t\t\t\t\t// #ifdef APP-ANDROID || APP-IOS\r\n\t\t\t\t\tconst tempFilePaths = res.tempFilePaths\r\n\t\t\t\t\tconst tempFiles = res.tempFiles.map((item):UTSJSONObject => {\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\tname: item.name, \r\n\t\t\t\t\t\t\tpath: item.path, \r\n\t\t\t\t\t\t\tsize: item.size, \r\n\t\t\t\t\t\t\ttype: item.type\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})\r\n\t\t\t\t\t// #endif\r\n\t\t\t\t\tconst files = normalizeChooseFiles('image', tempFiles, tempFilePaths, opts.sizeLimit, opts.oversize)\r\n\t\t\t\t\tresolve(files)\r\n\t\t\t\t}\r\n\t\t\t} as ChooseFileOptions)\r\n\t\t} else if(opts.mediaType == 'video') {\r\n\t\t\tchooseVideo({\r\n\t\t\t\tcount: opts.count,\r\n\t\t\t\tmediaType: opts.mediaType,\r\n\t\t\t\tsourceType: opts.sourceType,\r\n\t\t\t\tsizeType: opts.sizeType,\r\n\t\t\t\tmaxDuration: opts.maxDuration,\r\n\t\t\t\tsuccess(result) {\r\n\t\t\t\t\tconst res = result as ChooseVideoSuccess \r\n\t\t\t\t\t// #ifndef APP-ANDROID || APP-IOS\r\n\t\t\t\t\tconst tempFilePaths = res.tempFilePaths ?? [res.tempFilePath] as string[]\r\n\t\t\t\t\tconst tempFiles = res.tempFiles ?? [res.tempFile] as UTSJSONObject[]\r\n\t\t\t\t\t// #endif\r\n\t\t\t\t\t// #ifdef APP-ANDROID || APP-IOS\r\n\t\t\t\t\tconst tempFilePaths = [res.tempFilePath] as string[]\r\n\t\t\t\t\tconst {tempFilePath, duration, size, height, width} = res\r\n\t\t\t\t\tconst tempFiles = [{path: tempFilePath, duration, duration, size, height, width}] as UTSJSONObject[]\r\n\t\t\t\t\t// #endif\r\n\t\t\t\t\tconst files = normalizeChooseFiles('video', tempFiles, tempFilePaths, opts.sizeLimit, opts.oversize)\r\n\t\t\t\t\t\r\n\t\t\t\t\tresolve(files)\r\n\t\t\t\t}\r\n\t\t\t} as ChooseFileOptions)\r\n\t\t} else if(opts.mediaType == 'media') {\r\n\t\t\tchooseMedia({\r\n\t\t\t\tcount: opts.count,\r\n\t\t\t\tmediaType: 'media',\r\n\t\t\t\tsourceType: opts.sourceType,\r\n\t\t\t\tmaxDuration: opts.maxDuration ?? 10,\r\n\t\t\t\tcamera: opts.camera ?? 'back',\r\n\t\t\t\tsizeType: opts.sizeType,\r\n\t\t\t\tsuccess(result: any) {\r\n\t\t\t\t\t// #ifndef UNI-APP-X && APP && uniVersion < 4.51\r\n\t\t\t\t\tconst res = result as  ChooseMediaSuccess\r\n\t\t\t\t\t// #ifndef APP-ANDROID || APP-IOS\r\n\t\t\t\t\tconst tempFilePaths = res.tempFilePaths ? res.tempFilePaths : res.tempFiles.map((it):string => it.tempFilePath)\r\n\t\t\t\t\tconst tempFiles = res.tempFiles//.map((it):UTSJSONObject => ({path: it.tempFilePath, size: it.size, type: it.fileType}));\r\n\t\t\t\t\t// #endif\r\n\t\t\t\t\t// #ifdef APP-ANDROID || APP-IOS\r\n\t\t\t\t\tconst tempFilePaths = res.tempFiles.map((it):string => it.tempFilePath)\r\n\t\t\t\t\tconst tempFiles = res.tempFiles.map((it):UTSJSONObject => ({path: it.tempFilePath, size: it.size, type: it.fileType}));\r\n\t\t\t\t\t// #endif\r\n\t\t\t\t\t\r\n\t\t\t\t\tconst files = normalizeChooseFiles('all', tempFiles, tempFilePaths, opts.sizeLimit, opts.oversize)\r\n\t\t\t\t\tresolve(files)\r\n\t\t\t\t\t// #endif\r\n\t\t\t\t\t// #ifdef UNI-APP-X && APP && uniVersion < 4.51\r\n\t\t\t\t\treject(\"【lime-upload】chooseMedia 当前环境不支持\")\r\n\t\t\t\t\t// #endif\r\n\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t} as ChooseFileOptions)\r\n\t\t} else {\r\n\t\t\tchooseAll({\r\n\t\t\t\tcount: opts.count,\r\n\t\t\t\tmediaType: opts.mediaType,\r\n\t\t\t\tsourceType: opts.sourceType,\r\n\t\t\t\tsizeType: opts.sizeType,\r\n\t\t\t\tsuccess(result: any){\r\n\t\t\t\t\t// #ifndef APP-ANDROID || APP-IOS\r\n\t\t\t\t\tconst res = result as ChooseFileSuccessCallbackResult\r\n\t\t\t\t\tconst tempFilePaths = res.tempFiles\r\n\t\t\t\t\tconst tempFiles = res.tempFiles\r\n\t\t\t\t\tconst files = normalizeChooseFiles('all', tempFiles, tempFilePaths, opts.sizeLimit, opts.oversize)\r\n\t\t\t\t\tresolve(files)\r\n\t\t\t\t\t// #endif\r\n\t\t\t\t\t\r\n\t\t\t\t\t// #ifdef APP-ANDROID && uniVersion >= 4.51\r\n\t\t\t\t\t\r\n\t\t\t\t\tconst res = result as ChooseFileSuccess\r\n\t\t\t\t\tconst tempFilePaths = res.tempFilePaths//.map((it):string => it.tempFilePath)\r\n\t\t\t\t\tconst tempFiles = res.tempFiles.map((it):UTSJSONObject => ({path: it.path, size: it.size, type: it.type, name: it.name}));\r\n\t\t\t\t\tconst files = normalizeChooseFiles('all', tempFiles, tempFilePaths, opts.sizeLimit, opts.oversize)\r\n\t\t\t\t\tresolve(files)\r\n\t\t\t\t\t\r\n\t\t\t\t\t// #endif\r\n\t\t\t\t\t// #ifdef APP-IOS || APP-ANDROID && uniVersion < 4.51\r\n\t\t\t\t\treject(\"【lime-upload】chooseAll 当前环境不支持\")\r\n\t\t\t\t\t// #endif\r\n\t\t\t\t\t\r\n\t\t\t\t\t// #ifdef uniVersion < 4.51\r\n\t\t\t\t\t\r\n\t\t\t\t\t// const tempFilePaths = res.tempFiles.map((it):string => it.path)\r\n\t\t\t\t\t// const tempFiles = res.tempFiles.map((it):UTSJSONObject => ({name: it.name, path: it.path, size: it.size, type: it.type}));\r\n\t\t\t\t\t// #endif\r\n\t\t\t\t\t// #ifdef uniVersion >= 4.51\r\n\t\t\t\t\t// #ifdef APP-ANDROID || APP-IOS\r\n\t\t\t\t\t\r\n\t\t\t\t\t// const res = result as  ChooseMediaSuccess // ChooseFileSuccess\r\n\t\t\t\t\t// const tempFilePaths = res.tempFiles.map((it):string => it.tempFilePath)\r\n\t\t\t\t\t// const tempFiles = res.tempFiles.map((it):UTSJSONObject => ({path: it.tempFilePath, size: it.size}));\r\n\t\t\t\t\t// const files = normalizeChooseFiles('all', tempFiles, tempFilePaths, opts.sizeLimit, opts.oversize)\r\n\t\t\t\t\t// resolve(files)\r\n\t\t\t\t\t// #endif\r\n\t\t\t\t\t// #endif\r\n\t\t\t\t}\r\n\t\t\t} as ChooseFileOptions)\r\n\t\t\t\r\n\t\t}\r\n\t})\r\n}"],"names":["uni","_a","_b"],"mappings":"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"}