<template>
  <view class="container">
    <!-- 顶部标题栏 -->
    <view class="header">
      <text class="title">监控视频回放</text>
      <text class="current-time">{{ currentDate }} {{ currentTime }}</text>
    </view>
    
    <!-- 日期选择滚动条 -->
    <scroll-view class="date-scroll" scroll-x :scroll-left="dateScrollLeft">
      <view class="date-list">
        <view 
          v-for="(date, index) in dateList" 
          :key="index"
          :class="['date-item', activeDate === date ? 'active' : '']"
          @tap="selectDate(date)"
        >
          {{ date }}
        </view>
      </view>
    </scroll-view>
    
    <!-- 视频播放区域 -->
    <view class="video-container">
      <video 
        id="myVideo"
        :src="videoSrc" 
        :controls="true"
        class="video-player"
        @timeupdate="onTimeUpdate"
        @play="onPlay"
        @pause="onPause"
        
        @seeked="onSeeked"
      ></video>
    </view>
    
    <!-- 可拖动时间轴 -->
    <view class="time-ruler-container">
      <scroll-view 
        class="time-ruler-scroll" 
        scroll-x
        :scroll-left="timeScrollLeft"
        scroll-with-animation
        @scroll="onTimeScroll"
      >
        <view 
          class="time-ruler" 
          :style="{ width: rulerWidth + 'px' }"
          @touchstart="onTouchStart"
          @touchmove="onTouchMove"
          @touchend="onTouchEnd"
        >
          <!-- 时间刻度 -->
          <view 
            v-for="hour in 24" 
            :key="'hour-' + hour"
            class="hour-section"
          >
            <view class="hour-mark">{{ formatHour(hour - 1) }}</view>
            <view class="minute-marks">
              <view 
                v-for="minute in minuteMarks" 
                :key="'min-' + hour + '-' + minute"
                class="minute-mark"
                @tap="seekToTime(hour - 1, minute)"
              >
                <!-- 事件标记点 -->
                <view 
                  v-if="hasEvent(hour - 1, minute)"
                  :class="['event-dot', getEventType(hour - 1, minute)]"
                ></view>
                <!-- 分钟标签 -->
                <text v-if="minute % 15 === 0" class="minute-label">{{ minute }}</text>
              </view>
            </view>
          </view>
          
          <!-- 播放头指示器 -->
          <view 
            class="playhead" 
            :style="{ left: playheadPosition + 'px' }"
          ></view>
          
          <!-- 当前时间指示器 -->
          <view 
            class="time-indicator" 
            :style="{ left: playheadPosition + 'px' }"
          >
            {{ currentTime.split(':').slice(0, 2).join(':') }}
          </view>
        </view>
      </scroll-view>
    </view>
    
    <!-- 事件筛选工具栏 -->
    <view class="filter-bar">
      <view 
        v-for="filter in filters" 
        :key="filter.value"
        :class="['filter-item', activeFilter === filter.value ? 'active' : '']"
        @tap="selectFilter(filter.value)"
      >
        {{ filter.label }}
      </view>
    </view>
  </view>
</template>

<script setup>
import { ref, computed, onMounted, getCurrentInstance } from 'vue'

class EventType {
  date: string;
  time: string;
  type: string;

  constructor(date: string, time: string, type: string) {
    this.date = date;
    this.time = time;
    this.type = type;
  }
}
// 响应式状态
const currentDate = ref('2024-10-21')
const currentTime = ref('00:00:00')
const activeDate = ref('10-21')
const activeFilter = ref('all')
const videoSrc = ref('https://qiniu-web-assets.dcloud.net.cn/video/sample/2minute-demo.mp4')
const videoContext = ref<VideoContext | null>(null)
const isSeeking = ref(false)
const timeScrollLeft = ref(0)
const dateScrollLeft = ref(0)
const playheadPosition = ref(0)
const videoDuration = ref(0)
const lastSyncTime = ref(0)
const isDragging = ref(false)
const startX = ref(0)
const startScrollLeft = ref(0)
const lastDragTime = ref(0)
const manualScrollPosition = ref(0)
const draggedTimeInSeconds = ref(0)

// 获取当前组件实例
const instance = getCurrentInstance()

// 常量配置
const dateList = ['10-21', '10-22', '10-23', '10-24', '10-25', '10-26']
const minuteMarks = [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55]
const filters = [
  { label: '只看报警', value: 'alarm' },
  { label: '移动侦测', value: 'motion' },
  { label: '人形侦测', value: 'human' },
  { label: '全部', value: 'all' }
]

// 模拟事件数据
const events = ref<EventType[]>([
  { date: '10-21', time: '00:15', type: 'alarm' },
  { date: '10-21', time: '00:30', type: 'motion' },
  { date: '10-21', time: '01:45', type: 'human' },
  { date: '10-21', time: '01:20', type: 'alarm' }
])

// 计算属性
const rulerWidth = computed(() => 24 * 120) // 24小时 * 每小时120px
const filteredEvents = computed<EventType[]>(() => {
  if (activeFilter.value === 'all') return events.value
  return events.value.filter((e) => e.type === activeFilter.value)
})

// 初始化视频上下文
const initVideoContext = () => {
  try {
    videoContext.value = uni.createVideoContext('myVideo');
    console.log('视频上下文初始化成功', videoContext.value);
  } catch (error) {
    console.error('创建视频上下文失败:', error);
  }
}
// 加载视频数据
const loadVideoData = (date:String) => {
  console.log('加载日期数据:', date)
}


// 选择日期
const selectDate = (date:String) => {
  activeDate.value = date
  currentDate.value = `2024-${date}`
  loadVideoData(date)
  
  const index = dateList.indexOf(date)
  dateScrollLeft.value = index * 80
}



// 视频元数据加载完成
// const onVideoLoaded = (e:UniVideoLoadedMetadataEvent) => {
//   videoDuration.value = e.detail.duration;
//   console.log('视频元数据加载完成，视频时长:', videoDuration.value, '秒');
// }

// 视频时间更新 
const onTimeUpdate = (e:UniVideoTimeUpdateEvent) => {
  if (isSeeking.value || isDragging.value) return
  
  const currentTimeInSeconds = e.detail.currentTime
  currentTime.value = formatTime(currentTimeInSeconds)
  
  // 节流处理
  const now = Date.now()
  if (now - lastSyncTime.value < 200) return
  lastSyncTime.value = now
  
  updatePlayheadPosition(currentTimeInSeconds)
}

// 更新播放头位置
const updatePlayheadPosition = (currentTimeInSeconds) => {
  const newPosition = currentTimeInSeconds * 2
  playheadPosition.value = newPosition
  
  // 只在非手动滚动时自动滚动时间轴
  if (Math.abs(manualScrollPosition.value - newPosition) > 60) {
    const systemInfo = uni.getSystemInfoSync()
    const scrollViewWidth = systemInfo.windowWidth || 375
    const halfWidth = scrollViewWidth / 2
    const targetScrollLeft = newPosition - halfWidth
    
    const maxScrollLeft = rulerWidth.value - scrollViewWidth
    timeScrollLeft.value = Math.max(0, Math.min(maxScrollLeft, targetScrollLeft))
  }
}

// 跳转到指定时间
const seekToTime = (hour, minute) => {
  const timeInSeconds = hour * 3600 + minute * 60
  seekToSeconds(timeInSeconds)
}

const seekToSeconds = (timeInSeconds) => {
  isSeeking.value = true
  manualScrollPosition.value = timeInSeconds * 2
  
  if (videoContext.value) {
    videoContext.value.seek(timeInSeconds)
  }
  
  playheadPosition.value = timeInSeconds * 2
  currentTime.value = formatTime(timeInSeconds)
}

// 跳转完成
const onSeeked = () => {
  isSeeking.value = false
}

// 时间轴触摸开始
const onTouchStart = (e) => {
  isDragging.value = true
  startX.value = e.touches[0].pageX
  startScrollLeft.value = timeScrollLeft.value
  lastDragTime.value = Date.now()
  
  isSeeking.value = true
  if (videoContext.value) {
    videoContext.value.pause()
  }
}

// 时间轴触摸移动
const onTouchMove = (e) => {
  if (!isDragging.value) return
  
  const deltaX = e.touches[0].pageX - startX.value
  const newScrollLeft = startScrollLeft.value - deltaX
  
  const systemInfo = uni.getSystemInfoSync()
  const scrollViewWidth = systemInfo.windowWidth || 375
  const maxScrollLeft = rulerWidth.value - scrollViewWidth
  timeScrollLeft.value = Math.max(0, Math.min(maxScrollLeft, newScrollLeft))
  
  // 计算当前时间位置（基于触摸点位置）
  const touchX = e.touches[0].pageX
  const rulerStartX = touchX - startX.value + startScrollLeft.value
  const timeInSeconds = rulerStartX / 2
  
  // 更新显示
  currentTime.value = formatTime(timeInSeconds)
  playheadPosition.value = timeInSeconds * 2
  manualScrollPosition.value = timeInSeconds * 2
  
  // 实时跳转视频(节流处理)
  const now = Date.now()
  if (now - lastDragTime.value > 100) {
    if (videoContext.value) {
      console.log('尝试跳转视频到:', timeInSeconds, '秒');
      draggedTimeInSeconds.value = timeInSeconds
      videoContext.value.seek(timeInSeconds)
    }
    lastDragTime.value = now
  }
}

// 时间轴触摸结束
const onTouchEnd = () => {
  if (!isDragging.value) return
  
  // 计算最终时间位置
  const systemInfo = uni.getSystemInfoSync()
  const scrollViewWidth = systemInfo.windowWidth || 375
  const timeInSeconds = (timeScrollLeft.value + scrollViewWidth / 2) / 2


  // 精确跳转
  if (videoContext.value) {
    console.log('尝试跳转视频到最终时间:', draggedTimeInSeconds.value, '秒');
    videoContext.value.seek(draggedTimeInSeconds.value)
    videoContext.value.play()
  }
  
  playheadPosition.value = timeInSeconds * 2
  currentTime.value = formatTime(timeInSeconds)
  manualScrollPosition.value = timeInSeconds * 2
  
  isDragging.value = false
  isSeeking.value = false
}

// 时间轴滚动事件
const onTimeScroll = (e) => {
  if (!isDragging.value) {
    timeScrollLeft.value = e.detail.scrollLeft
  }
}

// 选择筛选条件
const selectFilter = (filter) => {
  activeFilter.value = filter
}

// 检查指定时间是否有事件
const hasEvent = (hour, minute) => {
  const timeStr = `${hour.toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}`
  const events = filteredEvents.value
  for (let i = 0; i < events.length; i++) {
    const event = events[i]
    if (event.date === activeDate.value && event.time.startsWith(timeStr)) {
      return true
    }
  }
  return false
}

// 获取事件类型
const getEventType = (hour, minute) => {
  const timeStr = `${hour.toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}`
  const eventsList = events.value
  for (let i = 0; i < eventsList.length; i++) {
    const event = eventsList[i]
    if (event.date === activeDate.value && event.time.startsWith(timeStr)) {
      return event.type
    }
  }
  return ''
}

// 格式化小时显示
const formatHour = (hour) => {
  return `${hour.toString().padStart(2, '0')}:00`
}

// 格式化时间显示
const formatTime = (seconds) => {
  const hrs = Math.floor(seconds / 3600)
  const mins = Math.floor((seconds % 3600) / 60)
  const secs = Math.floor(seconds % 60)
  return `${hrs.toString().padStart(2, '0')}:${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`
}

// 播放/暂停事件
const onPlay = () => {
  console.log('视频开始播放')
}

const onPause = () => {
  console.log('视频暂停')
}

// 组件生命周期
onMounted(() => {
  initVideoContext();
  if (!videoContext.value) {
    console.error('视频上下文初始化失败，请检查');
  }
});
</script>

<style>
.container {
  display: flex;
  flex-direction: column;
  height: 100vh;
  background-color: #f5f5f5;
}

.header {
  padding: 15px;
  background-color: #007aff;
  color: white;
  display: flex;
  justify-content: space-between;
  align-items: center;
  position: relative;
  z-index: 10;
}

.title {
  font-size: 18px;
  font-weight: bold;
}

.current-time {
  font-size: 14px;
  opacity: 0.9;
}

.date-scroll {
  width: 100%;
  white-space: nowrap;
  background-color: #333;
  padding: 8px 0;
  position: relative;
  z-index: 10;
  box-shadow: 0 2px 5px rgba(0,0,0,0.2);
}

.date-list {
  display: inline-flex;
  padding: 0 10px;
}

.date-item {
  padding: 8px 16px;
  margin: 0 5px;
  border-radius: 16px;
  background-color: #555;
  color: white;
  font-size: 14px;
  transition: all 0.2s;
}

.date-item.active {
  background-color: #007aff;
  font-weight: bold;
  transform: scale(1.05);
}

.video-container {
  width: 100%;
  height: 250px;
  background-color: #000;
  position: relative;
}

.video-player {
  width: 100%;
  height: 100%;
}

.time-ruler-container {
  width: 100%;
  padding: 10px 0;
  background-color: #333;
  position: relative;
  z-index: 5;
  box-shadow: 0 -2px 5px rgba(0,0,0,0.2);
}

.time-ruler-scroll {
  width: 100%;
  height: 70px;
  white-space: nowrap;
}

.time-ruler {
  display: inline-flex;
  height: 100%;
  padding-left: 10px;
  position: relative;
  touch-action: none;
  user-select: none;
}

.hour-section {
  display: flex;
  flex-direction: column;
  width: 120px;
  border-right: 1px solid #444;
  position: relative;
}

.hour-mark {
  color: white;
  font-size: 12px;
  padding: 4px 8px;
  background-color: #444;
  border-radius: 4px;
  margin: 2px;
  text-align: center;
}

.minute-marks {
  display: flex;
  flex: 1;
  position: relative;
}

.minute-mark {
  flex: 1;
  position: relative;
  border-right: 1px solid #444;
}

.minute-label {
  position: absolute;
  bottom: 5px;
  left: 2px;
  color: #aaa;
  font-size: 10px;
}

.event-dot {
  position: absolute;
  top: 8px;
  left: 50%;
  transform: translateX(-50%);
  width: 8px;
  height: 8px;
  border-radius: 50%;
  z-index: 2;
}

.event-dot.alarm {
  background-color: #ff3b30;
  box-shadow: 0 0 5px #ff3b30;
}

.event-dot.motion {
  background-color: #ff9500;
  box-shadow: 0 0 5px #ff9500;
}

.event-dot.human {
  background-color: #34c759;
  box-shadow: 0 0 5px #34c759;
}

.playhead {
  position: absolute;
  top: 0;
  width: 2px;
  height: 100%;
  background-color: #007aff;
  z-index: 10;
  pointer-events: none;
}

.playhead::after {
  content: '';
  position: absolute;
  top: 0;
  left: -6px;
  width: 14px;
  height: 14px;
  background-color: #007aff;
  border-radius: 50%;
  border: 2px solid white;
  box-sizing: border-box;
}

.time-indicator {
  position: absolute;
  top: -25px;
  left: 0;
  transform: translateX(-50%);
  background-color: #007aff;
  color: white;
  padding: 3px 8px;
  border-radius: 4px;
  font-size: 12px;
  z-index: 11;
  pointer-events: none;
  white-space: nowrap;
}

.time-indicator::after {
  content: '';
  position: absolute;
  bottom: -5px;
  left: 50%;
  transform: translateX(-50%);
  width: 0;
  height: 0;
  border-left: 5px solid transparent;
  border-right: 5px solid transparent;
  border-top: 5px solid #007aff;
}

.filter-bar {
  display: flex;
  justify-content: space-around;
  padding: 12px 5px;
  background-color: #333;
  position: fixed;
  bottom: 0;
  left: 0;
  right: 0;
  z-index: 20;
  box-shadow: 0 -2px 10px rgba(0,0,0,0.3);
}

.filter-item {
  padding: 8px 12px;
  border-radius: 16px;
  background-color: #555;
  color: white;
  font-size: 12px;
  transition: all 0.2s;
  flex: 1;
  margin: 0 5px;
  text-align: center;
}

.filter-item.active {
  background-color: #007aff;
  font-weight: bold;
  transform: scale(1.05);
}
</style>