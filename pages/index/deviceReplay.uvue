<template>
	<view class="container">
		<view class="video-container">
			<video id="myVideo" :src="videoSrc" :controls="true" class="video-player" @timeupdate="onTimeUpdate"
				@play="onPlay" @pause="onPause" @seeked="onSeeked" :autoplay="true" @loadedmetadata="onVideoLoaded"></video>
		</view>
		<view class="time-ruler-container">
			<scroll-view class="time-ruler-scroll" scroll-x :scroll-left="timeScrollLeft" scroll-with-animation
				@scroll="onTimeScroll">
				<view class="time-ruler" :style="{ width: rulerWidth + 'px' }" @touchstart="onTouchStart"
					@touchmove="onTouchMove" @touchend="onTouchEnd">
					<view v-for="(mark, index) in timeMarks" :key="'mark-' + index" :class="['time-mark', mark.type]"
						:style="{ left: mark.position + 'px' }" @click="seekToPosition(mark.time)">
						<text v-if="mark.type == 'major'" class="mark-label"></text>
						
					</view>
					<view v-for="(event, index) in filteredEvents" :key="'event-'+index" 
						class="event-marker"
						:style="{ left: getEventPosition(event) + 'px' }"
						@click.stop="seekToEvent(event)">
						<view :class="['event-dot', event.type]"></view>
					</view>
					<view class="playhead" :style="{ left: playheadPosition + 'px'}"></view>
				</view>
			</scroll-view>
		</view>
		<view class="date-list">
			<view v-for="(date, index) in dateList" :key="index"
				:class="['date-item', activeDate == date ? 'active' : '']" @click="selectDate(date)">
				{{ date }}
			</view>
		</view>
		<view class="filter-bar">
			<view v-for="filter in filters" :key="filter.value"
				:class="['filter-item', activeFilter == filter.value ? 'active' : '']"
				@click="selectFilter(filter.value as string)">
				{{ filter.label }}
			</view>
		</view>
	</view>
</template>

<script setup>
	import { ref, computed, onMounted, getCurrentInstance } from 'vue'

	class EventType {
		date : string;
		time : string;
		type : string;

		constructor(date : string, time : string, type : string) {
			this.date = date;
			this.time = time;
			this.type = type;
		}
	}

	// 计算时间刻度
	type TimeMark = {
		time : number
		position : number
		type : string
	}
	// 响应式状态
	const currentDate = ref('2024-10-21')
	const currentTime = ref('00:00:00')
	const activeDate = ref('10-21')
	const activeFilter = ref('all')
	const videoSrc = ref('/static/video/video.mp4')
	const videoContext = ref<VideoContext | null>(null)
	const isSeeking = ref(false)
	const timeScrollLeft = ref(0)
	const playheadPosition = ref(0)
	const videoDuration = ref(0)
	const lastSyncTime = ref(0)
	const isDragging = ref(false)
	const startX = ref(0)
	const startScrollLeft = ref(0)
	const lastDragTime = ref(0)
	const manualScrollPosition = ref(0)
	const draggedTimeInSeconds = ref(0)


	// 常量配置
	const dateList = ['10-21', '10-22', '10-23', '10-24', '10-25', '10-26']
	const filters = [
		{ label: '只看报警', value: 'alarm' },
		{ label: '移动侦测', value: 'motion' },
		{ label: '人形侦测', value: 'human' },
		{ label: '全部', value: 'all' }
	]

	// 模拟事件数据
	const events = ref<EventType[]>([
		{ date: '10-21', time: '00:00:10', type: 'alarm' },
		{ date: '10-21', time: '00:00:30', type: 'motion' },
		{ date: '10-21', time: '00:01:45', type: 'human' },
		{ date: '10-21', time: '00:01:20', type: 'alarm' }
	])

	// 计算属性
	const rulerWidth = computed(() => {
		const systemInfo = uni.getSystemInfoSync()
		return systemInfo.windowWidth
	})


	// 时间字符串转秒数
	const convertTimeToSeconds = (timeStr : string) => {
		const parts = timeStr.split(':')
		const h = parseInt(parts[0])
		const m = parseInt(parts[1])
		const s = parts.length > 2 ? parseInt(parts[2]) : 0
		return h * 3600 + m * 60 + s
	}

	const timeMarks = computed<TimeMark[]>(() => {
		const marks = [] as TimeMark[]
		const duration = videoDuration.value
		if (duration == 0) return marks

		let majorInterval : number
		if (duration <= 60) { 
			majorInterval = 10
		} else if (duration <= 300) {
			majorInterval = 30
		} else if (duration <= 1800) {
			majorInterval = 60
		} else if (duration <= 3600) {
			majorInterval = 300
		} else if (duration <= 7200) { 
			majorInterval = 600
		} else {
			majorInterval = 1800
		}

		const minorInterval = majorInterval / 10

		const pixelsPerSecond = rulerWidth.value / duration

		for (let time = 0; time <= duration; time += minorInterval) {
			const isMajor = (time % majorInterval) == 0
			marks.push({
				time,
				position: time * pixelsPerSecond + 3,
				type: isMajor ? 'major' : 'minor'
			})
		}

		return marks
	})

	const onVideoLoaded = (e: UTSJSONObject) => {
		videoDuration.value = e['duration'] as number
		console.log('视频加载完成，时长:', videoDuration.value)
	}


	// 格式化刻度时间
	const formatMarkTime = (seconds : number) => {
		const hrs = Math.floor(seconds / 3600)
		const mins = Math.floor((seconds % 3600) / 60)
		const secs = Math.floor(seconds % 60)

		if (hrs > 0) {
			return `${hrs}:${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`
		}
		return `${mins}:${secs.toString().padStart(2, '0')}`
	}

	const filteredEvents = computed<EventType[]>(() => {
		if (activeFilter.value === 'all') return events.value
		return events.value.filter((e) => e.type === activeFilter.value)
	})

	// 初始化视频上下文
	const initVideoContext = () => {
		try {
			videoContext.value = uni.createVideoContext('myVideo');
			console.log('视频上下文初始化成功', videoContext.value);
		} catch (error) {
			console.error('创建视频上下文失败:', error);
		}
	}
	// 加载视频数据
	const loadVideoData = (date : String) => {
		console.log('加载日期数据:', date)
	}


	// 选择日期
	const selectDate = (date : string) => {
		activeDate.value = date
		currentDate.value = `2024-${date}`
		loadVideoData(date)
	}

	// 格式化时间显示
	const formatTime = (seconds : number) => {
		const hrs = Math.floor(seconds / 3600)
		const mins = Math.floor((seconds % 3600) / 60)
		const secs = Math.floor(seconds % 60)
		return `${hrs.toString().padStart(2, '0')}:${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`
	}


	// 更新播放头位置
	const updatePlayheadPosition = (currentTimeInSeconds : number) => {
		const pixelsPerSecond = rulerWidth.value / videoDuration.value
		playheadPosition.value = currentTimeInSeconds * pixelsPerSecond
		const systemInfo = uni.getSystemInfoSync()
		const scrollViewWidth = systemInfo.windowWidth
		const halfWidth = scrollViewWidth / 2
		const targetScrollLeft = playheadPosition.value - halfWidth

		const maxScrollLeft = rulerWidth.value - scrollViewWidth
		timeScrollLeft.value = Math.max(0, Math.min(maxScrollLeft, targetScrollLeft))
	}

	// 视频时间更新 
	const onTimeUpdate = (e : UniVideoTimeUpdateEvent) => {
		if (isSeeking.value || isDragging.value) return

		const currentTimeInSeconds = e.detail.currentTime
		currentTime.value = formatTime(currentTimeInSeconds)
		videoDuration.value = e.detail.duration;
		// 节流处理
		const now = Date.now()
		if (now - lastSyncTime.value < 200) return
		lastSyncTime.value = now

		updatePlayheadPosition(currentTimeInSeconds - 1)
	}

	const seekToSeconds = (timeInSeconds: number) => {
		console.log('尝试跳转到:', timeInSeconds, '秒')
		if (videoContext.value != null) {
			videoContext.value.pause()
			videoContext.value.seek(timeInSeconds)
			setTimeout(() => {
				videoContext.value?.play()
				console.log('跳转完成，应开始播放')
			}, 100)
		}
	}

	// 获取事件位置
	const getEventPosition = (event: EventType) => {
		const seconds = convertTimeToSeconds(event.time)
		const duration = videoDuration.value != 0 ? videoDuration.value : 300 // 默认5分钟
		const pixelsPerSecond = rulerWidth.value / duration
		return seconds * pixelsPerSecond
	}

	// 跳转到事件时间点
	const seekToEvent = (event: EventType) => {
		const seconds = convertTimeToSeconds(event.time)
		console.log('点击事件时间点：', seconds, '秒', '当前视频时长:', videoDuration.value)
		
		if (videoContext.value == null) {
			console.error('视频上下文未初始化')
			return
		}
		
		isSeeking.value = true
		currentTime.value = formatTime(seconds)
		playheadPosition.value = getEventPosition(event)
		
		// 先暂停再跳转
		videoContext.value.pause()
		videoContext.value.seek(seconds)
		
		// 小延迟后播放确保跳转完成
		setTimeout(() => {
			videoContext.value?.play()
			isSeeking.value = false
			console.log('应已跳转到指定位置并开始播放')
		}, 150)
	}


	// 跳转到指定时间
	const seekToTime = (hour : number, minute : number) => {
		const timeInSeconds = hour * 3600 + minute * 60
		seekToSeconds(timeInSeconds)
	}
	// 跳转到指定位置(秒)
	const seekToPosition = (seconds : number) => {
		seekToSeconds(seconds)
	}

	// 跳转完成
	const onSeeked = () => {
		isSeeking.value = false
	}

	// 时间轴触摸开始
	const onTouchStart = (e : TouchEvent) => {
		isDragging.value = true
		startX.value = e.touches[0].pageX
		startScrollLeft.value = startX.value
		lastDragTime.value = Date.now()

		isSeeking.value = true
		if (videoContext.value != null) {
			videoContext.value.pause()
		}
	}

	// 时间轴触摸移动
	const onTouchMove = (e : TouchEvent) => {
		if (!isDragging.value) return

		const deltaX = e.touches[0].pageX - startX.value
		const newScrollLeft = startScrollLeft.value - deltaX

		const systemInfo = uni.getSystemInfoSync()
		const scrollViewWidth = systemInfo.windowWidth

		const maxScrollLeft = rulerWidth.value - scrollViewWidth
		timeScrollLeft.value = Math.max(0, Math.min(maxScrollLeft, newScrollLeft))

		// 计算当前时间位置（基于触摸点位置）
		const touchX = e.touches[0].pageX
		const rulerStartX = touchX - startX.value + startScrollLeft.value
		const pixelsPerSecond = rulerWidth.value / videoDuration.value
		const timeInSeconds = rulerStartX / pixelsPerSecond

		// 更新显示
		currentTime.value = formatTime(timeInSeconds)
		playheadPosition.value = timeInSeconds * pixelsPerSecond
		manualScrollPosition.value = timeInSeconds * pixelsPerSecond

		// 实时跳转视频(节流处理)
		const now = Date.now()
		if (now - lastDragTime.value > 100) {
			if (videoContext.value != null) {
				console.log('尝试跳转视频到:', timeInSeconds, '秒');
				draggedTimeInSeconds.value = timeInSeconds
				videoContext.value.seek(timeInSeconds)
			}
			lastDragTime.value = now
		}
	}

	// 时间轴触摸结束
	const onTouchEnd = () => {
		if (!isDragging.value) return

		// 计算最终时间位置
		const systemInfo = uni.getSystemInfoSync()
		const scrollViewWidth = systemInfo.windowWidth
		const pixelsPerSecond = rulerWidth.value / videoDuration.value;
		const timeInSeconds = (timeScrollLeft.value + scrollViewWidth / 2) / pixelsPerSecond;

		if (videoContext.value != null) {
			console.log('尝试跳转视频到最终时间:', draggedTimeInSeconds.value, '秒');
			videoContext.value.seek(draggedTimeInSeconds.value)
			videoContext.value.play()
		}

		playheadPosition.value = timeInSeconds * pixelsPerSecond
		currentTime.value = formatTime(timeInSeconds)
		// manualScrollPosition.value = timeInSeconds * 2

		isDragging.value = false
		isSeeking.value = false
	}

	// 定义滚动事件detail类型
	type TimeScrollDetail = {
		scrollLeft : number
	}
	// 定义滚动事件类型
	type TimeScrollEvent = {
		detail : TimeScrollDetail
	}
	// 时间轴滚动事件
	const onTimeScroll = (e : TimeScrollEvent) => {
		if (!isDragging.value) {
			timeScrollLeft.value = e.detail.scrollLeft
		}
	}

	// 选择筛选条件
	const selectFilter = (filter : string) => {
		activeFilter.value = filter
	}

	// 检查指定时间是否有事件
	const hasEvent = (hour : number, minute : number) => {
		const timeStr = `${hour.toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}`
		const events = filteredEvents.value
		for (let i = 0; i < events.length; i++) {
			const event = events[i]
			if (event.date === activeDate.value && event.time.startsWith(timeStr)) {
				return true
			}
		}
		return false
	}

	// 获取事件类型
	const getEventType = (hour : number, minute : number) => {
		const timeStr = `${hour.toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}`
		const eventsList = events.value
		for (let i = 0; i < eventsList.length; i++) {
			const event = eventsList[i]
			if (event.date === activeDate.value && event.time.startsWith(timeStr)) {
				return event.type
			}
		}
		return ''
	}

	// 格式化小时显示
	const formatHour = (hour : number) => {
		return `${hour.toString().padStart(2, '0')}:00`
	}

	// 播放/暂停事件
	const onPlay = () => {
		console.log('视频开始播放')

	}

	const onPause = () => {
		console.log('视频暂停')
	}

	// 组件生命周期
	onMounted(() => {
		initVideoContext();
		if (videoContext.value == null) {
			console.error('视频上下文初始化失败，请检查');
		}
	});
</script>

<style>
	.container {
		display: flex;
		flex-direction: column;
		height: 100%;
		background-color: #f5f5f5;
	}


	.date-list {
		display: flex;
		flex-direction: row;
		padding: 20rpx;
	}

	.date-item {
		padding: 8px 16px;
		margin: 0 5px;
		border-radius: 16px;
		background-color: #555;
		color: white;
		font-size: 14px;
		transition: all 0.2s;
	}

	.date-item.active {
		background-color: #007aff;
		color: #fff;
	}

	.video-container {
		width: 100%;
		height: 250px;
		background-color: #000;
		position: relative;
	}

	.video-player {
		width: 100%;
		height: 100%;
	}

	.time-ruler-container {
		width: 100%;
		padding: 10px 0;
		background-color: #fff;
		position: relative;
		z-index: 5;
	}

	.time-ruler-scroll {
		width: 100%;
		height: 70px;
		white-space: nowrap;
	}

	.playhead {
		position: absolute;
		top: 0;
		width: 2px;
		height: 100%;
		background-color: #007aff;
		z-index: 10;
		pointer-events: none;
	}

	.filter-bar {
		display: flex;
		justify-content: space-around;
		flex-direction: row;
		padding: 12px 5px;
		background-color: #fff;
		z-index: 20;
	}

	.filter-item {
		padding: 8px 12px;
		border-radius: 16px;
		background-color: #555;
		color: white;
		font-size: 12px;
		transition: all 0.2s;
		flex: 1;
		margin: 0 5px;
		text-align: center;
	}

	.filter-item.active {
		background-color: #007aff;
		font-weight: bold;
		transform: scale(1.05);
	}

	.time-ruler {
		display: flex;
		height: 100%;
		position: relative;
		width: 100%;
		border-bottom: 1rpx solid #ccc;
	}

	.time-mark {
		position: absolute;
		bottom: 0;
		transform: translateX(-50%);
		pointer-events: auto;
	}

	.time-mark.major {
		height: 20px;
		background-color: #333;
		width: 2px;
	}

	.time-mark.minor {
		height: 10px;
		background-color: #999;
		width: 1px;
	}



	.event-marker {
		position: absolute;
		bottom: 25px;
		transform: translateX(-50%);
		z-index: 5;
	}

	.event-dot {
		width: 10px;
		height: 10px;
		border-radius: 50%;
	}

	.event-dot.alarm {
		background-color: #ff3b30;
	}

	.event-dot.motion {
		background-color: #ff9500;
	}

	.event-dot.human {
		background-color: #34c759;
	}
</style>