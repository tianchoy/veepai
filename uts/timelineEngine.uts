// 核心类型定义（使用type替代interface避免Android解析问题）
type TimelineParams = {
  duration: number
  width: number
  density: number
  events: EventMarker[]
  visibleRange: { start: number; end: number }
}

type EventMarker = {
  timestamp: number
  type: 'alarm' | 'motion' | 'custom'
  level: number
}

type TimeMark = {
  timestamp: number
  position: number
  label: string
  hasEvent: boolean
}

// 主计算函数（Android/iOS双平台兼容）
export function calculateTimeline(params: TimelineParams): TimeMark[] {
  // 参数安全校验
  if (!params || params.duration <= 0 || params.width <= 0) {
    console.error("Invalid timeline parameters")
    return []
  }

  const results: TimeMark[] = []
  const pxPerSecond = params.width / params.duration
  const safeDensity = Math.max(1, Math.min(60, params.density))

  // 生成时间标记（仅渲染可见区域）
  for (let minute = 0; minute <= params.duration / 60; minute += safeDensity) {
    const timestamp = minute * 60
    if (timestamp < params.visibleRange.start || timestamp > params.visibleRange.end) continue

    results.push({
      timestamp: timestamp,
      position: androidSafePositionCalc(timestamp * pxPerSecond), // Android特殊处理
      label: formatTimeLabel(minute),
      hasEvent: checkEvent(timestamp, params.events)
    })
  }

  return results
}

// Android浮点精度处理
function androidSafePositionCalc(pos: number): number {
  // #ifdef APP-ANDROID
  return Math.round(pos * 100) / 100
  // #endif
  // #ifndef APP-ANDROID
  return pos
  // #endif
}

// 事件检测
function checkEvent(timestamp: number, events: EventMarker[]): boolean {
  if (!events || events.length === 0) return false
  return events.some(e => Math.abs(e.timestamp - timestamp) < 30)
}

// 时间格式化
function formatTimeLabel(totalMinutes: number): string {
  const hours = Math.floor(totalMinutes / 60)
  const mins = totalMinutes % 60
  return `${padZero(hours)}:${padZero(mins)}`
}

function padZero(num: number): string {
  return num < 10 ? `0${num}` : num.toString()
}